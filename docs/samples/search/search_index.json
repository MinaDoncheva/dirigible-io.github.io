{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Eclipse Dirigible \u2122 Samples This section collects various applications created to demonstrate the main use purposes and strengths of the cloud toolkit. They are built on scenarios with different complexity level, from exemplary samples targeting demonstration of single features to complete end-to-end applications. Basic Samples Console Log Levels - show how to use the built-in console object to print information in the standard output HTTP Request - basic usage of the HTTP Request API REST Calls - how to execute REST calls (GET, POST, PUT, DELETE) using the HTTP Client API REST Service - getting started with the REST framework Database Query - using the simplified Query Database API Database Procedure - Create & Execute - create & execute SQL Procedure through the Database Procedure API Database Dynamic Datasource - how to use dynamic datasources Mail Client - how to send mails using the Mail Client API Generate a Random UUID - generate a random UUID Decode a String from Base64 - how to decode a string from Base64 encoded input Encrypt a Text with SHA512 - how to use SHA512 to encrypt an input byte array Encode a String to Hexadecimal Format - encoding a string to HEX Convert a String from JSON to XML - JSON to XML transformation Platform Lifecycle - getting started with the Platform Lifecycle API Liquibase - how to make use of the Liquibase's *.changelog descriptors Tutorials Bookstore Application - create a full-stack application for Books management - database, persistence, web service and user interface. Generate Application from Model - this tutorial will guide you through the creation of an entity data model and generation of a full-stack Dirigible application, from this model. BPMN Process - create a BPMN Process definition, with a simple Service step, which triggers a JavaScript handler service Build a Custom Stack - how to combine Dirigible modules with pure Java based ones and how to fine-tune the distribution for production. Embedded Dirigible - embed Dirigible into an arbitrary Java application with specific requirements for the Contributing to IDE Modules - this tutorial will guide you through the adding of changes in the IDE projects.","title":"Samples"},{"location":"#eclipse-dirigible-samples","text":"This section collects various applications created to demonstrate the main use purposes and strengths of the cloud toolkit. They are built on scenarios with different complexity level, from exemplary samples targeting demonstration of single features to complete end-to-end applications.","title":"Eclipse Dirigible&trade; Samples"},{"location":"#basic-samples","text":"Console Log Levels - show how to use the built-in console object to print information in the standard output HTTP Request - basic usage of the HTTP Request API REST Calls - how to execute REST calls (GET, POST, PUT, DELETE) using the HTTP Client API REST Service - getting started with the REST framework Database Query - using the simplified Query Database API Database Procedure - Create & Execute - create & execute SQL Procedure through the Database Procedure API Database Dynamic Datasource - how to use dynamic datasources Mail Client - how to send mails using the Mail Client API Generate a Random UUID - generate a random UUID Decode a String from Base64 - how to decode a string from Base64 encoded input Encrypt a Text with SHA512 - how to use SHA512 to encrypt an input byte array Encode a String to Hexadecimal Format - encoding a string to HEX Convert a String from JSON to XML - JSON to XML transformation Platform Lifecycle - getting started with the Platform Lifecycle API Liquibase - how to make use of the Liquibase's *.changelog descriptors","title":"Basic Samples"},{"location":"#tutorials","text":"Bookstore Application - create a full-stack application for Books management - database, persistence, web service and user interface. Generate Application from Model - this tutorial will guide you through the creation of an entity data model and generation of a full-stack Dirigible application, from this model. BPMN Process - create a BPMN Process definition, with a simple Service step, which triggers a JavaScript handler service Build a Custom Stack - how to combine Dirigible modules with pure Java based ones and how to fine-tune the distribution for production. Embedded Dirigible - embed Dirigible into an arbitrary Java application with specific requirements for the Contributing to IDE Modules - this tutorial will guide you through the adding of changes in the IDE projects.","title":"Tutorials"},{"location":"basic/base64-decode/","text":"Base64 - Decode Steps Create a project utils-base64 . Create a JavaScript service with the name base64-decode.js Enter the following content: var base64 = require ( \"utils/v4/base64\" ); var response = require ( \"http/v4/response\" ); var input = \"PT4/\" ; var result = base64 . decode ( input ); console . log ( \"decoded: \" + result ); response . println ( JSON . stringify ( \"decoded: \" + result )); response . flush (); response . close (); For more information, see the API documentation.","title":"Base64 - Decode"},{"location":"basic/base64-decode/#base64-decode","text":"","title":"Base64 - Decode"},{"location":"basic/base64-decode/#steps","text":"Create a project utils-base64 . Create a JavaScript service with the name base64-decode.js Enter the following content: var base64 = require ( \"utils/v4/base64\" ); var response = require ( \"http/v4/response\" ); var input = \"PT4/\" ; var result = base64 . decode ( input ); console . log ( \"decoded: \" + result ); response . println ( JSON . stringify ( \"decoded: \" + result )); response . flush (); response . close (); For more information, see the API documentation.","title":"Steps"},{"location":"basic/base64-encode/","text":"Base64 - Encode Steps Create a project utils-base64 . Create a JavaScript service with the name base64-encode.js . Enter the following content: var base64 = require ( \"utils/v4/base64\" ); var response = require ( \"http/v4/response\" ); var input = [ 61 , 62 , 63 ]; var result = base64 . encode ( input ); console . log ( \"encoded: \" + result ); response . println ( JSON . stringify ( \"encoded: \" + result )); response . flush (); response . close (); For more information, see the API documentation.","title":"Base64 - Encode"},{"location":"basic/base64-encode/#base64-encode","text":"","title":"Base64 - Encode"},{"location":"basic/base64-encode/#steps","text":"Create a project utils-base64 . Create a JavaScript service with the name base64-encode.js . Enter the following content: var base64 = require ( \"utils/v4/base64\" ); var response = require ( \"http/v4/response\" ); var input = [ 61 , 62 , 63 ]; var result = base64 . encode ( input ); console . log ( \"encoded: \" + result ); response . println ( JSON . stringify ( \"encoded: \" + result )); response . flush (); response . close (); For more information, see the API documentation.","title":"Steps"},{"location":"basic/console/","text":"Console Steps Create a project console . Then create a JavaScript service named console-test.js . Within the service code, enter the following content: console . info ( \"Info message: %s\" , \"Hello World!\" ); console . error ( \"Error message.\" ); console . warn ( \"Warning message.\" ); console . log ( \"Log message.\" ); console . trace ( \"Trace.\" ); For more information, see the API documentation.","title":"Console"},{"location":"basic/console/#console","text":"","title":"Console"},{"location":"basic/console/#steps","text":"Create a project console . Then create a JavaScript service named console-test.js . Within the service code, enter the following content: console . info ( \"Info message: %s\" , \"Hello World!\" ); console . error ( \"Error message.\" ); console . warn ( \"Warning message.\" ); console . log ( \"Log message.\" ); console . trace ( \"Trace.\" ); For more information, see the API documentation.","title":"Steps"},{"location":"basic/converting-json-xml/","text":"Converting JSON to XML Steps Create a project utils-xml . Create a JavaScript service with the name json-xml.js . Enter the following content: var xml = require ( \"utils/v4/xml\" ); var response = require ( \"http/v4/response\" ); var input = { a : { b : \"text_b\" , c : \"text_c\" , d : { e : \"text_e\" , }, }, }; var result = xml . fromJson ( input ); console . log ( \"XML: \" + result ); response . println ( JSON . stringify ( \"XML: \" + result )); response . flush (); response . close (); For more information, see the API documentation.","title":"Converting JSON to XML"},{"location":"basic/converting-json-xml/#converting-json-to-xml","text":"","title":"Converting JSON to XML"},{"location":"basic/converting-json-xml/#steps","text":"Create a project utils-xml . Create a JavaScript service with the name json-xml.js . Enter the following content: var xml = require ( \"utils/v4/xml\" ); var response = require ( \"http/v4/response\" ); var input = { a : { b : \"text_b\" , c : \"text_c\" , d : { e : \"text_e\" , }, }, }; var result = xml . fromJson ( input ); console . log ( \"XML: \" + result ); response . println ( JSON . stringify ( \"XML: \" + result )); response . flush (); response . close (); For more information, see the API documentation.","title":"Steps"},{"location":"basic/converting-xml-json/","text":"Converting XML to JSON Steps Create a project utils-xml . Create a JavaScript service with the name xml-json.js . Enter the following content: var xml2json = require ( \"utils/v4/xml\" ); var response = require ( \"http/v4/response\" ); var input = \"<a><b>text_b</b><c>text_c</c><d><e>text_e</e></d></a>\" ; var result = xml2json . toJson ( input ); var json = JSON . parse ( result ); console . log ( \"JSON: \" + JSON . stringify ( json )); response . println ( JSON . stringify ( json )); response . flush (); response . close (); For more information, see the API documentation.","title":"Converting XML to JSON"},{"location":"basic/converting-xml-json/#converting-xml-to-json","text":"","title":"Converting XML to JSON"},{"location":"basic/converting-xml-json/#steps","text":"Create a project utils-xml . Create a JavaScript service with the name xml-json.js . Enter the following content: var xml2json = require ( \"utils/v4/xml\" ); var response = require ( \"http/v4/response\" ); var input = \"<a><b>text_b</b><c>text_c</c><d><e>text_e</e></d></a>\" ; var result = xml2json . toJson ( input ); var json = JSON . parse ( result ); console . log ( \"JSON: \" + JSON . stringify ( json )); response . println ( JSON . stringify ( json )); response . flush (); response . close (); For more information, see the API documentation.","title":"Steps"},{"location":"basic/database-dynamic/","text":"Database - Dynamic Datasource Steps Create a project database . Then create a JavaScript service named database-dynamic.js . Within the service code, enter the following content: var response = require ( \"http/v4/response\" ); var database = require ( \"db/v4/database\" ); database . createDataSource ( \"mydynamic\" , \"org.h2.Driver\" , \"jdbc:h2:~/mytest\" , \"sa\" , \"\" , null ); var connection = database . getConnection ( \"dynamic\" , \"mydynamic\" ); try { var statement = connection . prepareStatement ( \"select current_date from dual\" ); var resultSet = statement . executeQuery (); while ( resultSet . next ()) { response . println ( \"[date]: \" + resultSet . getString ( 1 )); } resultSet . close (); statement . close (); } catch ( e ) { console . trace ( e ); response . println ( e . message ); } finally { connection . close (); } response . flush (); response . close (); For more information, see the API documentation.","title":"Database - Dynamic Datasource"},{"location":"basic/database-dynamic/#database-dynamic-datasource","text":"","title":"Database - Dynamic Datasource"},{"location":"basic/database-dynamic/#steps","text":"Create a project database . Then create a JavaScript service named database-dynamic.js . Within the service code, enter the following content: var response = require ( \"http/v4/response\" ); var database = require ( \"db/v4/database\" ); database . createDataSource ( \"mydynamic\" , \"org.h2.Driver\" , \"jdbc:h2:~/mytest\" , \"sa\" , \"\" , null ); var connection = database . getConnection ( \"dynamic\" , \"mydynamic\" ); try { var statement = connection . prepareStatement ( \"select current_date from dual\" ); var resultSet = statement . executeQuery (); while ( resultSet . next ()) { response . println ( \"[date]: \" + resultSet . getString ( 1 )); } resultSet . close (); statement . close (); } catch ( e ) { console . trace ( e ); response . println ( e . message ); } finally { connection . close (); } response . flush (); response . close (); For more information, see the API documentation.","title":"Steps"},{"location":"basic/database-procedure-call/","text":"Database - Procedure Call Steps Switch to the Database Perspective Execute the following SQL script: CREATE TABLE CUSTOMERS ( ID INTEGER PRIMARY KEY , NAME VARCHAR ( 50 ), COUNTRY VARCHAR ( 50 )); INSERT INTO CUSTOMERS VALUES ( 1 , 'Google' , 'USA' ); INSERT INTO CUSTOMERS VALUES ( 2 , 'SAP' , 'Germany' ); INSERT INTO CUSTOMERS VALUES ( 3 , 'DigitalLights' , 'Bulgaria' ); INSERT INTO CUSTOMERS VALUES ( 4 , 'Quanterall' , 'Bulgaria' ); INSERT INTO CUSTOMERS VALUES ( 5 , 'SyMetric' , 'India' ); Create CUSTOMERS_BY_COUNTRY_AND_ALL_CUSTOMERS stored procedure: CREATE PROCEDURE CUSTOMERS_BY_COUNTRY_AND_ALL_CUSTOMERS ( in country varchar ( 50 ), out customersByCountry CUSTOMERS , out allCustomers CUSTOMERS ) AS BEGIN customersByCountry = SELECT * FROM CUSTOMERS WHERE COUNTRY = : country ; allCustomers = SELECT * FROM CUSTOMERS ; END ; Create a project database-procedure . Then create a JavaScript service named database-procedure-call.js . Within the service code, enter the following content: var response = require ( \"http/v4/response\" ); var database = require ( \"db/v4/database\" ); let connection = null ; try { connection = database . getConnection (); let hasMoreResults = false ; let sql = \"CALL CUSTOMERS_BY_COUNTRY_AND_ALL_CUSTOMERS(COUNTRY => 'Bulgaria', customersByCountry => ?, allCustomers => ?)\" ; let callableStatement = connection . prepareCall ( sql ); let resultSet = callableStatement . executeQuery (); do { while ( resultSet . next ()) { response . println ( `Name: ${ resultSet . getString ( \"NAME\" ) } , Country: ${ resultSet . getString ( \"COUNTRY\" ) } ` ); } hasMoreResults = callableStatement . getMoreResults (); if ( hasMoreResults ) { resultSet . close (); resultSet = callableStatement . getResultSet (); response . println ( \"\\n---- End of ResultSet ----\\n\" ); } } while ( hasMoreResults ); callableStatement . close (); } finally { if ( connection != null ) { connection . close (); } } response . flush (); response . close (); For more information, see the API documentation.","title":"Database - Procedure Call"},{"location":"basic/database-procedure-call/#database-procedure-call","text":"","title":"Database - Procedure Call"},{"location":"basic/database-procedure-call/#steps","text":"Switch to the Database Perspective Execute the following SQL script: CREATE TABLE CUSTOMERS ( ID INTEGER PRIMARY KEY , NAME VARCHAR ( 50 ), COUNTRY VARCHAR ( 50 )); INSERT INTO CUSTOMERS VALUES ( 1 , 'Google' , 'USA' ); INSERT INTO CUSTOMERS VALUES ( 2 , 'SAP' , 'Germany' ); INSERT INTO CUSTOMERS VALUES ( 3 , 'DigitalLights' , 'Bulgaria' ); INSERT INTO CUSTOMERS VALUES ( 4 , 'Quanterall' , 'Bulgaria' ); INSERT INTO CUSTOMERS VALUES ( 5 , 'SyMetric' , 'India' ); Create CUSTOMERS_BY_COUNTRY_AND_ALL_CUSTOMERS stored procedure: CREATE PROCEDURE CUSTOMERS_BY_COUNTRY_AND_ALL_CUSTOMERS ( in country varchar ( 50 ), out customersByCountry CUSTOMERS , out allCustomers CUSTOMERS ) AS BEGIN customersByCountry = SELECT * FROM CUSTOMERS WHERE COUNTRY = : country ; allCustomers = SELECT * FROM CUSTOMERS ; END ; Create a project database-procedure . Then create a JavaScript service named database-procedure-call.js . Within the service code, enter the following content: var response = require ( \"http/v4/response\" ); var database = require ( \"db/v4/database\" ); let connection = null ; try { connection = database . getConnection (); let hasMoreResults = false ; let sql = \"CALL CUSTOMERS_BY_COUNTRY_AND_ALL_CUSTOMERS(COUNTRY => 'Bulgaria', customersByCountry => ?, allCustomers => ?)\" ; let callableStatement = connection . prepareCall ( sql ); let resultSet = callableStatement . executeQuery (); do { while ( resultSet . next ()) { response . println ( `Name: ${ resultSet . getString ( \"NAME\" ) } , Country: ${ resultSet . getString ( \"COUNTRY\" ) } ` ); } hasMoreResults = callableStatement . getMoreResults (); if ( hasMoreResults ) { resultSet . close (); resultSet = callableStatement . getResultSet (); response . println ( \"\\n---- End of ResultSet ----\\n\" ); } } while ( hasMoreResults ); callableStatement . close (); } finally { if ( connection != null ) { connection . close (); } } response . flush (); response . close (); For more information, see the API documentation.","title":"Steps"},{"location":"basic/database-procedure/","text":"Database Procedure - Create & Execute Steps Switch to the Database Perspective Execute the following SQL script: CREATE TABLE CUSTOMERS ( ID INTEGER PRIMARY KEY , NAME VARCHAR ( 50 ), COUNTRY VARCHAR ( 50 )); INSERT INTO CUSTOMERS VALUES ( 1 , 'Google' , 'USA' ); INSERT INTO CUSTOMERS VALUES ( 2 , 'SAP' , 'Germany' ); INSERT INTO CUSTOMERS VALUES ( 3 , 'DigitalLights' , 'Bulgaria' ); INSERT INTO CUSTOMERS VALUES ( 4 , 'Quanterall' , 'Bulgaria' ); INSERT INTO CUSTOMERS VALUES ( 5 , 'SyMetric' , 'India' ); Create a project database-procedure . Then create a JavaScript service named database-procedure-create.js . Within the service code, enter the following content: var response = require ( \"http/v4/response\" ); var procedure = require ( \"db/v4/procedure\" ); let sql = \" \\ CREATE PROCEDURE CUSTOMERS_BY_COUNTRY_AND_ALL_CUSTOMERS (in country varchar(50), out customersByCountry CUSTOMERS, out allCustomers CUSTOMERS) \\ AS \\ BEGIN \\ customersByCountry = SELECT * FROM CUSTOMERS WHERE COUNTRY = :country; \\ allCustomers = SELECT * FROM CUSTOMERS; \\ END; \\ \" ; procedure . create ( sql ); response . println ( \"Procedure created\" ); response . flush (); response . close (); Create a JavaScript service named database-procedure-execute.js . Within the service code, enter the following content: var response = require ( \"http/v4/response\" ); var procedure = require ( \"db/v4/procedure\" ); let sql = \"CALL CUSTOMERS_BY_COUNTRY_AND_ALL_CUSTOMERS(COUNTRY => ?, customersByCountry => ?, allCustomers => ?)\" ; let result = procedure . execute ( sql , [ \"Bulgaria\" ]); response . println ( JSON . stringify ( result )); response . flush (); response . close (); For more information, see the API documentation.","title":"Database Procedure - Create & Execute"},{"location":"basic/database-procedure/#database-procedure-create-execute","text":"","title":"Database Procedure - Create &amp; Execute"},{"location":"basic/database-procedure/#steps","text":"Switch to the Database Perspective Execute the following SQL script: CREATE TABLE CUSTOMERS ( ID INTEGER PRIMARY KEY , NAME VARCHAR ( 50 ), COUNTRY VARCHAR ( 50 )); INSERT INTO CUSTOMERS VALUES ( 1 , 'Google' , 'USA' ); INSERT INTO CUSTOMERS VALUES ( 2 , 'SAP' , 'Germany' ); INSERT INTO CUSTOMERS VALUES ( 3 , 'DigitalLights' , 'Bulgaria' ); INSERT INTO CUSTOMERS VALUES ( 4 , 'Quanterall' , 'Bulgaria' ); INSERT INTO CUSTOMERS VALUES ( 5 , 'SyMetric' , 'India' ); Create a project database-procedure . Then create a JavaScript service named database-procedure-create.js . Within the service code, enter the following content: var response = require ( \"http/v4/response\" ); var procedure = require ( \"db/v4/procedure\" ); let sql = \" \\ CREATE PROCEDURE CUSTOMERS_BY_COUNTRY_AND_ALL_CUSTOMERS (in country varchar(50), out customersByCountry CUSTOMERS, out allCustomers CUSTOMERS) \\ AS \\ BEGIN \\ customersByCountry = SELECT * FROM CUSTOMERS WHERE COUNTRY = :country; \\ allCustomers = SELECT * FROM CUSTOMERS; \\ END; \\ \" ; procedure . create ( sql ); response . println ( \"Procedure created\" ); response . flush (); response . close (); Create a JavaScript service named database-procedure-execute.js . Within the service code, enter the following content: var response = require ( \"http/v4/response\" ); var procedure = require ( \"db/v4/procedure\" ); let sql = \"CALL CUSTOMERS_BY_COUNTRY_AND_ALL_CUSTOMERS(COUNTRY => ?, customersByCountry => ?, allCustomers => ?)\" ; let result = procedure . execute ( sql , [ \"Bulgaria\" ]); response . println ( JSON . stringify ( result )); response . flush (); response . close (); For more information, see the API documentation.","title":"Steps"},{"location":"basic/database-query/","text":"Database - Query Steps Create a project database . Then create a JavaScript service named database-query.js . Within the service code, enter the following content: var query = require ( \"db/v4/query\" ); var response = require ( \"http/v4/response\" ); var sql = \"SELECT * FROM DIRIGIBLE_EXTENSIONS WHERE EXTENSION_EXTENSIONPOINT_NAME = ?\" ; var resultset = query . execute ( sql , [ \"ide-view\" ]); response . setContentType ( \"application/json\" ); response . println ( JSON . stringify ( resultset , null , 2 )); response . flush (); response . close (); For more information, see the API documentation.","title":"Database - Query"},{"location":"basic/database-query/#database-query","text":"","title":"Database - Query"},{"location":"basic/database-query/#steps","text":"Create a project database . Then create a JavaScript service named database-query.js . Within the service code, enter the following content: var query = require ( \"db/v4/query\" ); var response = require ( \"http/v4/response\" ); var sql = \"SELECT * FROM DIRIGIBLE_EXTENSIONS WHERE EXTENSION_EXTENSIONPOINT_NAME = ?\" ; var resultset = query . execute ( sql , [ \"ide-view\" ]); response . setContentType ( \"application/json\" ); response . println ( JSON . stringify ( resultset , null , 2 )); response . flush (); response . close (); For more information, see the API documentation.","title":"Steps"},{"location":"basic/database-statement/","text":"Database - Statement Steps Create a project database . Then create a JavaScript service named database-basic.js . Within the service code, enter the following content: var database = require ( \"db/v4/database\" ); var response = require ( \"http/v4/response\" ); var connection = database . getConnection (); try { var statement = connection . prepareStatement ( \"select * from DIRIGIBLE_EXTENSIONS where EXTENSION_EXTENSIONPOINT_NAME = ?\" ); var i = 0 ; statement . setString ( ++ i , \"ide-view\" ); var resultSet = statement . executeQuery (); while ( resultSet . next ()) { response . println ( \"[location]: \" + resultSet . getString ( \"EXTENSION_LOCATION\" ) ); } resultSet . close (); statement . close (); } catch ( e ) { console . trace ( e ); response . println ( e . message ); } finally { connection . close (); } response . flush (); response . close (); For more information, see the API documentation.","title":"Database - Statement"},{"location":"basic/database-statement/#database-statement","text":"","title":"Database - Statement"},{"location":"basic/database-statement/#steps","text":"Create a project database . Then create a JavaScript service named database-basic.js . Within the service code, enter the following content: var database = require ( \"db/v4/database\" ); var response = require ( \"http/v4/response\" ); var connection = database . getConnection (); try { var statement = connection . prepareStatement ( \"select * from DIRIGIBLE_EXTENSIONS where EXTENSION_EXTENSIONPOINT_NAME = ?\" ); var i = 0 ; statement . setString ( ++ i , \"ide-view\" ); var resultSet = statement . executeQuery (); while ( resultSet . next ()) { response . println ( \"[location]: \" + resultSet . getString ( \"EXTENSION_LOCATION\" ) ); } resultSet . close (); statement . close (); } catch ( e ) { console . trace ( e ); response . println ( e . message ); } finally { connection . close (); } response . flush (); response . close (); For more information, see the API documentation.","title":"Steps"},{"location":"basic/digest/","text":"Encrypt - SHA-512 Steps Create a project digest . Create a JavaScript service with the name digest-sha512.js . Enter the following content: var digest = require ( \"utils/v4/digest\" ); var response = require ( \"http/v4/response\" ); var input = [ 61 , 62 , 63 ]; var result = digest . sha512 ( input ); console . log ( result ); response . println ( JSON . stringify ( result )); response . flush (); response . close (); For more information, see the API documentation.","title":"Encrypt - SHA-512"},{"location":"basic/digest/#encrypt-sha-512","text":"","title":"Encrypt - SHA-512"},{"location":"basic/digest/#steps","text":"Create a project digest . Create a JavaScript service with the name digest-sha512.js . Enter the following content: var digest = require ( \"utils/v4/digest\" ); var response = require ( \"http/v4/response\" ); var input = [ 61 , 62 , 63 ]; var result = digest . sha512 ( input ); console . log ( result ); response . println ( JSON . stringify ( result )); response . flush (); response . close (); For more information, see the API documentation.","title":"Steps"},{"location":"basic/documents-pdf/","text":"Generate PDF Steps Create a project generate-pdf . Create a JavaScript service with the name pdf-service.js . Enter the following content: var response = require ( \"http/v4/response\" ); var pdfDocuments = require ( \"documents/v4/pdf\" ); var data = { title : \"Lorem Ipsum\" , description : \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus lacinia fermentum magna, sit amet accumsan felis auctor ac.\" , columns : [ { name : \"Id\" , key : \"id\" , }, { name : \"First Name\" , key : \"firstName\" , }, { name : \"Last Name\" , key : \"lastName\" , }, { name : \"Age\" , key : \"age\" , }, ], rows : [ { id : 1001 , firstName : \"John\" , lastName : \"Doe\" , age : 29 , }, { id : 1002 , firstName : \"Jane\" , lastName : \"Doe\" , age : 26 , }, { id : 1003 , firstName : \"Joe\" , lastName : \"Doe\" , age : 44 , }, { id : 1004 , firstName : \"Jill\" , lastName : \"Doe\" , age : 40 , }, ], }; var pdf = pdfDocuments . generateTable ( data ); response . setContentType ( \"application/pdf\" ); response . setHeader ( \"Content-Disposition\" , 'filename=\"data.pdf\"' ); response . write ( pdf ); response . flush (); response . close (); Expected result: Create a project generate-pdf . Create a JavaScript service with the name pdf-service-advanced.js . Enter the following content: var response = require ( \"http/v4/response\" ); var pdfDocuments = require ( \"documents/v4/pdf\" ); var data = { title : \"Lorem Ipsum\" , description : \"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\" , columns : [ { name : \"Id\" , key : \"id\" , }, { name : \"Name\" , key : \"name\" , }, { name : \"Position\" , key : \"position\" , }, ], rows : [], }; for ( let i = 0 ; i < 100 ; i ++ ) { data . rows . push ({ id : \"\" + i , name : \"John\" , position : \"Software Developer\" , highlight : i % 2 == 0 , breakAfter : ( i + 1 ) % 10 == 0 , }); } var config = { size : \"A3\" , alignColumns : \"center\" , alignRows : \"end\" , }; var pdf = pdfDocuments . generateTable ( data , config ); response . setContentType ( \"application/pdf\" ); response . setHeader ( \"Content-Disposition\" , 'filename=\"data.pdf\"' ); response . write ( pdf ); response . flush (); response . close (); Expected result: For more information, see the API documentation.","title":"Generate PDF"},{"location":"basic/documents-pdf/#generate-pdf","text":"","title":"Generate PDF"},{"location":"basic/documents-pdf/#steps","text":"Create a project generate-pdf . Create a JavaScript service with the name pdf-service.js . Enter the following content: var response = require ( \"http/v4/response\" ); var pdfDocuments = require ( \"documents/v4/pdf\" ); var data = { title : \"Lorem Ipsum\" , description : \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus lacinia fermentum magna, sit amet accumsan felis auctor ac.\" , columns : [ { name : \"Id\" , key : \"id\" , }, { name : \"First Name\" , key : \"firstName\" , }, { name : \"Last Name\" , key : \"lastName\" , }, { name : \"Age\" , key : \"age\" , }, ], rows : [ { id : 1001 , firstName : \"John\" , lastName : \"Doe\" , age : 29 , }, { id : 1002 , firstName : \"Jane\" , lastName : \"Doe\" , age : 26 , }, { id : 1003 , firstName : \"Joe\" , lastName : \"Doe\" , age : 44 , }, { id : 1004 , firstName : \"Jill\" , lastName : \"Doe\" , age : 40 , }, ], }; var pdf = pdfDocuments . generateTable ( data ); response . setContentType ( \"application/pdf\" ); response . setHeader ( \"Content-Disposition\" , 'filename=\"data.pdf\"' ); response . write ( pdf ); response . flush (); response . close (); Expected result: Create a project generate-pdf . Create a JavaScript service with the name pdf-service-advanced.js . Enter the following content: var response = require ( \"http/v4/response\" ); var pdfDocuments = require ( \"documents/v4/pdf\" ); var data = { title : \"Lorem Ipsum\" , description : \"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\" , columns : [ { name : \"Id\" , key : \"id\" , }, { name : \"Name\" , key : \"name\" , }, { name : \"Position\" , key : \"position\" , }, ], rows : [], }; for ( let i = 0 ; i < 100 ; i ++ ) { data . rows . push ({ id : \"\" + i , name : \"John\" , position : \"Software Developer\" , highlight : i % 2 == 0 , breakAfter : ( i + 1 ) % 10 == 0 , }); } var config = { size : \"A3\" , alignColumns : \"center\" , alignRows : \"end\" , }; var pdf = pdfDocuments . generateTable ( data , config ); response . setContentType ( \"application/pdf\" ); response . setHeader ( \"Content-Disposition\" , 'filename=\"data.pdf\"' ); response . write ( pdf ); response . flush (); response . close (); Expected result: For more information, see the API documentation.","title":"Steps"},{"location":"basic/ftp-client/","text":"FTP Client Steps Create a project ftp-client . Then create a JavaScript service named ftp-client.js . Within the service code, enter the following content: var response = require ( \"http/v4/response\" ); var ftp = require ( \"io/v4/ftp\" ); var host = \"test.rebex.net\" ; var port = 21 ; var userName = \"demo\" ; var password = \"password\" ; var ftpClient = ftp . getClient ( host , port , userName , password ); var file = ftpClient . getFileText ( \"/\" , \"readme.txt\" ); response . println ( file ); For more information, see the API documentation.","title":"FTP Client"},{"location":"basic/ftp-client/#ftp-client","text":"","title":"FTP Client"},{"location":"basic/ftp-client/#steps","text":"Create a project ftp-client . Then create a JavaScript service named ftp-client.js . Within the service code, enter the following content: var response = require ( \"http/v4/response\" ); var ftp = require ( \"io/v4/ftp\" ); var host = \"test.rebex.net\" ; var port = 21 ; var userName = \"demo\" ; var password = \"password\" ; var ftpClient = ftp . getClient ( host , port , userName , password ); var file = ftpClient . getFileText ( \"/\" , \"readme.txt\" ); response . println ( file ); For more information, see the API documentation.","title":"Steps"},{"location":"basic/hex-decode/","text":"Hex - Decode Steps Create a project utils-hex . Create a JavaScript service with the name hex-decode.js . Enter the following content: var hex = require ( \"utils/v4/hex\" ); var response = require ( \"http/v4/response\" ); var input = \"414243\" ; var result = hex . decode ( input ); console . log ( \"decoded: \" + result ); response . println ( JSON . stringify ( result )); response . flush (); response . close (); For more information, see the API documentation.","title":"Hex - Decode"},{"location":"basic/hex-decode/#hex-decode","text":"","title":"Hex - Decode"},{"location":"basic/hex-decode/#steps","text":"Create a project utils-hex . Create a JavaScript service with the name hex-decode.js . Enter the following content: var hex = require ( \"utils/v4/hex\" ); var response = require ( \"http/v4/response\" ); var input = \"414243\" ; var result = hex . decode ( input ); console . log ( \"decoded: \" + result ); response . println ( JSON . stringify ( result )); response . flush (); response . close (); For more information, see the API documentation.","title":"Steps"},{"location":"basic/hex-encode/","text":"Hex - Encode Steps Create a project utils-hex . Create a JavaScript service with the name hex-encode.js . Enter the following content: var hex = require ( \"utils/v4/hex\" ); var response = require ( \"http/v4/response\" ); var input = [ 65 , 66 , 67 ]; var result = hex . encode ( input ); console . log ( \"encoded: \" + result ); response . println ( JSON . stringify ( result )); response . flush (); response . close (); For more information, see the API documentation.","title":"Hex - Encode"},{"location":"basic/hex-encode/#hex-encode","text":"","title":"Hex - Encode"},{"location":"basic/hex-encode/#steps","text":"Create a project utils-hex . Create a JavaScript service with the name hex-encode.js . Enter the following content: var hex = require ( \"utils/v4/hex\" ); var response = require ( \"http/v4/response\" ); var input = [ 65 , 66 , 67 ]; var result = hex . encode ( input ); console . log ( \"encoded: \" + result ); response . println ( JSON . stringify ( result )); response . flush (); response . close (); For more information, see the API documentation.","title":"Steps"},{"location":"basic/http-client-binary/","text":"HTTP Client - Binary Response Steps Create a project rest-call-binary . Then create a JavaScript service named get-call-binary.js . Within the service code, enter the following content: var client = require ( \"http/v4/client\" ); var response = require ( \"http/v4/response\" ); var httpResponse = client . get ( \"https://raw.githubusercontent.com/eclipse/dirigible/master/NOTICE.txt\" , { binary : true , } ); response . println ( httpResponse . statusMessage ); response . println ( JSON . stringify ( httpResponse . data )); response . flush (); response . close (); For more information, see the API documentation.","title":"HTTP Client - Binary Response"},{"location":"basic/http-client-binary/#http-client-binary-response","text":"","title":"HTTP Client - Binary Response"},{"location":"basic/http-client-binary/#steps","text":"Create a project rest-call-binary . Then create a JavaScript service named get-call-binary.js . Within the service code, enter the following content: var client = require ( \"http/v4/client\" ); var response = require ( \"http/v4/response\" ); var httpResponse = client . get ( \"https://raw.githubusercontent.com/eclipse/dirigible/master/NOTICE.txt\" , { binary : true , } ); response . println ( httpResponse . statusMessage ); response . println ( JSON . stringify ( httpResponse . data )); response . flush (); response . close (); For more information, see the API documentation.","title":"Steps"},{"location":"basic/http-client-calls/","text":"HTTP Client - Calls Steps Create a project rest-calls . Create a JavaScript service named get-call.js . Within the service code, enter the following snippet: GET Call POST Call PUT Call DELETE Call var httpClient = require ( \"http/v4/client\" ); var response = require ( \"http/v4/response\" ); var httpResponse = httpClient . get ( \"https://services.odata.org/V4/Northwind/Northwind.svc/\" ); response . println ( httpResponse . statusMessage ); response . println ( httpResponse . text ); response . flush (); response . close (); var httpClient = require ( \"http/v4/client\" ); var response = require ( \"http/v4/response\" ); var bodyContent = JSON . stringify ({ firstName : \"John\" , lastName : \"Doe\" , age : 24 , }); var httpResponse = httpClient . post ( \"http://httpbin.org/post\" , { text : bodyContent , }); response . println ( httpResponse . statusMessage ); response . println ( httpResponse . text ); response . flush (); response . close (); var httpClient = require ( \"http/v4/client\" ); var response = require ( \"http/v4/response\" ); var bodyContent = JSON . stringify ({ firstName : \"John\" , lastName : \"Doe\" , age : 24 , }); var httpResponse = httpClient . put ( \"http://httpbin.org/put\" , { text : bodyContent , }); response . println ( httpResponse . statusMessage ); response . println ( httpResponse . text ); response . flush (); response . close (); var httpClient = require ( \"http/v4/client\" ); var response = require ( \"http/v4/response\" ); var httpResponse = httpClient . delete ( \"http://httpbin.org/delete\" ); response . println ( httpResponse . statusMessage ); response . println ( httpResponse . text ); response . flush (); response . close (); For more information, see the API documentation.","title":"HTTP Client - Calls"},{"location":"basic/http-client-calls/#http-client-calls","text":"","title":"HTTP Client - Calls"},{"location":"basic/http-client-calls/#steps","text":"Create a project rest-calls . Create a JavaScript service named get-call.js . Within the service code, enter the following snippet: GET Call POST Call PUT Call DELETE Call var httpClient = require ( \"http/v4/client\" ); var response = require ( \"http/v4/response\" ); var httpResponse = httpClient . get ( \"https://services.odata.org/V4/Northwind/Northwind.svc/\" ); response . println ( httpResponse . statusMessage ); response . println ( httpResponse . text ); response . flush (); response . close (); var httpClient = require ( \"http/v4/client\" ); var response = require ( \"http/v4/response\" ); var bodyContent = JSON . stringify ({ firstName : \"John\" , lastName : \"Doe\" , age : 24 , }); var httpResponse = httpClient . post ( \"http://httpbin.org/post\" , { text : bodyContent , }); response . println ( httpResponse . statusMessage ); response . println ( httpResponse . text ); response . flush (); response . close (); var httpClient = require ( \"http/v4/client\" ); var response = require ( \"http/v4/response\" ); var bodyContent = JSON . stringify ({ firstName : \"John\" , lastName : \"Doe\" , age : 24 , }); var httpResponse = httpClient . put ( \"http://httpbin.org/put\" , { text : bodyContent , }); response . println ( httpResponse . statusMessage ); response . println ( httpResponse . text ); response . flush (); response . close (); var httpClient = require ( \"http/v4/client\" ); var response = require ( \"http/v4/response\" ); var httpResponse = httpClient . delete ( \"http://httpbin.org/delete\" ); response . println ( httpResponse . statusMessage ); response . println ( httpResponse . text ); response . flush (); response . close (); For more information, see the API documentation.","title":"Steps"},{"location":"basic/http-request/","text":"HTTP - Request Steps Create a project http-service . Then create a JavaScript service named http-service.js . Within the service code, enter the following content: Simple HTTP Service var request = require ( \"http/v4/request\" ); var response = require ( \"http/v4/response\" ); var method = request . getMethod (); response . println ( \"[Method]: \" + method ); response . flush (); response . close (); For more information, see the API documentation.","title":"HTTP - Request"},{"location":"basic/http-request/#http-request","text":"","title":"HTTP - Request"},{"location":"basic/http-request/#steps","text":"Create a project http-service . Then create a JavaScript service named http-service.js . Within the service code, enter the following content:","title":"Steps"},{"location":"basic/http-request/#simple-http-service","text":"var request = require ( \"http/v4/request\" ); var response = require ( \"http/v4/response\" ); var method = request . getMethod (); response . println ( \"[Method]: \" + method ); response . flush (); response . close (); For more information, see the API documentation.","title":"Simple HTTP Service"},{"location":"basic/liquibase-simple/","text":"Liquibase Liquibase is a tool for tracking, managing and applying database schema changes. Liquibase supports JSON, YAML, XML, SQL and etc. formats. More information about Liquibase can be found on the Liquibase website . Dirigible Dirigible are fully integrated with Liquibase. By changesets included in .changelog you can create, delete, update, insert tables and columns. You can even create rollback tags and rolback changes to desired point. Below you can see example for working with liquibase in Dirigible. Lets create a project and execute some .changelog file in our project. Jump to Workbench perspective. Here you need to create file with .changelog extension. { \"databaseChangeLog\" : [ { \"preConditions\" : [ { \"runningAs\" : { \"username\" : \"SA\" } } ] }, { \"changeSet\" : { \"id\" : \"1\" , \"author\" : \"iwolkow\" , \"changes\" : [ { \"createTable\" : { \"tableName\" : \"person\" , \"columns\" : [ { \"column\" : { \"name\" : \"id\" , \"type\" : \"int\" , \"autoIncrement\" : true , \"constraints\" : { \"primaryKey\" : true , \"nullable\" : false } } }, { \"column\" : { \"name\" : \"firstname\" , \"type\" : \"varchar(50)\" } }, { \"column\" : { \"name\" : \"lastname\" , \"type\" : \"varchar(50)\" , \"constraints\" : { \"nullable\" : false } } }, { \"column\" : { \"name\" : \"state\" , \"type\" : \"char(2)\" } } ] } } ] } }, { \"changeSet\" : { \"id\" : \"2\" , \"author\" : \"iwolkow\" , \"changes\" : [ { \"addColumn\" : { \"tableName\" : \"person\" , \"columns\" : [ { \"column\" : { \"name\" : \"username\" , \"type\" : \"varchar(8)\" } } ] } } ] } }, { \"changeSet\" : { \"id\" : \"3\" , \"author\" : \"iwolkow\" , \"changes\" : [ { \"addLookupTable\" : { \"existingTableName\" : \"person\" , \"existingColumnName\" : \"state\" , \"newTableName\" : \"state\" , \"newColumnName\" : \"id\" , \"newColumnDataType\" : \"char(2)\" } } ] } }, { \"changeSet\" : { \"id\" : \"5\" , \"author\" : \"iwolkow\" , \"changes\" : [ { \"createTable\" : { \"tableName\" : \"table_users\" , \"columns\" : [ { \"column\" : { \"name\" : \"id\" , \"type\" : \"int\" , \"autoIncrement\" : true , \"constraints\" : { \"primaryKey\" : true , \"nullable\" : false } } }, { \"column\" : { \"name\" : \"first_name\" , \"type\" : \"varchar(10)\" } }, { \"column\" : { \"name\" : \"last_name\" , \"type\" : \"varchar(50)\" , \"constraints\" : { \"nullable\" : false } } }, { \"column\" : { \"name\" : \"age\" , \"type\" : \"int\" } }, { \"column\" : { \"name\" : \"last_updated\" , \"type\" : \"timestamp\" } } ] } } ] } } ] } On saving the file Dirigible automatically detects and executes the .changelog file. Switching to DB perspective we can see that in our PUBLIC schema, are created three tables, as described in our changelog file: - Persons , - State - Table_Users and two more related to .changelog execution : - DATABASECHANGELOGLOCK DATABASECHANGELOG , by choosing see content of this table in Result View are changesets represented as entries: In SQL View we can execute several queries to check if everything works properly. INSERT INTO STATE VALUES ( 'RU' ); INSERT INTO STATE VALUES ( 'CH' ); INSERT INTO STATE VALUES ( 'FR' ); INSERT INTO PERSON VALUES ( 1 , 'IVAN' , 'PETROV' , 'RU' , 'ipetr88' ); INSERT INTO PERSON VALUES ( 2 , 'MAURICE' , 'LACROIX' , 'CH' , 'moris' ); INSERT INTO PERSON VALUES ( 3 , 'JEAN' , 'DE GAULLE' , 'FR' , 'jdg66' ); Note Scripts are executed by pressing: Windows : Ctrl + X Mac: Cmd + X Table data can de seen by choosing Show Content on table. Results are shown in the Result View .","title":"Liquibase"},{"location":"basic/liquibase-simple/#liquibase","text":"","title":"Liquibase"},{"location":"basic/liquibase-simple/#_1","text":"Liquibase is a tool for tracking, managing and applying database schema changes. Liquibase supports JSON, YAML, XML, SQL and etc. formats. More information about Liquibase can be found on the Liquibase website .","title":""},{"location":"basic/liquibase-simple/#dirigible","text":"Dirigible are fully integrated with Liquibase. By changesets included in .changelog you can create, delete, update, insert tables and columns. You can even create rollback tags and rolback changes to desired point. Below you can see example for working with liquibase in Dirigible. Lets create a project and execute some .changelog file in our project. Jump to Workbench perspective. Here you need to create file with .changelog extension. { \"databaseChangeLog\" : [ { \"preConditions\" : [ { \"runningAs\" : { \"username\" : \"SA\" } } ] }, { \"changeSet\" : { \"id\" : \"1\" , \"author\" : \"iwolkow\" , \"changes\" : [ { \"createTable\" : { \"tableName\" : \"person\" , \"columns\" : [ { \"column\" : { \"name\" : \"id\" , \"type\" : \"int\" , \"autoIncrement\" : true , \"constraints\" : { \"primaryKey\" : true , \"nullable\" : false } } }, { \"column\" : { \"name\" : \"firstname\" , \"type\" : \"varchar(50)\" } }, { \"column\" : { \"name\" : \"lastname\" , \"type\" : \"varchar(50)\" , \"constraints\" : { \"nullable\" : false } } }, { \"column\" : { \"name\" : \"state\" , \"type\" : \"char(2)\" } } ] } } ] } }, { \"changeSet\" : { \"id\" : \"2\" , \"author\" : \"iwolkow\" , \"changes\" : [ { \"addColumn\" : { \"tableName\" : \"person\" , \"columns\" : [ { \"column\" : { \"name\" : \"username\" , \"type\" : \"varchar(8)\" } } ] } } ] } }, { \"changeSet\" : { \"id\" : \"3\" , \"author\" : \"iwolkow\" , \"changes\" : [ { \"addLookupTable\" : { \"existingTableName\" : \"person\" , \"existingColumnName\" : \"state\" , \"newTableName\" : \"state\" , \"newColumnName\" : \"id\" , \"newColumnDataType\" : \"char(2)\" } } ] } }, { \"changeSet\" : { \"id\" : \"5\" , \"author\" : \"iwolkow\" , \"changes\" : [ { \"createTable\" : { \"tableName\" : \"table_users\" , \"columns\" : [ { \"column\" : { \"name\" : \"id\" , \"type\" : \"int\" , \"autoIncrement\" : true , \"constraints\" : { \"primaryKey\" : true , \"nullable\" : false } } }, { \"column\" : { \"name\" : \"first_name\" , \"type\" : \"varchar(10)\" } }, { \"column\" : { \"name\" : \"last_name\" , \"type\" : \"varchar(50)\" , \"constraints\" : { \"nullable\" : false } } }, { \"column\" : { \"name\" : \"age\" , \"type\" : \"int\" } }, { \"column\" : { \"name\" : \"last_updated\" , \"type\" : \"timestamp\" } } ] } } ] } } ] } On saving the file Dirigible automatically detects and executes the .changelog file. Switching to DB perspective we can see that in our PUBLIC schema, are created three tables, as described in our changelog file: - Persons , - State - Table_Users and two more related to .changelog execution : - DATABASECHANGELOGLOCK DATABASECHANGELOG , by choosing see content of this table in Result View are changesets represented as entries: In SQL View we can execute several queries to check if everything works properly. INSERT INTO STATE VALUES ( 'RU' ); INSERT INTO STATE VALUES ( 'CH' ); INSERT INTO STATE VALUES ( 'FR' ); INSERT INTO PERSON VALUES ( 1 , 'IVAN' , 'PETROV' , 'RU' , 'ipetr88' ); INSERT INTO PERSON VALUES ( 2 , 'MAURICE' , 'LACROIX' , 'CH' , 'moris' ); INSERT INTO PERSON VALUES ( 3 , 'JEAN' , 'DE GAULLE' , 'FR' , 'jdg66' ); Note Scripts are executed by pressing: Windows : Ctrl + X Mac: Cmd + X Table data can de seen by choosing Show Content on table. Results are shown in the Result View .","title":"Dirigible"},{"location":"basic/mail-client/","text":"Send Email Steps Create a project mail . Create a JavaScript service with the name mail-service.js . Enter the following content: var response = require ( \"http/v4/response\" ); var mail = require ( \"mail/v4/client\" ); var from = \"from@email.address\" ; var to = \"to@email.address\" ; var subject = \"Subject\" ; var content = \"<h1>Content<h1>\" ; var subType = \"html\" ; mail . send ( from , to , subject , content , subType ); response . println ( \"Mail sent\" ); Note: This sample leverages the default mail configuration provided through the environment variables . Create a project mail-custom . Create a JavaScript service with the name mail-custom-service.js . Enter the following content: var response = require ( \"http/v4/response\" ); var mail = require ( \"mail/v4/client\" ); var mailConfig = { \"mail.user\" : \"<your-mailbox-user>\" , \"mail.password\" : \"<your-mailbox-password>\" , \"mail.transport.protocol\" : \"smtps\" , \"mail.smtps.host\" : \"smtp.gmail.com\" , \"mail.smtps.port\" : \"465\" , \"mail.smtps.auth\" : \"true\" , }; var mailClient = mail . getClient ( mailConfig ); var from = \"<your-mailbox-user>@gmail.com\" ; var recipients = { to : \"<your-mailbox-user>@gmail.com\" , cc : [ \"<your-mailbox-user>@gmail.com\" , \"<your-mailbox-user-2>@sap.com\" ], bcc : \"<your-mailbox-user>@sap.com\" , }; var subject = \"Subject\" ; var content = \"<h1>Content</h1>\" ; var subType = \"html\" ; mailClient . send ( from , recipients , subject , content , subType ); response . println ( \"Mail sent\" ); Note: This sample leverages Gmail SMTPS, to make this sample work, access from third party applications ( Less secure apps ) should be enabled, also Troubleshoot Problems could help. For more information, see the API documentation.","title":"Send Email"},{"location":"basic/mail-client/#send-email","text":"","title":"Send Email"},{"location":"basic/mail-client/#steps","text":"Create a project mail . Create a JavaScript service with the name mail-service.js . Enter the following content: var response = require ( \"http/v4/response\" ); var mail = require ( \"mail/v4/client\" ); var from = \"from@email.address\" ; var to = \"to@email.address\" ; var subject = \"Subject\" ; var content = \"<h1>Content<h1>\" ; var subType = \"html\" ; mail . send ( from , to , subject , content , subType ); response . println ( \"Mail sent\" ); Note: This sample leverages the default mail configuration provided through the environment variables . Create a project mail-custom . Create a JavaScript service with the name mail-custom-service.js . Enter the following content: var response = require ( \"http/v4/response\" ); var mail = require ( \"mail/v4/client\" ); var mailConfig = { \"mail.user\" : \"<your-mailbox-user>\" , \"mail.password\" : \"<your-mailbox-password>\" , \"mail.transport.protocol\" : \"smtps\" , \"mail.smtps.host\" : \"smtp.gmail.com\" , \"mail.smtps.port\" : \"465\" , \"mail.smtps.auth\" : \"true\" , }; var mailClient = mail . getClient ( mailConfig ); var from = \"<your-mailbox-user>@gmail.com\" ; var recipients = { to : \"<your-mailbox-user>@gmail.com\" , cc : [ \"<your-mailbox-user>@gmail.com\" , \"<your-mailbox-user-2>@sap.com\" ], bcc : \"<your-mailbox-user>@sap.com\" , }; var subject = \"Subject\" ; var content = \"<h1>Content</h1>\" ; var subType = \"html\" ; mailClient . send ( from , recipients , subject , content , subType ); response . println ( \"Mail sent\" ); Note: This sample leverages Gmail SMTPS, to make this sample work, access from third party applications ( Less secure apps ) should be enabled, also Troubleshoot Problems could help. For more information, see the API documentation.","title":"Steps"},{"location":"basic/platform-lifecycle/","text":"Platform Lifecycle Steps Create a project platform-lifecycle . Then create a JavaScript service named platform-lifecycle.js . Within the service code, enter the following content: var response = require ( \"http/v4/response\" ); var user = require ( \"security/v4/user\" ); var workspace = require ( \"workspace/v4/manager\" ); var lifecycle = require ( \"platform/v4/lifecycle\" ); var bytes = require ( \"io/v4/bytes\" ); var user = user . getName (); var workspaceName = \"workspace\" ; var projectName = \"project\" ; var myWorkspace = workspace . createWorkspace ( workspaceName ); var myProject = myWorkspace . createProject ( projectName ); var myFile = myProject . createFile ( \"file.js\" ); myFile . setContent ( bytes . textToByteArray ( \"console.log('Hello World!');\" )); var publishResult = lifecycle . publish ( user , workspaceName , projectName ); response . println ( \"publishResult: \" + publishResult ); For more information, see the API documentation.","title":"Platform Lifecycle"},{"location":"basic/platform-lifecycle/#platform-lifecycle","text":"","title":"Platform Lifecycle"},{"location":"basic/platform-lifecycle/#steps","text":"Create a project platform-lifecycle . Then create a JavaScript service named platform-lifecycle.js . Within the service code, enter the following content: var response = require ( \"http/v4/response\" ); var user = require ( \"security/v4/user\" ); var workspace = require ( \"workspace/v4/manager\" ); var lifecycle = require ( \"platform/v4/lifecycle\" ); var bytes = require ( \"io/v4/bytes\" ); var user = user . getName (); var workspaceName = \"workspace\" ; var projectName = \"project\" ; var myWorkspace = workspace . createWorkspace ( workspaceName ); var myProject = myWorkspace . createProject ( projectName ); var myFile = myProject . createFile ( \"file.js\" ); myFile . setContent ( bytes . textToByteArray ( \"console.log('Hello World!');\" )); var publishResult = lifecycle . publish ( user , workspaceName , projectName ); response . println ( \"publishResult: \" + publishResult ); For more information, see the API documentation.","title":"Steps"},{"location":"basic/print-configurations/","text":"Print Configuration Variables Steps Create a new project and name it config-vars . Select the project folder and open the pop-up menu. Choose New -> JavaScript Service . Give it a meaningful name (e.g print-config-vars.js ). Replace the generated code in print-config-vars.js with the following: var configurations = require ( \"core/v4/configurations\" ); var response = require ( \"http/v4/response\" ); var keys = configurations . getKeys (); var dirigibleKeys = {}; for ( var i = 0 ; i < keys . length ; i ++ ) { var key = keys [ i ]; if ( key . startsWith ( \"DIRIGIBLE\" )) { var value = configurations . get ( key ); dirigibleKeys [ key ] = value ; } } response . print ( JSON . stringify ( dirigibleKeys )); For more information, see the API documentation.","title":"Print Configuration Variables"},{"location":"basic/print-configurations/#print-configuration-variables","text":"","title":"Print Configuration Variables"},{"location":"basic/print-configurations/#steps","text":"Create a new project and name it config-vars . Select the project folder and open the pop-up menu. Choose New -> JavaScript Service . Give it a meaningful name (e.g print-config-vars.js ). Replace the generated code in print-config-vars.js with the following: var configurations = require ( \"core/v4/configurations\" ); var response = require ( \"http/v4/response\" ); var keys = configurations . getKeys (); var dirigibleKeys = {}; for ( var i = 0 ; i < keys . length ; i ++ ) { var key = keys [ i ]; if ( key . startsWith ( \"DIRIGIBLE\" )) { var value = configurations . get ( key ); dirigibleKeys [ key ] = value ; } } response . print ( JSON . stringify ( dirigibleKeys )); For more information, see the API documentation.","title":"Steps"},{"location":"basic/print-env/","text":"Print Environment Variables Steps Create a new project and name it env-vars . Select the project folder and open the pop-up menu. Choose New -> JavaScript Service . Give it a meaningful name (e.g print-env-vars.js ). Replace the generated code in print-env-vars.js with the following: var env = require ( \"core/v4/env\" ); var response = require ( \"http/v4/response\" ); var envVarsList = JSON . parse ( env . list ()); var envVarValue ; for ( var envVarName in envVarsList ) { envVarValue = envVarsList [ envVarName ]; response . println ( envVarName + \"=\" + envVarValue ); } response . flush (); response . close (); For more information, see the API documentation.","title":"Print Environment Variables"},{"location":"basic/print-env/#print-environment-variables","text":"","title":"Print Environment Variables"},{"location":"basic/print-env/#steps","text":"Create a new project and name it env-vars . Select the project folder and open the pop-up menu. Choose New -> JavaScript Service . Give it a meaningful name (e.g print-env-vars.js ). Replace the generated code in print-env-vars.js with the following: var env = require ( \"core/v4/env\" ); var response = require ( \"http/v4/response\" ); var envVarsList = JSON . parse ( env . list ()); var envVarValue ; for ( var envVarName in envVarsList ) { envVarValue = envVarsList [ envVarName ]; response . println ( envVarName + \"=\" + envVarValue ); } response . flush (); response . close (); For more information, see the API documentation.","title":"Steps"},{"location":"basic/qrcode-generator/","text":"QR Code Generator Steps Create a project utils-qrcode . Then create a JavaScript service named qr-generator.js . Within the service code, enter the following content: ```javascript var qrCodeGenerator = require(\"utils/v4/qrcode\"); var response = require(\"http/v4/response\"); let qrCodeBytes = qrCodeGenerator.generateQRCode(\"https://www.dirigible.io\"); console.log(\"QR Code Bytes: \" + qrCodeBytes); response.write(qrCodeBytes); response.flush(); response.close(); ``` For more information, see the API documentation.","title":"QR Code Generator"},{"location":"basic/qrcode-generator/#qr-code-generator","text":"","title":"QR Code Generator"},{"location":"basic/qrcode-generator/#steps","text":"Create a project utils-qrcode . Then create a JavaScript service named qr-generator.js . Within the service code, enter the following content: ```javascript var qrCodeGenerator = require(\"utils/v4/qrcode\"); var response = require(\"http/v4/response\"); let qrCodeBytes = qrCodeGenerator.generateQRCode(\"https://www.dirigible.io\"); console.log(\"QR Code Bytes: \" + qrCodeBytes); response.write(qrCodeBytes); response.flush(); response.close(); ``` For more information, see the API documentation.","title":"Steps"},{"location":"basic/repository-manager/","text":"Repository Manager Steps Create a project repository-manager . Then create a JavaScript service named repository-test.js . Within the service code, enter the following content: var response = require ( \"http/v4/response\" ); var repositoryManager = require ( \"repository/v4/manager\" ); repositoryManager . createResource ( \"/registry/public/test/file.js\" , \"console.log('Hello World');\" , \"application/json\" ); var resource = repositoryManager . getResource ( \"/registry/public/test/file.js\" ); var content = resource . getText (); response . println ( content ); response . flush (); response . close (); For more information, see the API documentation.","title":"Repository Manager"},{"location":"basic/repository-manager/#repository-manager","text":"","title":"Repository Manager"},{"location":"basic/repository-manager/#steps","text":"Create a project repository-manager . Then create a JavaScript service named repository-test.js . Within the service code, enter the following content: var response = require ( \"http/v4/response\" ); var repositoryManager = require ( \"repository/v4/manager\" ); repositoryManager . createResource ( \"/registry/public/test/file.js\" , \"console.log('Hello World');\" , \"application/json\" ); var resource = repositoryManager . getResource ( \"/registry/public/test/file.js\" ); var content = resource . getText (); response . println ( content ); response . flush (); response . close (); For more information, see the API documentation.","title":"Steps"},{"location":"basic/rest-service/","text":"REST Service Steps Create a project rest-service . Then create a JavaScript service named rs-service.js . Within the service code, enter the following content: var rs = require ( \"http/v4/rs\" ); rs . service () // serve GET HTTP requests sent to resource path \"\" . resource ( \"\" ) . get ( function ( ctx , request , response ) { response . println ( \"Hello World!\" ); }) // serve GET HTTP requests sent to resource path \"hello/{name}\" e.g \"hello/John\" . resource ( \"hello/{name}\" ) . get ( function ( ctx , request , response ) { let name = ctx . pathParameters . name ; response . println ( \"Hello \" + name + \"!\" ); }) . execute (); For more information, see the API documentation and the REST guide.","title":"REST Service"},{"location":"basic/rest-service/#rest-service","text":"","title":"REST Service"},{"location":"basic/rest-service/#steps","text":"Create a project rest-service . Then create a JavaScript service named rs-service.js . Within the service code, enter the following content: var rs = require ( \"http/v4/rs\" ); rs . service () // serve GET HTTP requests sent to resource path \"\" . resource ( \"\" ) . get ( function ( ctx , request , response ) { response . println ( \"Hello World!\" ); }) // serve GET HTTP requests sent to resource path \"hello/{name}\" e.g \"hello/John\" . resource ( \"hello/{name}\" ) . get ( function ( ctx , request , response ) { let name = ctx . pathParameters . name ; response . println ( \"Hello \" + name + \"!\" ); }) . execute (); For more information, see the API documentation and the REST guide.","title":"Steps"},{"location":"basic/soap-client/","text":"SOAP - Client Steps Create a project soap . Create a JavaScript service with the name soap-client.js . Enter the following content: var soap = require ( \"net/v4/soap\" ); var response = require ( \"http/v4/response\" ); response . setContentType ( \"text/plain; charset=UTF-8\" ); var requestMessage = soap . createMessage (); var part = requestMessage . getPart (); var envelope = part . getEnvelope (); envelope . addNamespaceDeclaration ( \"ws\" , \"http://ws.cdyne.com/\" ); var body = envelope . getBody (); var resolveIPElement = body . addChildElement ( \"ResolveIP\" , \"ws\" ); var ipAddressElement = resolveIPElement . addChildElement ( \"ipAddress\" , \"ws\" ); ipAddressElement . addTextNode ( \"213.239.203.158\" ); var licenseKeyElement = resolveIPElement . addChildElement ( \"licenseKey\" , \"ws\" ); licenseKeyElement . addTextNode ( \"\" ); var mimeHeaders = requestMessage . getMimeHeaders (); mimeHeaders . addHeader ( \"SOAPAction\" , \"http://ws.cdyne.com/ResolveIP\" ); requestMessage . save (); response . println ( \"Request: \" + requestMessage . getText ()); var responseMessage = soap . call ( requestMessage , \"http://ws.cdyne.com/ip2geo/ip2geo.asmx\" ); response . println ( \"Response: \" + responseMessage . getText ()); var responsePart = responseMessage . getPart (); var responseEnvelope = responsePart . getEnvelope (); var responseBody = responseEnvelope . getBody (); var childElements = responseBody . getChildElements (); printElements ( childElements ); response . flush (); response . close (); function printElements ( childElements ) { childElements . forEach ( function ( element ) { if ( element . isSOAPElement ()) { var name = element . getElementName (); response . print ( name . getLocalName ()); response . print ( \": \" ); response . println ( JSON . stringify ( element . getValue ())); printElements ( element . getChildElements ()); } }); } For more information, see the API documentation.","title":"SOAP - Client"},{"location":"basic/soap-client/#soap-client","text":"","title":"SOAP - Client"},{"location":"basic/soap-client/#steps","text":"Create a project soap . Create a JavaScript service with the name soap-client.js . Enter the following content: var soap = require ( \"net/v4/soap\" ); var response = require ( \"http/v4/response\" ); response . setContentType ( \"text/plain; charset=UTF-8\" ); var requestMessage = soap . createMessage (); var part = requestMessage . getPart (); var envelope = part . getEnvelope (); envelope . addNamespaceDeclaration ( \"ws\" , \"http://ws.cdyne.com/\" ); var body = envelope . getBody (); var resolveIPElement = body . addChildElement ( \"ResolveIP\" , \"ws\" ); var ipAddressElement = resolveIPElement . addChildElement ( \"ipAddress\" , \"ws\" ); ipAddressElement . addTextNode ( \"213.239.203.158\" ); var licenseKeyElement = resolveIPElement . addChildElement ( \"licenseKey\" , \"ws\" ); licenseKeyElement . addTextNode ( \"\" ); var mimeHeaders = requestMessage . getMimeHeaders (); mimeHeaders . addHeader ( \"SOAPAction\" , \"http://ws.cdyne.com/ResolveIP\" ); requestMessage . save (); response . println ( \"Request: \" + requestMessage . getText ()); var responseMessage = soap . call ( requestMessage , \"http://ws.cdyne.com/ip2geo/ip2geo.asmx\" ); response . println ( \"Response: \" + responseMessage . getText ()); var responsePart = responseMessage . getPart (); var responseEnvelope = responsePart . getEnvelope (); var responseBody = responseEnvelope . getBody (); var childElements = responseBody . getChildElements (); printElements ( childElements ); response . flush (); response . close (); function printElements ( childElements ) { childElements . forEach ( function ( element ) { if ( element . isSOAPElement ()) { var name = element . getElementName (); response . print ( name . getLocalName ()); response . print ( \": \" ); response . println ( JSON . stringify ( element . getValue ())); printElements ( element . getChildElements ()); } }); } For more information, see the API documentation.","title":"Steps"},{"location":"basic/soap-server/","text":"SOAP - Server Steps Create a project soap . Create a JavaScript service with the name soap-server.js . Enter the following content: var soap = require ( \"net/v4/soap\" ); var request = require ( \"http/v4/request\" ); var response = require ( \"http/v4/response\" ); var xml = require ( \"utils/v4/xml\" ); // Parse SOAP request var message = soap . parseRequest (); var requestPart = message . getPart (); var requestEnvelope = requestPart . getEnvelope (); var requestBody = requestEnvelope . getBody (); var childElements = requestBody . getChildElements (); printElements ( childElements ); response . setContentType ( \"text/xml; charset=utf-8\" ); var json = { \"soap:Envelope\" : { \"-xmlns:soap\" : \"http://schemas.xmlsoap.org/soap/envelope/\" , \"-xmlns:xsd\" : \"http://www.w3.org/2001/XMLSchema\" , \"-xmlns:xsi\" : \"http://www.w3.org/2001/XMLSchema-instance\" , \"soap:Body\" : { ResolveIPResponse : { \"-xmlns\" : \"http://ws.cdyne.com/\" , ResolveIPResult : { Country : \"Germany\" , Organization : {}, Latitude : \"51.2993\" , Longitude : \"9.490997\" , AreaCode : \"0\" , TimeZone : {}, HasDaylightSavings : \"false\" , Certainty : \"90\" , RegionName : {}, CountryCode : \"DE\" , }, }, }, }, }; var payload = xml . fromJson ( JSON . stringify ( json )); response . println ( payload ); response . flush (); response . close (); function printElements ( childElements ) { childElements . forEach ( function ( element ) { if ( element . isSOAPElement ()) { var name = element . getElementName (); console . log ( name . getLocalName () + \": \" + element . getValue ()); printElements ( element . getChildElements ()); } }); } For more information, see the API documentation.","title":"SOAP - Server"},{"location":"basic/soap-server/#soap-server","text":"","title":"SOAP - Server"},{"location":"basic/soap-server/#steps","text":"Create a project soap . Create a JavaScript service with the name soap-server.js . Enter the following content: var soap = require ( \"net/v4/soap\" ); var request = require ( \"http/v4/request\" ); var response = require ( \"http/v4/response\" ); var xml = require ( \"utils/v4/xml\" ); // Parse SOAP request var message = soap . parseRequest (); var requestPart = message . getPart (); var requestEnvelope = requestPart . getEnvelope (); var requestBody = requestEnvelope . getBody (); var childElements = requestBody . getChildElements (); printElements ( childElements ); response . setContentType ( \"text/xml; charset=utf-8\" ); var json = { \"soap:Envelope\" : { \"-xmlns:soap\" : \"http://schemas.xmlsoap.org/soap/envelope/\" , \"-xmlns:xsd\" : \"http://www.w3.org/2001/XMLSchema\" , \"-xmlns:xsi\" : \"http://www.w3.org/2001/XMLSchema-instance\" , \"soap:Body\" : { ResolveIPResponse : { \"-xmlns\" : \"http://ws.cdyne.com/\" , ResolveIPResult : { Country : \"Germany\" , Organization : {}, Latitude : \"51.2993\" , Longitude : \"9.490997\" , AreaCode : \"0\" , TimeZone : {}, HasDaylightSavings : \"false\" , Certainty : \"90\" , RegionName : {}, CountryCode : \"DE\" , }, }, }, }, }; var payload = xml . fromJson ( JSON . stringify ( json )); response . println ( payload ); response . flush (); response . close (); function printElements ( childElements ) { childElements . forEach ( function ( element ) { if ( element . isSOAPElement ()) { var name = element . getElementName (); console . log ( name . getLocalName () + \": \" + element . getValue ()); printElements ( element . getChildElements ()); } }); } For more information, see the API documentation.","title":"Steps"},{"location":"basic/url-decode/","text":"URL - UTF-8 Decoding Steps Create a project utils-url . Create a JavaScript service with the name url-decode.js . Enter the following content: var url = require ( \"utils/v4/url\" ); var response = require ( \"http/v4/response\" ); var input = \"http%3A%2F%2Fwww.dirigible.io%2F\" ; var result = url . decode ( input , \"UTF-8\" ); console . log ( \"Decoded URL: \" + result ); response . println ( JSON . stringify ( result )); response . flush (); response . close (); For more information, see the API documentation.","title":"URL - UTF-8 Decoding"},{"location":"basic/url-decode/#url-utf-8-decoding","text":"","title":"URL - UTF-8 Decoding"},{"location":"basic/url-decode/#steps","text":"Create a project utils-url . Create a JavaScript service with the name url-decode.js . Enter the following content: var url = require ( \"utils/v4/url\" ); var response = require ( \"http/v4/response\" ); var input = \"http%3A%2F%2Fwww.dirigible.io%2F\" ; var result = url . decode ( input , \"UTF-8\" ); console . log ( \"Decoded URL: \" + result ); response . println ( JSON . stringify ( result )); response . flush (); response . close (); For more information, see the API documentation.","title":"Steps"},{"location":"basic/url-encode/","text":"URL - UTF-8 Encoding Steps Create a project utils-url . Create a JavaScript service with the name url-encode.js . Enter the following content: var url = require ( \"utils/v4/url\" ); var response = require ( \"http/v4/response\" ); var input = \"http://www.dirigible.io/\" ; var result = url . encode ( input , \"UTF-8\" ); console . log ( \"Encoded URL: \" + result ); response . println ( JSON . stringify ( result )); response . flush (); response . close (); For more information, see the API documentation.","title":"URL - UTF-8 Encoding"},{"location":"basic/url-encode/#url-utf-8-encoding","text":"","title":"URL - UTF-8 Encoding"},{"location":"basic/url-encode/#steps","text":"Create a project utils-url . Create a JavaScript service with the name url-encode.js . Enter the following content: var url = require ( \"utils/v4/url\" ); var response = require ( \"http/v4/response\" ); var input = \"http://www.dirigible.io/\" ; var result = url . encode ( input , \"UTF-8\" ); console . log ( \"Encoded URL: \" + result ); response . println ( JSON . stringify ( result )); response . flush (); response . close (); For more information, see the API documentation.","title":"Steps"},{"location":"basic/uuid-random-generation/","text":"UUID - Random Generation Steps Create a project utils-uuid . Create a JavaScript service with the name uuid-random-generator.js . Enter the following content: var uuid = require ( \"utils/v4/uuid\" ); var response = require ( \"http/v4/response\" ); var generated = uuid . random (); console . log ( generated ); uuid . validate ( generated ); console . log ( \"Randomly Generated UUID: \" + generated ); response . println ( JSON . stringify ( \"Randomly Generated UUID: \" + generated )); response . flush (); response . close (); For more information, see the API documentation.","title":"UUID - Random Generation"},{"location":"basic/uuid-random-generation/#uuid-random-generation","text":"","title":"UUID - Random Generation"},{"location":"basic/uuid-random-generation/#steps","text":"Create a project utils-uuid . Create a JavaScript service with the name uuid-random-generator.js . Enter the following content: var uuid = require ( \"utils/v4/uuid\" ); var response = require ( \"http/v4/response\" ); var generated = uuid . random (); console . log ( generated ); uuid . validate ( generated ); console . log ( \"Randomly Generated UUID: \" + generated ); response . println ( JSON . stringify ( \"Randomly Generated UUID: \" + generated )); response . flush (); response . close (); For more information, see the API documentation.","title":"Steps"},{"location":"tutorials/application-development/bookstore/","text":"Bookstore Application This sample shows how to create a simple web application for managing a single entity called Books . It contains a database table definition, a RESTful service and a web page for managing the instances via user interface. Steps Project Create a project named babylon-project . Database Descriptor Right click on the babylon-project project and select New \u2192 Folder . Enter data for the name of the folder. Right click on the data folder and select New \u2192 Database Table . Enter BABYLON_BOOKS.table for the name of the database table descriptor. Right click on BABYLON_BOOKS.table and select Open With \u2192 Code Editor . Replace the content with the following definition: { \"name\" : \"BABYLON_BOOKS\" , \"type\" : \"TABLE\" , \"columns\" : [ { \"name\" : \"BOOK_ID\" , \"type\" : \"INTEGER\" , \"length\" : \"0\" , \"primaryKey\" : \"true\" , \"identity\" : \"true\" , \"precision\" : \"\" , \"scale\" : \"\" }, { \"name\" : \"BOOK_ISBN\" , \"type\" : \"CHAR\" , \"length\" : \"13\" , \"primaryKey\" : \"false\" , \"identity\" : \"false\" , \"precision\" : \"\" , \"scale\" : \"\" }, { \"name\" : \"BOOK_TITLE\" , \"type\" : \"VARCHAR\" , \"length\" : \"120\" , \"primaryKey\" : \"false\" , \"identity\" : \"false\" , \"precision\" : \"\" , \"scale\" : \"\" }, { \"name\" : \"BOOK_PUBLISHER\" , \"type\" : \"VARCHAR\" , \"length\" : \"120\" , \"primaryKey\" : \"false\" , \"identity\" : \"false\" , \"precision\" : \"\" , \"scale\" : \"\" }, { \"name\" : \"BOOK_DATE\" , \"type\" : \"DATE\" , \"length\" : \"20\" , \"primaryKey\" : \"false\" , \"identity\" : \"false\" , \"precision\" : \"\" , \"scale\" : \"\" , \"nullable\" : \"true\" }, { \"name\" : \"BOOK_PRICE\" , \"type\" : \"DOUBLE\" , \"length\" : \"20\" , \"primaryKey\" : \"false\" , \"identity\" : \"false\" , \"precision\" : \"\" , \"scale\" : \"\" } ], \"dependencies\" : [] } Save the changes and close the Code Editor . Double click on BABYLON_BOOKS.table to view the definition with the Table Editor . Save & Publish Saving the file will trigger a Publish action, which will create the database table in the target database schema. Usually this action should take several seconds to complete, after which the database table would be visible in the Database Perspective . Note: Manual Publish can be performed by right clicking on the artifact and selecting Publish from the context menu. The Publish action can be performed also on project level. Data Access Object Right click on the babylon-project project and select New \u2192 Folder . Enter dao for the name of the folder. Right click on the dao folder and select New \u2192 JavaScript CJS Service . Enter Books.js for the name of the JavaScript Service. Replace the content with the following code: const daoApi = require ( \"db/v4/dao\" ); let dao = daoApi . create ({ table : \"BABYLON_BOOKS\" , properties : [ { name : \"id\" , column : \"BOOK_ID\" , type : \"INTEGER\" , id : true , required : true }, { name : \"isbn\" , column : \"BOOK_ISBN\" , type : \"CHAR\" , id : false , required : false }, { name : \"title\" , column : \"BOOK_TITLE\" , type : \"VARCHAR\" , id : false , required : false }, { name : \"publisher\" , column : \"BOOK_PUBLISHER\" , type : \"VARCHAR\" , id : false , required : false }, { name : \"date\" , column : \"BOOK_DATE\" , type : \"DATE\" , id : false , required : true }, { name : \"price\" , column : \"BOOK_PRICE\" , type : \"DOUBLE\" , id : false , required : true }] }); exports . list = function ( settings ) { return dao . list ( settings ); }; exports . get = function ( id ) { return dao . find ( id ); }; exports . create = function ( entity ) { return dao . insert ( entity ); }; exports . update = function ( entity ) { return dao . update ( entity ); }; exports . delete = function ( id ) { dao . remove ( id ); }; REST Service Right click on the babylon-project project and select New \u2192 Folder . Enter service for the name of the folder. Right click on the service folder and select New \u2192 JavaScript CJS Service . Enter Books.js for the name of the JavaScript Service. Replace the content the following code: const rs = require ( \"http/v4/rs\" ); const dao = require ( \"babylon-project/dao/Books\" ); rs . service () . resource ( \"\" ) . get ( function ( ctx , request , response ) { let entities = dao . list (); response . setContentType ( \"application/json\" ); response . setStatus ( response . OK ); response . println ( JSON . stringify ( entities )); }) . resource ( \"{id}\" ) . get ( function ( ctx , request , response ) { let id = ctx . pathParameters . id ; let entity = dao . get ( id ); response . setContentType ( \"application/json\" ); if ( entity ) { response . setStatus ( response . OK ); response . println ( JSON . stringify ( entities )); } else { response . setStatus ( response . NOT_FOUND ); response . println ( JSON . stringify ({ code : response . NOT_FOUND , message : \"Book not found\" })); } }) . resource ( \"\" ) . post ( function ( ctx , request , response ) { let entity = request . getJSON (); entity . id = dao . create ( entity ); response . setHeader ( \"Content-Location\" , `/services/v4/js/babylon-project/service/Books.js/ ${ entity . id } ` ); response . setStatus ( response . CREATED ); }) . resource ( \"{id}\" ) . put ( function ( ctx , request , response ) { let entity = request . getJSON (); entity . id = ctx . pathParameters . id ; dao . update ( entity ); response . setStatus ( response . OK ); }) . resource ( \"{id}\" ) . delete ( function ( ctx , request , response ) { let id = ctx . pathParameters . id ; let entity = dao . get ( id ); if ( entity ) { dao . delete ( id ); response . setStatus ( response . NO_CONTENT ); } else { response . setStatus ( response . NOT_FOUND ); response . println ( JSON . stringify ({ code : response . NOT_FOUND , message : \"Book not found\" })); } }) . execute (); User Interface Right click on the babylon-project project and select New \u2192 Folder . Enter view for the name of the folder. Right click on the view folder and select New \u2192 HTML5 Page . Enter index.html for the name of the HTML5 Page. Replace the content with the following code: <!DOCTYPE html> < html lang = \"en\" ng-app = \"page\" > < head > < meta charset = \"utf-8\" > < meta http-equiv = \"X-UA-Compatible\" content = \"IE=edge\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < meta name = \"description\" content = \"\" > < meta name = \"author\" content = \"\" > < link type = \"text/css\" rel = \"stylesheet\" href = \"/services/v4/core/theme/bootstrap.min.css\" > < link type = \"text/css\" rel = \"stylesheet\" href = \"/webjars/fontawesome/4.7.0/css/font-awesome.min.css\" > < link type = \"image/png\" rel = \"shortcut icon\" href = \"/services/v4/web/resources/images/favicon.png\" /> </ head > < body ng-controller = \"PageController\" > < div class = \"page-header\" > < h1 > Manage Books </ h1 > </ div > < div class = \"container\" > < button type = \"button\" ng-click = \"openNewDialog()\" class = \"btn btn-lg btn-primary pull-right\" > New </ button > < table class = \"table product-table\" > < thead > < tr > < th > # </ th > < th class = \"text-capitalize\" > ID </ th > < th class = \"text-capitalize\" > ISBN </ th > < th class = \"text-capitalize\" > Title </ th > < th class = \"text-capitalize\" > Publisher </ th > < th class = \"text-capitalize\" > Date </ th > < th class = \"text-capitalize\" > Price </ th > < th ></ th > </ tr > </ thead > < tbody > < tr ng-repeat = \"next in data\" > < td > {{$index + 1}} </ td > < td > {{next.id}} </ td > < td > {{next.isbn}} </ td > < td > {{next.title}} </ td > < td > {{next.publisher}} </ td > < td > {{next.date}} </ td > < td > {{next.price}} </ td > < td > < i class = \"close fa fa-2x fa-remove\" ng-click = \"openDeleteDialog(next)\" ></ i > < i class = \"close fa fa-2x fa-pencil\" ng-click = \"openEditDialog(next)\" style = \"margin-right: 0.5em\" ></ i > </ td > </ tr > </ tbody > </ table > </ div > < div class = \"modal fade\" id = \"entityModal\" tabindex = \"-1\" role = \"dialog\" aria-hidden = \"true\" > < div class = \"modal-dialog\" role = \"document\" > < div class = \"modal-content\" > < div class = \"modal-header\" > < h3 ng-show = \"actionType === 'new'\" class = \"modal-title\" id = \"exampleModalLabel\" > Create entity </ h3 > < h3 ng-show = \"actionType === 'update'\" class = \"modal-title\" id = \"exampleModalLabel\" > Update entity </ h3 > < h3 ng-show = \"actionType === 'delete'\" class = \"modal-title\" id = \"exampleModalLabel\" > Delete entity </ h3 > < button type = \"button\" class = \"close\" data-dismiss = \"modal\" aria-label = \"Close\" > < span aria-hidden = \"true\" > &times; </ span > </ button > </ div > < div class = \"modal-body\" > < form ng-hide = \"actionType === 'delete'\" > < div class = \"form-group\" > < label > ISBN </ label > < input type = \"text\" class = \"form-control\" placeholder = \"Enter isbn\" ng-model = \"entity.isbn\" > </ div > < div class = \"form-group\" > < label > Title </ label > < input type = \"text\" class = \"form-control\" placeholder = \"Enter title\" ng-model = \"entity.title\" > </ div > < div class = \"form-group\" > < label > Publisher </ label > < input type = \"text\" class = \"form-control\" placeholder = \"Enter publisher\" ng-model = \"entity.publisher\" > </ div > < div class = \"form-group\" > < label > Date </ label > < input type = \"date\" class = \"form-control\" placeholder = \"Enter date\" ng-model = \"entity.date\" > </ div > < div class = \"form-group\" > < label > price </ label > < input type = \"number\" class = \"form-control\" placeholder = \"Enter price\" ng-model = \"entity.price\" > </ div > </ form > < div ng-show = \"actionType === 'delete'\" > You are going to delete < b > Books </ b > with < b > id = {{entity.id}} </ b > . </ div > </ div > < div class = \"modal-footer\" > < button type = \"button\" class = \"btn btn-primary\" ng-show = \"actionType === 'new'\" ng-click = \"create()\" > Save </ button > < button type = \"button\" class = \"btn btn-primary\" ng-show = \"actionType === 'update'\" ng-click = \"update()\" > Update </ button > < button type = \"button\" class = \"btn btn-primary\" ng-show = \"actionType === 'delete'\" ng-click = \"delete()\" > Delete </ button > < button type = \"button\" class = \"btn btn-danger\" data-dismiss = \"modal\" > Close </ button > </ div > </ div > </ div > </ div > < script type = \"text/javascript\" src = \"/webjars/jquery/3.6.0/jquery.min.js\" ></ script > < script type = \"text/javascript\" src = \"/webjars/bootstrap/3.3.7/js/bootstrap.min.js\" async ></ script > < script type = \"text/javascript\" src = \"/webjars/angularjs/1.8.2/angular.min.js\" ></ script > < script type = \"text/javascript\" src = \"/webjars/angularjs/1.8.2/angular-resource.min.js\" ></ script > < script type = \"text/javascript\" src = \"controller.js\" ></ script > </ body > </ html > Right click on the view folder and select New \u2192 File . Enter controller.js for the name of the file. Replace the content with the following code: angular . module ( 'page' , []); angular . module ( 'page' ). controller ( 'PageController' , function ( $scope , $http ) { let api = '/services/v4/js/babylon-project/service/Books.js' ; function load () { $http . get ( api ) . then ( function ( response ) { $scope . data = response . data ; }); } load (); $scope . openNewDialog = function () { $scope . actionType = 'new' ; $scope . entity = {}; toggleEntityModal (); }; $scope . openEditDialog = function ( entity ) { $scope . actionType = 'update' ; $scope . entity = entity ; toggleEntityModal (); }; $scope . openDeleteDialog = function ( entity ) { $scope . actionType = 'delete' ; $scope . entity = entity ; toggleEntityModal (); }; $scope . close = function () { load (); toggleEntityModal (); }; $scope . create = function () { $http . post ( api , JSON . stringify ( $scope . entity )) . then ( function ( data ) { load (); toggleEntityModal (); }). error ( function ( data ) { alert ( JSON . stringify ( data )); }); }; $scope . update = function () { $http . put ( api + '/' + $scope . entity . id , JSON . stringify ( $scope . entity )) . then ( function ( data ) { load (); toggleEntityModal (); }). error ( function ( data ) { alert ( JSON . stringify ( data )); }) }; $scope . delete = function () { $http . delete ( api + '/' + $scope . entity . id ) . then ( function ( data ) { load (); toggleEntityModal (); }). error ( function ( data ) { alert ( JSON . stringify ( data )); }); }; function toggleEntityModal () { $ ( '#entityModal' ). modal ( 'toggle' ); } }); Publish and Preview (optional) Right click on the babylon-project project and select Publish . Select the index.html in the Projects view In the Preview window you should see the web page for books management. Try to enter a few book descriptions to test how it works.","title":"Bookstore Application"},{"location":"tutorials/application-development/bookstore/#bookstore-application","text":"This sample shows how to create a simple web application for managing a single entity called Books . It contains a database table definition, a RESTful service and a web page for managing the instances via user interface.","title":"Bookstore Application"},{"location":"tutorials/application-development/bookstore/#steps","text":"","title":"Steps"},{"location":"tutorials/application-development/bookstore/#project","text":"Create a project named babylon-project .","title":"Project"},{"location":"tutorials/application-development/bookstore/#database-descriptor","text":"Right click on the babylon-project project and select New \u2192 Folder . Enter data for the name of the folder. Right click on the data folder and select New \u2192 Database Table . Enter BABYLON_BOOKS.table for the name of the database table descriptor. Right click on BABYLON_BOOKS.table and select Open With \u2192 Code Editor . Replace the content with the following definition: { \"name\" : \"BABYLON_BOOKS\" , \"type\" : \"TABLE\" , \"columns\" : [ { \"name\" : \"BOOK_ID\" , \"type\" : \"INTEGER\" , \"length\" : \"0\" , \"primaryKey\" : \"true\" , \"identity\" : \"true\" , \"precision\" : \"\" , \"scale\" : \"\" }, { \"name\" : \"BOOK_ISBN\" , \"type\" : \"CHAR\" , \"length\" : \"13\" , \"primaryKey\" : \"false\" , \"identity\" : \"false\" , \"precision\" : \"\" , \"scale\" : \"\" }, { \"name\" : \"BOOK_TITLE\" , \"type\" : \"VARCHAR\" , \"length\" : \"120\" , \"primaryKey\" : \"false\" , \"identity\" : \"false\" , \"precision\" : \"\" , \"scale\" : \"\" }, { \"name\" : \"BOOK_PUBLISHER\" , \"type\" : \"VARCHAR\" , \"length\" : \"120\" , \"primaryKey\" : \"false\" , \"identity\" : \"false\" , \"precision\" : \"\" , \"scale\" : \"\" }, { \"name\" : \"BOOK_DATE\" , \"type\" : \"DATE\" , \"length\" : \"20\" , \"primaryKey\" : \"false\" , \"identity\" : \"false\" , \"precision\" : \"\" , \"scale\" : \"\" , \"nullable\" : \"true\" }, { \"name\" : \"BOOK_PRICE\" , \"type\" : \"DOUBLE\" , \"length\" : \"20\" , \"primaryKey\" : \"false\" , \"identity\" : \"false\" , \"precision\" : \"\" , \"scale\" : \"\" } ], \"dependencies\" : [] } Save the changes and close the Code Editor . Double click on BABYLON_BOOKS.table to view the definition with the Table Editor . Save & Publish Saving the file will trigger a Publish action, which will create the database table in the target database schema. Usually this action should take several seconds to complete, after which the database table would be visible in the Database Perspective . Note: Manual Publish can be performed by right clicking on the artifact and selecting Publish from the context menu. The Publish action can be performed also on project level.","title":"Database Descriptor"},{"location":"tutorials/application-development/bookstore/#data-access-object","text":"Right click on the babylon-project project and select New \u2192 Folder . Enter dao for the name of the folder. Right click on the dao folder and select New \u2192 JavaScript CJS Service . Enter Books.js for the name of the JavaScript Service. Replace the content with the following code: const daoApi = require ( \"db/v4/dao\" ); let dao = daoApi . create ({ table : \"BABYLON_BOOKS\" , properties : [ { name : \"id\" , column : \"BOOK_ID\" , type : \"INTEGER\" , id : true , required : true }, { name : \"isbn\" , column : \"BOOK_ISBN\" , type : \"CHAR\" , id : false , required : false }, { name : \"title\" , column : \"BOOK_TITLE\" , type : \"VARCHAR\" , id : false , required : false }, { name : \"publisher\" , column : \"BOOK_PUBLISHER\" , type : \"VARCHAR\" , id : false , required : false }, { name : \"date\" , column : \"BOOK_DATE\" , type : \"DATE\" , id : false , required : true }, { name : \"price\" , column : \"BOOK_PRICE\" , type : \"DOUBLE\" , id : false , required : true }] }); exports . list = function ( settings ) { return dao . list ( settings ); }; exports . get = function ( id ) { return dao . find ( id ); }; exports . create = function ( entity ) { return dao . insert ( entity ); }; exports . update = function ( entity ) { return dao . update ( entity ); }; exports . delete = function ( id ) { dao . remove ( id ); };","title":"Data Access Object"},{"location":"tutorials/application-development/bookstore/#rest-service","text":"Right click on the babylon-project project and select New \u2192 Folder . Enter service for the name of the folder. Right click on the service folder and select New \u2192 JavaScript CJS Service . Enter Books.js for the name of the JavaScript Service. Replace the content the following code: const rs = require ( \"http/v4/rs\" ); const dao = require ( \"babylon-project/dao/Books\" ); rs . service () . resource ( \"\" ) . get ( function ( ctx , request , response ) { let entities = dao . list (); response . setContentType ( \"application/json\" ); response . setStatus ( response . OK ); response . println ( JSON . stringify ( entities )); }) . resource ( \"{id}\" ) . get ( function ( ctx , request , response ) { let id = ctx . pathParameters . id ; let entity = dao . get ( id ); response . setContentType ( \"application/json\" ); if ( entity ) { response . setStatus ( response . OK ); response . println ( JSON . stringify ( entities )); } else { response . setStatus ( response . NOT_FOUND ); response . println ( JSON . stringify ({ code : response . NOT_FOUND , message : \"Book not found\" })); } }) . resource ( \"\" ) . post ( function ( ctx , request , response ) { let entity = request . getJSON (); entity . id = dao . create ( entity ); response . setHeader ( \"Content-Location\" , `/services/v4/js/babylon-project/service/Books.js/ ${ entity . id } ` ); response . setStatus ( response . CREATED ); }) . resource ( \"{id}\" ) . put ( function ( ctx , request , response ) { let entity = request . getJSON (); entity . id = ctx . pathParameters . id ; dao . update ( entity ); response . setStatus ( response . OK ); }) . resource ( \"{id}\" ) . delete ( function ( ctx , request , response ) { let id = ctx . pathParameters . id ; let entity = dao . get ( id ); if ( entity ) { dao . delete ( id ); response . setStatus ( response . NO_CONTENT ); } else { response . setStatus ( response . NOT_FOUND ); response . println ( JSON . stringify ({ code : response . NOT_FOUND , message : \"Book not found\" })); } }) . execute ();","title":"REST Service"},{"location":"tutorials/application-development/bookstore/#user-interface","text":"Right click on the babylon-project project and select New \u2192 Folder . Enter view for the name of the folder. Right click on the view folder and select New \u2192 HTML5 Page . Enter index.html for the name of the HTML5 Page. Replace the content with the following code: <!DOCTYPE html> < html lang = \"en\" ng-app = \"page\" > < head > < meta charset = \"utf-8\" > < meta http-equiv = \"X-UA-Compatible\" content = \"IE=edge\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < meta name = \"description\" content = \"\" > < meta name = \"author\" content = \"\" > < link type = \"text/css\" rel = \"stylesheet\" href = \"/services/v4/core/theme/bootstrap.min.css\" > < link type = \"text/css\" rel = \"stylesheet\" href = \"/webjars/fontawesome/4.7.0/css/font-awesome.min.css\" > < link type = \"image/png\" rel = \"shortcut icon\" href = \"/services/v4/web/resources/images/favicon.png\" /> </ head > < body ng-controller = \"PageController\" > < div class = \"page-header\" > < h1 > Manage Books </ h1 > </ div > < div class = \"container\" > < button type = \"button\" ng-click = \"openNewDialog()\" class = \"btn btn-lg btn-primary pull-right\" > New </ button > < table class = \"table product-table\" > < thead > < tr > < th > # </ th > < th class = \"text-capitalize\" > ID </ th > < th class = \"text-capitalize\" > ISBN </ th > < th class = \"text-capitalize\" > Title </ th > < th class = \"text-capitalize\" > Publisher </ th > < th class = \"text-capitalize\" > Date </ th > < th class = \"text-capitalize\" > Price </ th > < th ></ th > </ tr > </ thead > < tbody > < tr ng-repeat = \"next in data\" > < td > {{$index + 1}} </ td > < td > {{next.id}} </ td > < td > {{next.isbn}} </ td > < td > {{next.title}} </ td > < td > {{next.publisher}} </ td > < td > {{next.date}} </ td > < td > {{next.price}} </ td > < td > < i class = \"close fa fa-2x fa-remove\" ng-click = \"openDeleteDialog(next)\" ></ i > < i class = \"close fa fa-2x fa-pencil\" ng-click = \"openEditDialog(next)\" style = \"margin-right: 0.5em\" ></ i > </ td > </ tr > </ tbody > </ table > </ div > < div class = \"modal fade\" id = \"entityModal\" tabindex = \"-1\" role = \"dialog\" aria-hidden = \"true\" > < div class = \"modal-dialog\" role = \"document\" > < div class = \"modal-content\" > < div class = \"modal-header\" > < h3 ng-show = \"actionType === 'new'\" class = \"modal-title\" id = \"exampleModalLabel\" > Create entity </ h3 > < h3 ng-show = \"actionType === 'update'\" class = \"modal-title\" id = \"exampleModalLabel\" > Update entity </ h3 > < h3 ng-show = \"actionType === 'delete'\" class = \"modal-title\" id = \"exampleModalLabel\" > Delete entity </ h3 > < button type = \"button\" class = \"close\" data-dismiss = \"modal\" aria-label = \"Close\" > < span aria-hidden = \"true\" > &times; </ span > </ button > </ div > < div class = \"modal-body\" > < form ng-hide = \"actionType === 'delete'\" > < div class = \"form-group\" > < label > ISBN </ label > < input type = \"text\" class = \"form-control\" placeholder = \"Enter isbn\" ng-model = \"entity.isbn\" > </ div > < div class = \"form-group\" > < label > Title </ label > < input type = \"text\" class = \"form-control\" placeholder = \"Enter title\" ng-model = \"entity.title\" > </ div > < div class = \"form-group\" > < label > Publisher </ label > < input type = \"text\" class = \"form-control\" placeholder = \"Enter publisher\" ng-model = \"entity.publisher\" > </ div > < div class = \"form-group\" > < label > Date </ label > < input type = \"date\" class = \"form-control\" placeholder = \"Enter date\" ng-model = \"entity.date\" > </ div > < div class = \"form-group\" > < label > price </ label > < input type = \"number\" class = \"form-control\" placeholder = \"Enter price\" ng-model = \"entity.price\" > </ div > </ form > < div ng-show = \"actionType === 'delete'\" > You are going to delete < b > Books </ b > with < b > id = {{entity.id}} </ b > . </ div > </ div > < div class = \"modal-footer\" > < button type = \"button\" class = \"btn btn-primary\" ng-show = \"actionType === 'new'\" ng-click = \"create()\" > Save </ button > < button type = \"button\" class = \"btn btn-primary\" ng-show = \"actionType === 'update'\" ng-click = \"update()\" > Update </ button > < button type = \"button\" class = \"btn btn-primary\" ng-show = \"actionType === 'delete'\" ng-click = \"delete()\" > Delete </ button > < button type = \"button\" class = \"btn btn-danger\" data-dismiss = \"modal\" > Close </ button > </ div > </ div > </ div > </ div > < script type = \"text/javascript\" src = \"/webjars/jquery/3.6.0/jquery.min.js\" ></ script > < script type = \"text/javascript\" src = \"/webjars/bootstrap/3.3.7/js/bootstrap.min.js\" async ></ script > < script type = \"text/javascript\" src = \"/webjars/angularjs/1.8.2/angular.min.js\" ></ script > < script type = \"text/javascript\" src = \"/webjars/angularjs/1.8.2/angular-resource.min.js\" ></ script > < script type = \"text/javascript\" src = \"controller.js\" ></ script > </ body > </ html > Right click on the view folder and select New \u2192 File . Enter controller.js for the name of the file. Replace the content with the following code: angular . module ( 'page' , []); angular . module ( 'page' ). controller ( 'PageController' , function ( $scope , $http ) { let api = '/services/v4/js/babylon-project/service/Books.js' ; function load () { $http . get ( api ) . then ( function ( response ) { $scope . data = response . data ; }); } load (); $scope . openNewDialog = function () { $scope . actionType = 'new' ; $scope . entity = {}; toggleEntityModal (); }; $scope . openEditDialog = function ( entity ) { $scope . actionType = 'update' ; $scope . entity = entity ; toggleEntityModal (); }; $scope . openDeleteDialog = function ( entity ) { $scope . actionType = 'delete' ; $scope . entity = entity ; toggleEntityModal (); }; $scope . close = function () { load (); toggleEntityModal (); }; $scope . create = function () { $http . post ( api , JSON . stringify ( $scope . entity )) . then ( function ( data ) { load (); toggleEntityModal (); }). error ( function ( data ) { alert ( JSON . stringify ( data )); }); }; $scope . update = function () { $http . put ( api + '/' + $scope . entity . id , JSON . stringify ( $scope . entity )) . then ( function ( data ) { load (); toggleEntityModal (); }). error ( function ( data ) { alert ( JSON . stringify ( data )); }) }; $scope . delete = function () { $http . delete ( api + '/' + $scope . entity . id ) . then ( function ( data ) { load (); toggleEntityModal (); }). error ( function ( data ) { alert ( JSON . stringify ( data )); }); }; function toggleEntityModal () { $ ( '#entityModal' ). modal ( 'toggle' ); } });","title":"User Interface"},{"location":"tutorials/application-development/bookstore/#publish-and-preview","text":"(optional) Right click on the babylon-project project and select Publish . Select the index.html in the Projects view In the Preview window you should see the web page for books management. Try to enter a few book descriptions to test how it works.","title":"Publish and Preview"},{"location":"tutorials/application-development/file-upload/","text":"File Upload Steps Create a project file_upload_project Then create a JavaScript service named my_file_upload.js Replace the service code with the following content: File Upload Handler var upload = require ( 'http/v4/upload' ); var request = require ( 'http/v4/request' ); var response = require ( 'http/v4/response' ); if ( request . getMethod () === \"POST\" ) { if ( upload . isMultipartContent ()) { var fileItems = upload . parseRequest (); for ( i = 0 ; i < fileItems . size (); i ++ ) { var fileItem = fileItems . get ( i ); if ( ! fileItem . isFormField ()) { response . println ( \"File Name: \" + fileItem . getName ()); response . println ( \"File Bytes (as text): \" + String . fromCharCode . apply ( null , fileItem . getBytes ())); } else { response . println ( \"Field Name: \" + fileItem . getFieldName ()); response . println ( \"Field Text: \" + fileItem . getText ()); } } } else { response . println ( \"The request's content must be 'multipart'\" ); } } else if ( request . getMethod () === \"GET\" ) { response . println ( \"Use POST request.\" ); } response . flush (); response . close (); Then create a HTML5 page named my_upload.html Replace the content with the following HTML code: File Upload Frontend < html > < body > < form action = \"/services/v4/js/file_upload_project/my_file_upload.js\" method = \"post\" enctype = \"multipart/form-data\" > < label for = \"file\" > Filename: </ label > < input type = \"file\" name = \"file\" id = \"file\" multiple > < br > < input type = \"submit\" name = \"submit\" value = \"Submit\" > </ form > </ body > </ html > Publish the project Select the my_upload.html file in the Workspace view and try to test by uploading a file in the Preview For more information, see the API documentation.","title":"File Upload"},{"location":"tutorials/application-development/file-upload/#file-upload","text":"","title":"File Upload"},{"location":"tutorials/application-development/file-upload/#steps","text":"Create a project file_upload_project Then create a JavaScript service named my_file_upload.js Replace the service code with the following content:","title":"Steps"},{"location":"tutorials/application-development/file-upload/#file-upload-handler","text":"var upload = require ( 'http/v4/upload' ); var request = require ( 'http/v4/request' ); var response = require ( 'http/v4/response' ); if ( request . getMethod () === \"POST\" ) { if ( upload . isMultipartContent ()) { var fileItems = upload . parseRequest (); for ( i = 0 ; i < fileItems . size (); i ++ ) { var fileItem = fileItems . get ( i ); if ( ! fileItem . isFormField ()) { response . println ( \"File Name: \" + fileItem . getName ()); response . println ( \"File Bytes (as text): \" + String . fromCharCode . apply ( null , fileItem . getBytes ())); } else { response . println ( \"Field Name: \" + fileItem . getFieldName ()); response . println ( \"Field Text: \" + fileItem . getText ()); } } } else { response . println ( \"The request's content must be 'multipart'\" ); } } else if ( request . getMethod () === \"GET\" ) { response . println ( \"Use POST request.\" ); } response . flush (); response . close (); Then create a HTML5 page named my_upload.html Replace the content with the following HTML code:","title":"File Upload Handler"},{"location":"tutorials/application-development/file-upload/#file-upload-frontend","text":"< html > < body > < form action = \"/services/v4/js/file_upload_project/my_file_upload.js\" method = \"post\" enctype = \"multipart/form-data\" > < label for = \"file\" > Filename: </ label > < input type = \"file\" name = \"file\" id = \"file\" multiple > < br > < input type = \"submit\" name = \"submit\" value = \"Submit\" > </ form > </ body > </ html > Publish the project Select the my_upload.html file in the Workspace view and try to test by uploading a file in the Preview For more information, see the API documentation.","title":"File Upload Frontend"},{"location":"tutorials/application-development/job-console/","text":"Scheduled Job Steps Create a project job_console_project Then create a JavaScript service named my_job_handler.js Replace the service code with the following content: console . log ( \"Hello from My Job!\" ); Then create a Scheduled Job named my_job.job Replace the content with the following JSON code: { \"expression\" : \"0/10 * * * * ?\" , \"handler\" : \"job_console_project/my_job_handler.js\" , \"description\" : \"My Job\" } Publish the project After 10s in the Console view you should see the following lines: [2018-05-14T12:05:00.061Z] [INFO] Hello from My Job! Note: the log messages in the Console view are in a reverse order - the newest are on top For more information, see the API documentation.","title":"Scheduled Job"},{"location":"tutorials/application-development/job-console/#scheduled-job","text":"","title":"Scheduled Job"},{"location":"tutorials/application-development/job-console/#steps","text":"Create a project job_console_project Then create a JavaScript service named my_job_handler.js Replace the service code with the following content: console . log ( \"Hello from My Job!\" ); Then create a Scheduled Job named my_job.job Replace the content with the following JSON code: { \"expression\" : \"0/10 * * * * ?\" , \"handler\" : \"job_console_project/my_job_handler.js\" , \"description\" : \"My Job\" } Publish the project After 10s in the Console view you should see the following lines: [2018-05-14T12:05:00.061Z] [INFO] Hello from My Job! Note: the log messages in the Console view are in a reverse order - the newest are on top For more information, see the API documentation.","title":"Steps"},{"location":"tutorials/application-development/kafka/","text":"Kafka Producer and Counsmer Prerequisites Run a local Kafka server following the steps (1 and 2) from here: https://kafka.apache.org/quickstart Steps Create a project kafka_project Then create a JavaScript service named my_kafka_handler.js Replace the service code with the following content: Handler exports . onMessage = function ( message ) { console . log ( \"Hello from My Kafka Listener! Message: \" + message ); }; exports . onError = function ( error ) { console . error ( \"Error from My Kafka Listener! Error: \" + error ); }; Then create a Kafka Consumer named my_kafka_consumer.js Replace the file content with the following code: var consumer = require ( \"kafka/consumer\" ); consumer . topic ( \"topic1\" , \"{}\" ). startListening ( \"kafka_project/my_kafka_handler\" , 1000 ); Then create another back-end service which will play the role of a trigger my_kafka_producer.js Replace the trigger content with the following code: var producer = require ( \"kafka/producer\" ); producer . topic ( \"topic1\" , \"{}\" ). send ( \"key1\" , \"value1\" ); Publish the project Select the my_kafka_producer.js file in the Workspace view to be able to trigger the invocation of this service via the Preview view In the Console view you should see the following lines: 2020-11-01 23:33:54.272 [INFO ] [Thread-275] o.e.dirigible.api.v3.core.Console - Hello from My Kafka Listener! Message: {\"topic\":\"topic1\",\"partition\":0,\"offset\":29,\"timestamp\":1604266434251,\"timestampType\":\"CREATE_TIME\",\"serializedKeySize\":4,\"serializedValueSize\":6,\"headers\":{\"headers\":[],\"isReadOnly\":false},\"key\":\"key1\",\"value\":\"value1\",\"leaderEpoch\":{\"value\":0}} Note: the log messages in the Console view are in a reverse order - the newest are on top For more information, see the API documentation.","title":"Kafka Producer and Consumer"},{"location":"tutorials/application-development/kafka/#kafka-producer-and-counsmer","text":"","title":"Kafka Producer and Counsmer"},{"location":"tutorials/application-development/kafka/#prerequisites","text":"Run a local Kafka server following the steps (1 and 2) from here: https://kafka.apache.org/quickstart","title":"Prerequisites"},{"location":"tutorials/application-development/kafka/#steps","text":"Create a project kafka_project Then create a JavaScript service named my_kafka_handler.js Replace the service code with the following content:","title":"Steps"},{"location":"tutorials/application-development/kafka/#handler","text":"exports . onMessage = function ( message ) { console . log ( \"Hello from My Kafka Listener! Message: \" + message ); }; exports . onError = function ( error ) { console . error ( \"Error from My Kafka Listener! Error: \" + error ); }; Then create a Kafka Consumer named my_kafka_consumer.js Replace the file content with the following code: var consumer = require ( \"kafka/consumer\" ); consumer . topic ( \"topic1\" , \"{}\" ). startListening ( \"kafka_project/my_kafka_handler\" , 1000 ); Then create another back-end service which will play the role of a trigger my_kafka_producer.js Replace the trigger content with the following code: var producer = require ( \"kafka/producer\" ); producer . topic ( \"topic1\" , \"{}\" ). send ( \"key1\" , \"value1\" ); Publish the project Select the my_kafka_producer.js file in the Workspace view to be able to trigger the invocation of this service via the Preview view In the Console view you should see the following lines: 2020-11-01 23:33:54.272 [INFO ] [Thread-275] o.e.dirigible.api.v3.core.Console - Hello from My Kafka Listener! Message: {\"topic\":\"topic1\",\"partition\":0,\"offset\":29,\"timestamp\":1604266434251,\"timestampType\":\"CREATE_TIME\",\"serializedKeySize\":4,\"serializedValueSize\":6,\"headers\":{\"headers\":[],\"isReadOnly\":false},\"key\":\"key1\",\"value\":\"value1\",\"leaderEpoch\":{\"value\":0}} Note: the log messages in the Console view are in a reverse order - the newest are on top For more information, see the API documentation.","title":"Handler"},{"location":"tutorials/application-development/listener-queue/","text":"Listener of a Queue Steps Create a project message_queue_listener_project Then create a JavaScript service named my_listener_handler.js Replace the service code with the following content: Handler exports . onMessage = function ( message ) { console . log ( \"Hello from My Listener! Message: \" + message ); }; exports . onError = function ( error ) { console . error ( \"Error from My Listener! Error: \" + error ); }; Then create a Message Listener named my_listener.listener Replace the file content with the following JSON code: { \"name\" : \"message_queue_listener_project/my_queue\" , \"type\" : \"Q\" , \"handler\" : \"message_queue_listener_project/my_listener_handler.js\" , \"description\" : \"My Listener\" } Then create another back-end service which will play the role of a trigger my_trigger.js Replace the trigger content with the following code: var producer = require ( 'messaging/v3/producer' ); var message = \"*** I am a message created at: \" + new Date () + \" ***\" ; producer . queue ( \"message_queue_listener_project/my_queue\" ). send ( message ); console . log ( \"Hello from My Trigger! Message: \" + message ); Publish the project Select the my_trigger.js file in the Workspace view to be able to trigger the invocation of this service via the Preview view In the Console view you should see the following lines: [2018-05-14T11:57:13.197Z] [INFO] Hello from My Listener! Message: I am a message created at: Mon May 14 2018 14:57:13 GMT+0300 (EEST) [2018-05-14T11:57:13.174Z] [INFO] Hello from My Trigger! Message: I am a message created at: Mon May 14 2018 14:57:13 GMT+0300 (EEST) Note: the log messages in the Console view are in a reverse order - the newest are on top For more information, see the API documentation.","title":"Listener of a Queue"},{"location":"tutorials/application-development/listener-queue/#listener-of-a-queue","text":"","title":"Listener of a Queue"},{"location":"tutorials/application-development/listener-queue/#steps","text":"Create a project message_queue_listener_project Then create a JavaScript service named my_listener_handler.js Replace the service code with the following content:","title":"Steps"},{"location":"tutorials/application-development/listener-queue/#handler","text":"exports . onMessage = function ( message ) { console . log ( \"Hello from My Listener! Message: \" + message ); }; exports . onError = function ( error ) { console . error ( \"Error from My Listener! Error: \" + error ); }; Then create a Message Listener named my_listener.listener Replace the file content with the following JSON code: { \"name\" : \"message_queue_listener_project/my_queue\" , \"type\" : \"Q\" , \"handler\" : \"message_queue_listener_project/my_listener_handler.js\" , \"description\" : \"My Listener\" } Then create another back-end service which will play the role of a trigger my_trigger.js Replace the trigger content with the following code: var producer = require ( 'messaging/v3/producer' ); var message = \"*** I am a message created at: \" + new Date () + \" ***\" ; producer . queue ( \"message_queue_listener_project/my_queue\" ). send ( message ); console . log ( \"Hello from My Trigger! Message: \" + message ); Publish the project Select the my_trigger.js file in the Workspace view to be able to trigger the invocation of this service via the Preview view In the Console view you should see the following lines: [2018-05-14T11:57:13.197Z] [INFO] Hello from My Listener! Message: I am a message created at: Mon May 14 2018 14:57:13 GMT+0300 (EEST) [2018-05-14T11:57:13.174Z] [INFO] Hello from My Trigger! Message: I am a message created at: Mon May 14 2018 14:57:13 GMT+0300 (EEST) Note: the log messages in the Console view are in a reverse order - the newest are on top For more information, see the API documentation.","title":"Handler"},{"location":"tutorials/application-development/shell-command/","text":"Shell Command Steps Create a project shell_command_project Then create a file named my_command.sh Replace the code with the following content: uname -an echo variable1=$variable1 Then create a Command named my_command.command Replace the content with the following JSON code: { \"description\" : \"command description\" , \"contentType\" : \"text/plain\" , \"commands\" :[ { \"os\" : \"mac\" , \"command\" : \"sh shell_command_project/my_command.sh\" }, { \"os\" : \"linux\" , \"command\" : \"sh shell_command_project/my_command.sh\" } ], \"set\" :{ \"variable1\" : \"value1\" }, \"unset\" :[ \"variable2\" ] } Publish the project Select the *.command file in the Workspace explorer and inspect the result in the Preview: Darwin XXXXXXXXXXXXX 17.7.0 Darwin Kernel Version 17.7.0: Thu Jun 21 22:53:14 PDT 2018; root:xnu-4570.71.2~1/RELEASE_X86_64 x86_64 variable1=value1 Note: The working folder is set to the registry/public space under the file-based Repository. You can execute an arbitrary command e.g. even Node, Python, Julia, etc., by using the dirigible projects' content published and available under the registry space. For this case the given framework has to be setup in advance and the entry point executable to be added to the PATH environment variable. The standard output is redirected to the service response. For more information, see the API documentation.","title":"Shell Command"},{"location":"tutorials/application-development/shell-command/#shell-command","text":"","title":"Shell Command"},{"location":"tutorials/application-development/shell-command/#steps","text":"Create a project shell_command_project Then create a file named my_command.sh Replace the code with the following content: uname -an echo variable1=$variable1 Then create a Command named my_command.command Replace the content with the following JSON code: { \"description\" : \"command description\" , \"contentType\" : \"text/plain\" , \"commands\" :[ { \"os\" : \"mac\" , \"command\" : \"sh shell_command_project/my_command.sh\" }, { \"os\" : \"linux\" , \"command\" : \"sh shell_command_project/my_command.sh\" } ], \"set\" :{ \"variable1\" : \"value1\" }, \"unset\" :[ \"variable2\" ] } Publish the project Select the *.command file in the Workspace explorer and inspect the result in the Preview: Darwin XXXXXXXXXXXXX 17.7.0 Darwin Kernel Version 17.7.0: Thu Jun 21 22:53:14 PDT 2018; root:xnu-4570.71.2~1/RELEASE_X86_64 x86_64 variable1=value1 Note: The working folder is set to the registry/public space under the file-based Repository. You can execute an arbitrary command e.g. even Node, Python, Julia, etc., by using the dirigible projects' content published and available under the registry space. For this case the given framework has to be setup in advance and the entry point executable to be added to the PATH environment variable. The standard output is redirected to the service response. For more information, see the API documentation.","title":"Steps"},{"location":"tutorials/customizations/embedded/","text":"Embedded Dirigible Sample class showing how to embed Dirigible into an arbitrary Java application. Steps Create a Java project Create a folder \"content\" Create sub-folder \"project1\" under the \"content\" folder Create a file named \"hello1.js\" under the \"project1\" folder with the following content console . log ( 'Hello World!' ); Create a Java class named \"MyApp\" with the following content: import java.io.IOException ; import org.eclipse.dirigible.commons.api.context.ContextException ; import org.eclipse.dirigible.commons.api.scripting.ScriptingException ; import org.eclipse.dirigible.runtime.core.embed.EmbeddedDirigible ; public class MyApp { public static void main ( String [] args ) { // create a Dirigible instance EmbeddedDirigible dirigible = new EmbeddedDirigible (); try { // initialize the Dirigible instance dirigible . initialize (); // import the content under the specified folder to the Dirigible's registry dirigible . load ( \"./content\" ); // execute a given service module dirigible . executeJavaScript ( \"project1/hello1.js\" ); // or more generic dirigible.execute(dirigible.ENGINE_TYPE_JAVASCRIPT, \"project1/hello1.js\"); // or richer dirigible.execute(dirigible.ENGINE_TYPE_JAVASCRIPT, \"project1/hello1.js\", context, request, response); } catch ( IOException | ScriptingException | ContextException e ) { e . printStackTrace (); } finally { // destroy the Dirigible instance dirigible . destroy (); System . exit ( 0 ); } } } Run it as a Java application You have to be able to find the following log record in the system output [main] INFO org.eclipse.dirigible.api.v3.core.Console - Hello World!","title":"Embedded Dirigible"},{"location":"tutorials/customizations/embedded/#embedded-dirigible","text":"Sample class showing how to embed Dirigible into an arbitrary Java application.","title":"Embedded Dirigible"},{"location":"tutorials/customizations/embedded/#steps","text":"Create a Java project Create a folder \"content\" Create sub-folder \"project1\" under the \"content\" folder Create a file named \"hello1.js\" under the \"project1\" folder with the following content console . log ( 'Hello World!' ); Create a Java class named \"MyApp\" with the following content: import java.io.IOException ; import org.eclipse.dirigible.commons.api.context.ContextException ; import org.eclipse.dirigible.commons.api.scripting.ScriptingException ; import org.eclipse.dirigible.runtime.core.embed.EmbeddedDirigible ; public class MyApp { public static void main ( String [] args ) { // create a Dirigible instance EmbeddedDirigible dirigible = new EmbeddedDirigible (); try { // initialize the Dirigible instance dirigible . initialize (); // import the content under the specified folder to the Dirigible's registry dirigible . load ( \"./content\" ); // execute a given service module dirigible . executeJavaScript ( \"project1/hello1.js\" ); // or more generic dirigible.execute(dirigible.ENGINE_TYPE_JAVASCRIPT, \"project1/hello1.js\"); // or richer dirigible.execute(dirigible.ENGINE_TYPE_JAVASCRIPT, \"project1/hello1.js\", context, request, response); } catch ( IOException | ScriptingException | ContextException e ) { e . printStackTrace (); } finally { // destroy the Dirigible instance dirigible . destroy (); System . exit ( 0 ); } } } Run it as a Java application You have to be able to find the following log record in the system output [main] INFO org.eclipse.dirigible.api.v3.core.Console - Hello World!","title":"Steps"},{"location":"tutorials/customizations/master-repository/","text":"Master Repository This sample will guide you how to run an Eclipse Dirigible instance with a pre-defined content. This content is bundled in a Zip file with a specific Repository structure. You can easily get one by exporting the Repository from an existing instance via the Snapshot view (in the Repository perspective). A sample content file with a single project with a single service you can find at: repository-snapshot-20180820034353.zip . Steps Copy the above zip file in a directory e.g. /home/dirigible/master_sample Download (or build and copy) to the same directory the standalone executable dirigible-desktop-all-XXX.jar Set the environment variables: export DIRIGIBLE_MASTER_REPOSITORY_PROVIDER=zip export DIRIGIBLE_MASTER_REPOSITORY_ZIP_LOCATION=/home/dirigible/master_sample/repository-snapshot-20180820034353.zip Run with: java -jar dirigible-desktop-all-XXX.jar Enter with the nickname: dirigible You should have already available project \"my_project\" in your workspace, with a service \"hello.js\" The service is even published already, so you can directly execute it by accessing the location: http://localhost:8080/services/v4/js/my_project/hello.js Note: This is the simplest way (from the life-cycle management PoV) to run an Eclipse Dirigible application. For the master repository you can use a Zip file (as it is shown above), File System based Repository located by a Path to its root folder or a Jar file built into or accessible by the default class loader.","title":"Master Repository"},{"location":"tutorials/customizations/master-repository/#master-repository","text":"This sample will guide you how to run an Eclipse Dirigible instance with a pre-defined content. This content is bundled in a Zip file with a specific Repository structure. You can easily get one by exporting the Repository from an existing instance via the Snapshot view (in the Repository perspective). A sample content file with a single project with a single service you can find at: repository-snapshot-20180820034353.zip .","title":"Master Repository"},{"location":"tutorials/customizations/master-repository/#steps","text":"Copy the above zip file in a directory e.g. /home/dirigible/master_sample Download (or build and copy) to the same directory the standalone executable dirigible-desktop-all-XXX.jar Set the environment variables: export DIRIGIBLE_MASTER_REPOSITORY_PROVIDER=zip export DIRIGIBLE_MASTER_REPOSITORY_ZIP_LOCATION=/home/dirigible/master_sample/repository-snapshot-20180820034353.zip Run with: java -jar dirigible-desktop-all-XXX.jar Enter with the nickname: dirigible You should have already available project \"my_project\" in your workspace, with a service \"hello.js\" The service is even published already, so you can directly execute it by accessing the location: http://localhost:8080/services/v4/js/my_project/hello.js Note: This is the simplest way (from the life-cycle management PoV) to run an Eclipse Dirigible application. For the master repository you can use a Zip file (as it is shown above), File System based Repository located by a Path to its root folder or a Jar file built into or accessible by the default class loader.","title":"Steps"},{"location":"tutorials/customizations/rbac-for-cms/","text":"RBAC for CMS This sample shows how to enable the Role Based Access Management for the Content Management System in Eclipse Dirigible. Steps Set the environment variable: export DIRIGIBLE_CMS_ROLES_ENABLED=true before staring the Dirigible instance Note: for SAP Cloud Platform Neo use the deploy parameter: -DDIRIGIBLE_CMS_ROLES_ENABLED=true Open Dirigible WebIDE and go to Documents perspective Create sub-folder \"private\" under the \"root\" folder Create sub-folder \"shared\" under the \"root\" folder Upload a text file named \"secret.txt\" under the \"private\" folder with the following content This is a top secret information accessible only by users with the role Operator! Upload a text file named \"billboard.txt\" under the \"shared\" folder with the following content This is a public notice accessible by Everyone. Click on Preview icon next to the files. You should be able to see the content of both of them. Open the Workspace perspective in the WebIDE Create a project named \"cms_permissions\" Create an *.access file via the popup menu New->Access Constraints Open the file with editor Delete the sample record Click New button Fill the form as follows: Path: /private Method: READ Scope: CMIS Roles: Operator Click Save button The content of the file should look like: { \"constraints\": [ { \"path\": \"/private\", \"method\": \"READ\", \"scope\": \"CMIS\", \"roles\": [ \"Operator\" ] } ] } Note: You can inspect that be closing the editor and then use Open With from the popup menu on the same file, but choosing Orion editor option Publish the project manually via the popup menu on the project level (in case the Auto-Publish is disabled) After a while open the Operations perspective and select the Access view You should be able to identify a line similar like this: /cms_permissions/private.access CMIS /private READ Operator Aug 17, 2018 3:33:00 PM guest Open the Preview of the file secret: http://localhost:8080/services/v3/js/ide-documents/api/read/document/preview?path=/private/secret.txt Only the users who has the role Operator should be able to see the content of the file","title":"RBAC for CMS"},{"location":"tutorials/customizations/rbac-for-cms/#rbac-for-cms","text":"This sample shows how to enable the Role Based Access Management for the Content Management System in Eclipse Dirigible.","title":"RBAC for CMS"},{"location":"tutorials/customizations/rbac-for-cms/#steps","text":"Set the environment variable: export DIRIGIBLE_CMS_ROLES_ENABLED=true before staring the Dirigible instance Note: for SAP Cloud Platform Neo use the deploy parameter: -DDIRIGIBLE_CMS_ROLES_ENABLED=true Open Dirigible WebIDE and go to Documents perspective Create sub-folder \"private\" under the \"root\" folder Create sub-folder \"shared\" under the \"root\" folder Upload a text file named \"secret.txt\" under the \"private\" folder with the following content This is a top secret information accessible only by users with the role Operator! Upload a text file named \"billboard.txt\" under the \"shared\" folder with the following content This is a public notice accessible by Everyone. Click on Preview icon next to the files. You should be able to see the content of both of them. Open the Workspace perspective in the WebIDE Create a project named \"cms_permissions\" Create an *.access file via the popup menu New->Access Constraints Open the file with editor Delete the sample record Click New button Fill the form as follows: Path: /private Method: READ Scope: CMIS Roles: Operator Click Save button The content of the file should look like: { \"constraints\": [ { \"path\": \"/private\", \"method\": \"READ\", \"scope\": \"CMIS\", \"roles\": [ \"Operator\" ] } ] } Note: You can inspect that be closing the editor and then use Open With from the popup menu on the same file, but choosing Orion editor option Publish the project manually via the popup menu on the project level (in case the Auto-Publish is disabled) After a while open the Operations perspective and select the Access view You should be able to identify a line similar like this: /cms_permissions/private.access CMIS /private READ Operator Aug 17, 2018 3:33:00 PM guest Open the Preview of the file secret: http://localhost:8080/services/v3/js/ide-documents/api/read/document/preview?path=/private/secret.txt Only the users who has the role Operator should be able to see the content of the file","title":"Steps"},{"location":"tutorials/customizations/custom-stack/","text":"Custom Stack This tutorial will guide you through the creation of a custom Eclipse Dirigible stack. Prerequisites JDK 11+ - OpenJDK versions can be found here . Maven 3.5+ - Maven version 3.5.3 can be found here . Steps Create Maven pom.xml files: Create new folder on your machine, for the custom stack (e.g. <my-custom-stack-path>/custom-stack ) . Create pom.xml and releng/pom.xml files. pom.xml releng/pom.xml Create new pom.xml file. Paste the following content: <project xmlns= \"http://maven.apache.org/POM/4.0.0\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation= \"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" > <modelVersion> 4.0.0 </modelVersion> <parent> <groupId> org.sonatype.oss </groupId> <artifactId> oss-parent </artifactId> <version> 7 </version> </parent> <name> Custom Stack - Parent </name> <description> Custom Stack </description> <groupId> io.dirigible.custom.stack </groupId> <artifactId> custom-stack-parent </artifactId> <version> 1.0.0-SNAPSHOT </version> <packaging> pom </packaging> <modules> <module> releng </module> </modules> <profiles> <profile> <id> default </id> <activation> <activeByDefault> true </activeByDefault> </activation> <build> <plugins> <plugin> <groupId> org.apache.maven.plugins </groupId> <artifactId> maven-compiler-plugin </artifactId> <version> ${maven.compiler.plugin.version} </version> <configuration> <source> ${maven.compiler.source} </source> <target> ${maven.compiler.target} </target> <debug> true </debug> <debuglevel> lines,vars,source </debuglevel> </configuration> </plugin> <!-- Note: Uncomment for git repositories, as this plugin would get the last commit id. This is needed for the info in the \"About\" view. --> <!-- <plugin> <groupId>pl.project13.maven</groupId> <artifactId>git-commit-id-plugin</artifactId> <version>${git-commit-id-plugin.version}</version> <executions> <execution> <id>get-the-git-infos</id> <goals> <goal>revision</goal> </goals> </execution> </executions> </plugin> --> </plugins> </build> </profile> </profiles> <properties> <dirigible.version> 6.3.24 </dirigible.version> <java.version> 11 </java.version> <spring.boot.version> 2.7.2 </spring.boot.version> <maven.compiler.plugin.version> 3.10.1 </maven.compiler.plugin.version> <maven.compiler.source> 11 </maven.compiler.source> <maven.compiler.target> 11 </maven.compiler.target> <slf4j.version> 1.7.36 </slf4j.version> <logback.version> 1.2.11 </logback.version> <commons.lang3> 3.12.0 </commons.lang3> <git-commit-id-plugin.version> 4.9.10 </git-commit-id-plugin.version> </properties> </project> Eclipse Dirigible version The tutorial is using Eclipse Dirigible version 6.3.24 as highlighted on line 65 . To check for a more recent and stable version go to Eclipse Dirigible Releases . Git Repository For git repositories uncomment the following lines, in order to receive the Commit Id information in the About view: <!-- Note: Uncomment for git repositories, as this plugin would get the last commit id. This is needed for the info in the \"About\" view. --> <!-- <plugin> <groupId>pl.project13.maven</groupId> <artifactId>git-commit-id-plugin</artifactId> <version>${git-commit-id-plugin.version}</version> <executions> <execution> <id>get-the-git-infos</id> <goals> <goal>revision</goal> </goals> </execution> </executions> </plugin> --> Create new folder releng and navigate to it. Create new releng/pom.xml file. Paste the following content: <project xmlns= \"http://maven.apache.org/POM/4.0.0\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation= \"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\" > <modelVersion> 4.0.0 </modelVersion> <parent> <groupId> io.dirigible.custom.stack </groupId> <artifactId> custom-stack-parent </artifactId> <version> 1.0.0-SNAPSHOT </version> <relativePath> ../pom.xml </relativePath> </parent> <name> Custom Stack - Releng - Spring Boot </name> <artifactId> custom-stack-spring-boot </artifactId> <version> 1.0.0-SNAPSHOT </version> <packaging> jar </packaging> <build> <plugins> <plugin> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-maven-plugin </artifactId> <version> ${spring.boot.version} </version> <configuration> <mainClass> io.dirigible.custom.platform.CustomPlatformApplication </mainClass> </configuration> <executions> <execution> <goals> <goal> repackage </goal> </goals> </execution> </executions> </plugin> </plugins> <resources> <resource> <directory> src/main/resources </directory> <filtering> true </filtering> </resource> </resources> </build> <dependencies> <!-- Dirigible --> <dependency> <groupId> org.eclipse.dirigible </groupId> <artifactId> dirigible-server-spring </artifactId> <version> ${dirigible.version} </version> </dependency> <!-- Platform --> <dependency> <groupId> org.slf4j </groupId> <artifactId> slf4j-api </artifactId> <version> ${slf4j.version} </version> <scope> compile </scope> </dependency> <dependency> <groupId> ch.qos.logback </groupId> <artifactId> logback-core </artifactId> <version> ${logback.version} </version> <scope> compile </scope> </dependency> <dependency> <groupId> ch.qos.logback </groupId> <artifactId> logback-classic </artifactId> <version> ${logback.version} </version> <scope> compile </scope> </dependency> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-configuration-processor </artifactId> <optional> true </optional> <version> ${spring.boot.version} </version> </dependency> </dependencies> </project> Create Eclipse Dirigible resources: Navigate to the releng folder. Create src/main/resources/ folder structure and navigate to it. Create dirigible.properties , index.html and index-busy.html files. dirigible.properties static/index.html static/index-busy.html Create releng/src/main/resources/dirigible.properties file. Paste the following content: DIRIGIBLE_PRODUCT_NAME=Custom Platform DIRIGIBLE_PRODUCT_VERSION=${project.version} DIRIGIBLE_PRODUCT_COMMIT_ID=${git.commit.id} DIRIGIBLE_PRODUCT_REPOSITORY=https://github.com/eclipse/dirigible DIRIGIBLE_PRODUCT_TYPE=custom DIRIGIBLE_INSTANCE_NAME=custom-platform-spring-boot DIRIGIBLE_DATABASE_PROVIDER=local DIRIGIBLE_JAVASCRIPT_HANDLER_CLASS_NAME=org.eclipse.dirigible.graalium.handler.GraaliumJavascriptHandler DIRIGIBLE_GRAALIUM_ENABLE_DEBUG=true Environment Variables The properties file will be packaged inside the Custom Stack , and the above environment variables will be set by default. These environment variables could be overridden during Deployment or at Runtime . To learn more about the supported configurations go to Environment Variables . Create static folder and navigate to it. Create releng/src/main/resources/static/index.html file. Paste the following content: <!DOCTYPE html> < html lang = \"en-US\" > < meta charset = \"utf-8\" > < title > Redirecting &hellip; </ title > < link rel = \"canonical\" href = \"/home\" > < script > location = \"/home\" </ script > < meta http-equiv = \"refresh\" content = \"0; url=/home\" > < meta name = \"robots\" content = \"noindex\" > < h1 > Redirecting &hellip; </ h1 > < a href = \"/home\" > Click here if you are not redirected. </ a > </ html > Create static folder and navigate to it. Create releng/src/main/resources/static/index-busy.html file. Paste the following content: <!DOCTYPE HTML> < html lang = \"en\" xmlns = \"http://www.w3.org/1999/xhtml\" ng-app = \"busyPage\" ng-controller = \"BusyController\" > < head > < meta charset = \"utf-8\" > < meta http-equiv = \"X-UA-Compatible\" content = \"IE=edge\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > < link rel = \"icon\" href = \"/services/v4/web/resources/images/favicon.ico\" /> < title > Loading ... </ title > < theme ></ theme > < script type = \"text/javascript\" src = \"/services/v4/js/resources-core/services/loader.js?id=application-view-js\" > </ script > < link type = \"text/css\" rel = \"stylesheet\" href = \"/services/v4/js/resources-core/services/loader.js?id=application-view-css\" /> </ head > < body class = \"fd-scrollbar\" dg-contextmenu = \"contextMenuContent\" > < div style = \"padding-left: 10rem; padding-right: 10rem; margin-top: 3rem;\" > < div class = \"fd-panel fd-panel--fixed\" > < div class = \"fd-panel__header\" > < h4 class = \"fd-panel__title\" > Preparing your Custom Platform environment </ h4 > </ div > </ div > < fd-list > < fd-list-item ng-repeat = \"job in jobs\" > < span fd-object-status status = \"{{job.status}}\" glyph = \"{{job.statusIcon}}\" text = \"{{job.name}}\" ></ span > </ fd-list-item > </ fd-list > < fd-busy-indicator style = \"margin-top: 3rem;\" dg-size = \"l\" ></ fd-busy-indicator > </ div > < script > let busyPage = angular . module ( 'busyPage' , [ 'ideUI' , 'ideView' ]); busyPage . controller ( 'BusyController' , [ '$scope' , '$http' , 'theming' , function ( $scope , $http , theming ) { setInterval ( function () { $http ({ method : 'GET' , url : '/services/v4/healthcheck' }). then ( function ( healthStatus ){ if ( healthStatus . data . status === \"Ready\" ) { window . location = '/home' ; } let jobs = []; for ( const [ key , value ] of Object . entries ( healthStatus . data . jobs . statuses )) { let job = new Object (); job . name = key ; switch ( value ) { case \"Succeeded\" : job . status = \"positive\" ; job . statusIcon = \"sap-icon--message-success\" break ; case \"Failed\" : job . status = \"negative\" ; job . statusIcon = \"sap-icon--message-error\" ; default : job . status = \"informative\" ; job . statusIcon = \"sap-icon--message-information\" break ; } jobs . push ( job ); } $scope . jobs = jobs . sort (( x , y ) => x . name > y . name ? 1 : - 1 ); }), ( function ( e ){ console . error ( \"Error retreiving the health status\" , e ); }); }, 1000 ); }]); </ script > </ body > </ html > (optional) Create Eclipse Dirigible error resources: Navigate to the releng/src/main/resources folder. Create public folder and navigate to it. Create error.html , 403.html and 404.html files. error.html 403.html 404.html Create releng/src/main/resources/public/error/error.html file. Paste the following content: <!DOCTYPE HTML> < html lang = \"en\" xmlns = \"http://www.w3.org/1999/xhtml\" ng-app = \"errorPage\" ng-controller = \"ErrorPageController\" > < head > < meta charset = \"utf-8\" > < meta http-equiv = \"X-UA-Compatible\" content = \"IE=edge\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > < link rel = \"icon\" href = \"/services/v4/web/resources/images/favicon.ico\" /> < title > Custom Platform | Unexpected Error Occurred </ title > < theme ></ theme > < script type = \"text/javascript\" src = \"/services/v4/js/resources-core/services/loader.js?id=application-view-js\" > </ script > < link type = \"text/css\" rel = \"stylesheet\" href = \"/services/v4/js/resources-core/services/loader.js?id=application-view-css\" /> </ head > < body class = \"fd-scrollbar\" dg-contextmenu = \"contextMenuContent\" > < div style = \"height: 600px; width: 100%;\" > < fd-message-page glyph = \"sap-icon--error\" > < fd-message-page-title > Unexpected Error Occurred </ fd-message-page-title > < fd-message-page-subtitle > < b > There was a problem serving the requested page </ b > . < br > Usually this means that an enexpected error happened while processing your request. Here's what you can try next: < br > < br > < i >< b > Reload the page </ b > , the problem may be temporary. If the problem persists, < b > contact us </ b > and we'll help get you on your way. </ i > </ fd-message-page-subtitle > < fd-message-page-actions > < fd-button compact = \"true\" dg-label = \"Reload Page\" dg-type = \"emphasized\" style = \"margin: 0 0.25rem;\" ng-click = \"reloadPage()\" > </ fd-button > < fd-button compact = \"true\" dg-label = \"Contact Support\" ng-click = \"contactSupport()\" ></ fd-button > </ fd-message-page-actions > </ fd-message-page > </ div > < script > let errorPage = angular . module ( 'errorPage' , [ 'ideUI' , 'ideView' ]); errorPage . controller ( 'ErrorPageController' , [ '$scope' , 'theming' , function ( $scope , theming ) { $scope . reloadPage = function () { location . reload (); }; $scope . contactSupport = function () { window . open ( \"https://bugs.dirigible.io\" , \"_blank\" ); }; }]); </ script > </ body > </ html > Create error folder and navigate to it. Create releng/src/main/resources/error/403.html file. Paste the following content: <!DOCTYPE HTML> < html lang = \"en\" xmlns = \"http://www.w3.org/1999/xhtml\" ng-app = \"errorPage\" ng-controller = \"ErrorPageController\" > < head > < meta charset = \"utf-8\" > < meta http-equiv = \"X-UA-Compatible\" content = \"IE=edge\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > < link rel = \"icon\" href = \"/services/v4/web/resources/images/favicon.ico\" /> < title > Custom Platform | Access Denied </ title > < theme ></ theme > < script type = \"text/javascript\" src = \"/services/v4/js/resources-core/services/loader.js?id=application-view-js\" > </ script > < link type = \"text/css\" rel = \"stylesheet\" href = \"/services/v4/js/resources-core/services/loader.js?id=application-view-css\" /> </ head > < body class = \"fd-scrollbar\" dg-contextmenu = \"contextMenuContent\" > < div style = \"height: 600px; width: 100%;\" > < fd-message-page glyph = \"sap-icon--alert\" > < fd-message-page-title > Access Denied </ fd-message-page-title > < fd-message-page-subtitle > < b > The page you're trying to access has resctricted access </ b > . < br > Pleace contact your system administrator for more details. </ fd-message-page-subtitle > </ fd-message-page > </ div > < script > let errorPage = angular . module ( 'errorPage' , [ 'ideUI' , 'ideView' ]); errorPage . controller ( 'ErrorPageController' , [ '$scope' , 'theming' , function ( $scope , theming ) { }]); </ script > </ body > </ html > Create error folder and navigate to it. Create releng/src/main/resources/error/404.html file. Paste the following content: <!DOCTYPE HTML> < html lang = \"en\" xmlns = \"http://www.w3.org/1999/xhtml\" ng-app = \"errorPage\" ng-controller = \"ErrorPageController\" > < head > < meta charset = \"utf-8\" > < meta http-equiv = \"X-UA-Compatible\" content = \"IE=edge\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > < link rel = \"icon\" href = \"/services/v4/web/resources/images/favicon.ico\" /> < title > Custom Platform | Page Not Found </ title > < theme ></ theme > < script type = \"text/javascript\" src = \"/services/v4/js/resources-core/services/loader.js?id=application-view-js\" > </ script > < link type = \"text/css\" rel = \"stylesheet\" href = \"/services/v4/js/resources-core/services/loader.js?id=application-view-css\" /> </ head > < body class = \"fd-scrollbar\" dg-contextmenu = \"contextMenuContent\" > < div style = \"height: 600px; width: 100%;\" > < fd-message-page glyph = \"sap-icon--documents\" > < fd-message-page-title > Page Not Found </ fd-message-page-title > < fd-message-page-subtitle > < b > It looks like you've reached a URL that doesn't exist </ b > . < br > The page you are looking for is no longer here, or never existed in the first place. < br > < br > < i > You can go to the < b > previous page </ b > , or start over from the < b > home page </ b > . </ i > </ fd-message-page-subtitle > < fd-message-page-actions > < fd-button compact = \"true\" dg-label = \"Go Back\" dg-type = \"emphasized\" style = \"margin: 0 0.25rem;\" ng-click = \"goBack()\" > </ fd-button > < fd-button compact = \"true\" dg-label = \"Take Me Home\" ng-click = \"goHome()\" ng-click = \"goHome()\" > </ fd-button > </ fd-message-page-actions > </ fd-message-page > </ div > < script > let errorPage = angular . module ( 'errorPage' , [ 'ideUI' , 'ideView' ]); errorPage . controller ( 'ErrorPageController' , [ '$scope' , 'theming' , function ( $scope , theming ) { $scope . goBack = function () { history . back (); }; $scope . goHome = function () { window . location = \"/home\" ; }; }]); </ script > </ body > </ html > Create Spring Boot files: Navigate to the releng folder. Create application.yaml and CustomPlatformApplication.java files. application.yaml CustomPlatformApplication.java Navigate to the src/main/resources/ folder. Create releng/src/main/resources/application.yaml file. Paste the following content: cxf : path : /services/v4 jaxrs : client : headers : accept : text/plain classes-scan-packages : org.eclipse.dirigible address : http://localhost:8080/services/v4 keycloak : enabled : ${DIRIGIBLE_KEYCLOAK_ENABLED:false} realm : ${DIRIGIBLE_KEYCLOAK_REALM} auth-server-url : ${DIRIGIBLE_KEYCLOAK_AUTH_SERVER_URL} ssl-required : ${DIRIGIBLE_KEYCLOAK_SSL_REQUIRED:external} resource : ${DIRIGIBLE_KEYCLOAK_CLIENT_ID} public-client : true principal-attribute : \"preferred_username\" confidential-port : ${DIRIGIBLE_KEYCLOAK_CONFIDENTIAL_PORT:443} use-resource-role-mappings : true securityConstraints : - securityCollections : - name : Landing Page patterns : [ / , /home , /index.html ] authRoles : [ Everyone ] - securityCollections : - name : Themes patterns : [ /services/v4/core/theme/* , /services/v4/web/resources/* ] - securityCollections : - name : Public Engine Services patterns : [ /public/v4/web/* , /public/v4/js/* , /public/v4/wiki/* , /public/v4/command/* ] - securityCollections : - name : IDE Services patterns : [ /services/v4/ide/* , /websockets/v4/ide/* ] authRoles : [ Developer ] - securityCollections : - name : Core Services patterns : [ /services/v4/core/* , /websockets/v4/core/* ] authRoles : [ Operator ] - securityCollections : - name : Operations Services patterns : [ /services/v4/ops/* , /websockets/v4/ops/* ] authRoles : [ Operator ] - securityCollections : - name : Transport Services patterns : [ /services/v4/transport/* ] authRoles : [ Operator ] Navigate to the src/main folder. Create java/io/dirigible/custom/platform/ and navigate to it. Create releng/src/main/java/io/dirigible/custom/platform/CustomPlatformApplication.java file. Paste the following content: package io.dirigible.custom.platform ; import org.eclipse.dirigible.DirigibleSpringConfiguration ; import org.springframework.boot.SpringApplication ; import org.springframework.boot.autoconfigure.SpringBootApplication ; @SpringBootApplication public class CustomPlatformApplication extends DirigibleSpringConfiguration { public static void main ( String [] args ) { SpringApplication . run ( CustomPlatformApplication . class , args ); } } Build the Custom Platform . Navigate to the root folder of the project (e.g. <my-custom-stack-path>/custom-stack ) . Open the Terminal and execute the following command to build the Custom Platform : mvn clean install Run the Custom Platform . Navigate to the releng/target folder. Open the Terminal and execute the following command to run the Custom Platform : java -jar custom-stack-spring-boot-*.jar Debugging To run in debug mode, execute the following command: java -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=8000 -jar custom-stack-spring-boot-*.jar Go to http://localhost:8080 to access the Custom Stack .","title":"Custom Stack"},{"location":"tutorials/customizations/custom-stack/#custom-stack","text":"This tutorial will guide you through the creation of a custom Eclipse Dirigible stack. Prerequisites JDK 11+ - OpenJDK versions can be found here . Maven 3.5+ - Maven version 3.5.3 can be found here .","title":"Custom Stack"},{"location":"tutorials/customizations/custom-stack/#steps","text":"Create Maven pom.xml files: Create new folder on your machine, for the custom stack (e.g. <my-custom-stack-path>/custom-stack ) . Create pom.xml and releng/pom.xml files. pom.xml releng/pom.xml Create new pom.xml file. Paste the following content: <project xmlns= \"http://maven.apache.org/POM/4.0.0\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation= \"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" > <modelVersion> 4.0.0 </modelVersion> <parent> <groupId> org.sonatype.oss </groupId> <artifactId> oss-parent </artifactId> <version> 7 </version> </parent> <name> Custom Stack - Parent </name> <description> Custom Stack </description> <groupId> io.dirigible.custom.stack </groupId> <artifactId> custom-stack-parent </artifactId> <version> 1.0.0-SNAPSHOT </version> <packaging> pom </packaging> <modules> <module> releng </module> </modules> <profiles> <profile> <id> default </id> <activation> <activeByDefault> true </activeByDefault> </activation> <build> <plugins> <plugin> <groupId> org.apache.maven.plugins </groupId> <artifactId> maven-compiler-plugin </artifactId> <version> ${maven.compiler.plugin.version} </version> <configuration> <source> ${maven.compiler.source} </source> <target> ${maven.compiler.target} </target> <debug> true </debug> <debuglevel> lines,vars,source </debuglevel> </configuration> </plugin> <!-- Note: Uncomment for git repositories, as this plugin would get the last commit id. This is needed for the info in the \"About\" view. --> <!-- <plugin> <groupId>pl.project13.maven</groupId> <artifactId>git-commit-id-plugin</artifactId> <version>${git-commit-id-plugin.version}</version> <executions> <execution> <id>get-the-git-infos</id> <goals> <goal>revision</goal> </goals> </execution> </executions> </plugin> --> </plugins> </build> </profile> </profiles> <properties> <dirigible.version> 6.3.24 </dirigible.version> <java.version> 11 </java.version> <spring.boot.version> 2.7.2 </spring.boot.version> <maven.compiler.plugin.version> 3.10.1 </maven.compiler.plugin.version> <maven.compiler.source> 11 </maven.compiler.source> <maven.compiler.target> 11 </maven.compiler.target> <slf4j.version> 1.7.36 </slf4j.version> <logback.version> 1.2.11 </logback.version> <commons.lang3> 3.12.0 </commons.lang3> <git-commit-id-plugin.version> 4.9.10 </git-commit-id-plugin.version> </properties> </project> Eclipse Dirigible version The tutorial is using Eclipse Dirigible version 6.3.24 as highlighted on line 65 . To check for a more recent and stable version go to Eclipse Dirigible Releases . Git Repository For git repositories uncomment the following lines, in order to receive the Commit Id information in the About view: <!-- Note: Uncomment for git repositories, as this plugin would get the last commit id. This is needed for the info in the \"About\" view. --> <!-- <plugin> <groupId>pl.project13.maven</groupId> <artifactId>git-commit-id-plugin</artifactId> <version>${git-commit-id-plugin.version}</version> <executions> <execution> <id>get-the-git-infos</id> <goals> <goal>revision</goal> </goals> </execution> </executions> </plugin> --> Create new folder releng and navigate to it. Create new releng/pom.xml file. Paste the following content: <project xmlns= \"http://maven.apache.org/POM/4.0.0\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation= \"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\" > <modelVersion> 4.0.0 </modelVersion> <parent> <groupId> io.dirigible.custom.stack </groupId> <artifactId> custom-stack-parent </artifactId> <version> 1.0.0-SNAPSHOT </version> <relativePath> ../pom.xml </relativePath> </parent> <name> Custom Stack - Releng - Spring Boot </name> <artifactId> custom-stack-spring-boot </artifactId> <version> 1.0.0-SNAPSHOT </version> <packaging> jar </packaging> <build> <plugins> <plugin> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-maven-plugin </artifactId> <version> ${spring.boot.version} </version> <configuration> <mainClass> io.dirigible.custom.platform.CustomPlatformApplication </mainClass> </configuration> <executions> <execution> <goals> <goal> repackage </goal> </goals> </execution> </executions> </plugin> </plugins> <resources> <resource> <directory> src/main/resources </directory> <filtering> true </filtering> </resource> </resources> </build> <dependencies> <!-- Dirigible --> <dependency> <groupId> org.eclipse.dirigible </groupId> <artifactId> dirigible-server-spring </artifactId> <version> ${dirigible.version} </version> </dependency> <!-- Platform --> <dependency> <groupId> org.slf4j </groupId> <artifactId> slf4j-api </artifactId> <version> ${slf4j.version} </version> <scope> compile </scope> </dependency> <dependency> <groupId> ch.qos.logback </groupId> <artifactId> logback-core </artifactId> <version> ${logback.version} </version> <scope> compile </scope> </dependency> <dependency> <groupId> ch.qos.logback </groupId> <artifactId> logback-classic </artifactId> <version> ${logback.version} </version> <scope> compile </scope> </dependency> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-configuration-processor </artifactId> <optional> true </optional> <version> ${spring.boot.version} </version> </dependency> </dependencies> </project> Create Eclipse Dirigible resources: Navigate to the releng folder. Create src/main/resources/ folder structure and navigate to it. Create dirigible.properties , index.html and index-busy.html files. dirigible.properties static/index.html static/index-busy.html Create releng/src/main/resources/dirigible.properties file. Paste the following content: DIRIGIBLE_PRODUCT_NAME=Custom Platform DIRIGIBLE_PRODUCT_VERSION=${project.version} DIRIGIBLE_PRODUCT_COMMIT_ID=${git.commit.id} DIRIGIBLE_PRODUCT_REPOSITORY=https://github.com/eclipse/dirigible DIRIGIBLE_PRODUCT_TYPE=custom DIRIGIBLE_INSTANCE_NAME=custom-platform-spring-boot DIRIGIBLE_DATABASE_PROVIDER=local DIRIGIBLE_JAVASCRIPT_HANDLER_CLASS_NAME=org.eclipse.dirigible.graalium.handler.GraaliumJavascriptHandler DIRIGIBLE_GRAALIUM_ENABLE_DEBUG=true Environment Variables The properties file will be packaged inside the Custom Stack , and the above environment variables will be set by default. These environment variables could be overridden during Deployment or at Runtime . To learn more about the supported configurations go to Environment Variables . Create static folder and navigate to it. Create releng/src/main/resources/static/index.html file. Paste the following content: <!DOCTYPE html> < html lang = \"en-US\" > < meta charset = \"utf-8\" > < title > Redirecting &hellip; </ title > < link rel = \"canonical\" href = \"/home\" > < script > location = \"/home\" </ script > < meta http-equiv = \"refresh\" content = \"0; url=/home\" > < meta name = \"robots\" content = \"noindex\" > < h1 > Redirecting &hellip; </ h1 > < a href = \"/home\" > Click here if you are not redirected. </ a > </ html > Create static folder and navigate to it. Create releng/src/main/resources/static/index-busy.html file. Paste the following content: <!DOCTYPE HTML> < html lang = \"en\" xmlns = \"http://www.w3.org/1999/xhtml\" ng-app = \"busyPage\" ng-controller = \"BusyController\" > < head > < meta charset = \"utf-8\" > < meta http-equiv = \"X-UA-Compatible\" content = \"IE=edge\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > < link rel = \"icon\" href = \"/services/v4/web/resources/images/favicon.ico\" /> < title > Loading ... </ title > < theme ></ theme > < script type = \"text/javascript\" src = \"/services/v4/js/resources-core/services/loader.js?id=application-view-js\" > </ script > < link type = \"text/css\" rel = \"stylesheet\" href = \"/services/v4/js/resources-core/services/loader.js?id=application-view-css\" /> </ head > < body class = \"fd-scrollbar\" dg-contextmenu = \"contextMenuContent\" > < div style = \"padding-left: 10rem; padding-right: 10rem; margin-top: 3rem;\" > < div class = \"fd-panel fd-panel--fixed\" > < div class = \"fd-panel__header\" > < h4 class = \"fd-panel__title\" > Preparing your Custom Platform environment </ h4 > </ div > </ div > < fd-list > < fd-list-item ng-repeat = \"job in jobs\" > < span fd-object-status status = \"{{job.status}}\" glyph = \"{{job.statusIcon}}\" text = \"{{job.name}}\" ></ span > </ fd-list-item > </ fd-list > < fd-busy-indicator style = \"margin-top: 3rem;\" dg-size = \"l\" ></ fd-busy-indicator > </ div > < script > let busyPage = angular . module ( 'busyPage' , [ 'ideUI' , 'ideView' ]); busyPage . controller ( 'BusyController' , [ '$scope' , '$http' , 'theming' , function ( $scope , $http , theming ) { setInterval ( function () { $http ({ method : 'GET' , url : '/services/v4/healthcheck' }). then ( function ( healthStatus ){ if ( healthStatus . data . status === \"Ready\" ) { window . location = '/home' ; } let jobs = []; for ( const [ key , value ] of Object . entries ( healthStatus . data . jobs . statuses )) { let job = new Object (); job . name = key ; switch ( value ) { case \"Succeeded\" : job . status = \"positive\" ; job . statusIcon = \"sap-icon--message-success\" break ; case \"Failed\" : job . status = \"negative\" ; job . statusIcon = \"sap-icon--message-error\" ; default : job . status = \"informative\" ; job . statusIcon = \"sap-icon--message-information\" break ; } jobs . push ( job ); } $scope . jobs = jobs . sort (( x , y ) => x . name > y . name ? 1 : - 1 ); }), ( function ( e ){ console . error ( \"Error retreiving the health status\" , e ); }); }, 1000 ); }]); </ script > </ body > </ html > (optional) Create Eclipse Dirigible error resources: Navigate to the releng/src/main/resources folder. Create public folder and navigate to it. Create error.html , 403.html and 404.html files. error.html 403.html 404.html Create releng/src/main/resources/public/error/error.html file. Paste the following content: <!DOCTYPE HTML> < html lang = \"en\" xmlns = \"http://www.w3.org/1999/xhtml\" ng-app = \"errorPage\" ng-controller = \"ErrorPageController\" > < head > < meta charset = \"utf-8\" > < meta http-equiv = \"X-UA-Compatible\" content = \"IE=edge\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > < link rel = \"icon\" href = \"/services/v4/web/resources/images/favicon.ico\" /> < title > Custom Platform | Unexpected Error Occurred </ title > < theme ></ theme > < script type = \"text/javascript\" src = \"/services/v4/js/resources-core/services/loader.js?id=application-view-js\" > </ script > < link type = \"text/css\" rel = \"stylesheet\" href = \"/services/v4/js/resources-core/services/loader.js?id=application-view-css\" /> </ head > < body class = \"fd-scrollbar\" dg-contextmenu = \"contextMenuContent\" > < div style = \"height: 600px; width: 100%;\" > < fd-message-page glyph = \"sap-icon--error\" > < fd-message-page-title > Unexpected Error Occurred </ fd-message-page-title > < fd-message-page-subtitle > < b > There was a problem serving the requested page </ b > . < br > Usually this means that an enexpected error happened while processing your request. Here's what you can try next: < br > < br > < i >< b > Reload the page </ b > , the problem may be temporary. If the problem persists, < b > contact us </ b > and we'll help get you on your way. </ i > </ fd-message-page-subtitle > < fd-message-page-actions > < fd-button compact = \"true\" dg-label = \"Reload Page\" dg-type = \"emphasized\" style = \"margin: 0 0.25rem;\" ng-click = \"reloadPage()\" > </ fd-button > < fd-button compact = \"true\" dg-label = \"Contact Support\" ng-click = \"contactSupport()\" ></ fd-button > </ fd-message-page-actions > </ fd-message-page > </ div > < script > let errorPage = angular . module ( 'errorPage' , [ 'ideUI' , 'ideView' ]); errorPage . controller ( 'ErrorPageController' , [ '$scope' , 'theming' , function ( $scope , theming ) { $scope . reloadPage = function () { location . reload (); }; $scope . contactSupport = function () { window . open ( \"https://bugs.dirigible.io\" , \"_blank\" ); }; }]); </ script > </ body > </ html > Create error folder and navigate to it. Create releng/src/main/resources/error/403.html file. Paste the following content: <!DOCTYPE HTML> < html lang = \"en\" xmlns = \"http://www.w3.org/1999/xhtml\" ng-app = \"errorPage\" ng-controller = \"ErrorPageController\" > < head > < meta charset = \"utf-8\" > < meta http-equiv = \"X-UA-Compatible\" content = \"IE=edge\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > < link rel = \"icon\" href = \"/services/v4/web/resources/images/favicon.ico\" /> < title > Custom Platform | Access Denied </ title > < theme ></ theme > < script type = \"text/javascript\" src = \"/services/v4/js/resources-core/services/loader.js?id=application-view-js\" > </ script > < link type = \"text/css\" rel = \"stylesheet\" href = \"/services/v4/js/resources-core/services/loader.js?id=application-view-css\" /> </ head > < body class = \"fd-scrollbar\" dg-contextmenu = \"contextMenuContent\" > < div style = \"height: 600px; width: 100%;\" > < fd-message-page glyph = \"sap-icon--alert\" > < fd-message-page-title > Access Denied </ fd-message-page-title > < fd-message-page-subtitle > < b > The page you're trying to access has resctricted access </ b > . < br > Pleace contact your system administrator for more details. </ fd-message-page-subtitle > </ fd-message-page > </ div > < script > let errorPage = angular . module ( 'errorPage' , [ 'ideUI' , 'ideView' ]); errorPage . controller ( 'ErrorPageController' , [ '$scope' , 'theming' , function ( $scope , theming ) { }]); </ script > </ body > </ html > Create error folder and navigate to it. Create releng/src/main/resources/error/404.html file. Paste the following content: <!DOCTYPE HTML> < html lang = \"en\" xmlns = \"http://www.w3.org/1999/xhtml\" ng-app = \"errorPage\" ng-controller = \"ErrorPageController\" > < head > < meta charset = \"utf-8\" > < meta http-equiv = \"X-UA-Compatible\" content = \"IE=edge\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > < link rel = \"icon\" href = \"/services/v4/web/resources/images/favicon.ico\" /> < title > Custom Platform | Page Not Found </ title > < theme ></ theme > < script type = \"text/javascript\" src = \"/services/v4/js/resources-core/services/loader.js?id=application-view-js\" > </ script > < link type = \"text/css\" rel = \"stylesheet\" href = \"/services/v4/js/resources-core/services/loader.js?id=application-view-css\" /> </ head > < body class = \"fd-scrollbar\" dg-contextmenu = \"contextMenuContent\" > < div style = \"height: 600px; width: 100%;\" > < fd-message-page glyph = \"sap-icon--documents\" > < fd-message-page-title > Page Not Found </ fd-message-page-title > < fd-message-page-subtitle > < b > It looks like you've reached a URL that doesn't exist </ b > . < br > The page you are looking for is no longer here, or never existed in the first place. < br > < br > < i > You can go to the < b > previous page </ b > , or start over from the < b > home page </ b > . </ i > </ fd-message-page-subtitle > < fd-message-page-actions > < fd-button compact = \"true\" dg-label = \"Go Back\" dg-type = \"emphasized\" style = \"margin: 0 0.25rem;\" ng-click = \"goBack()\" > </ fd-button > < fd-button compact = \"true\" dg-label = \"Take Me Home\" ng-click = \"goHome()\" ng-click = \"goHome()\" > </ fd-button > </ fd-message-page-actions > </ fd-message-page > </ div > < script > let errorPage = angular . module ( 'errorPage' , [ 'ideUI' , 'ideView' ]); errorPage . controller ( 'ErrorPageController' , [ '$scope' , 'theming' , function ( $scope , theming ) { $scope . goBack = function () { history . back (); }; $scope . goHome = function () { window . location = \"/home\" ; }; }]); </ script > </ body > </ html > Create Spring Boot files: Navigate to the releng folder. Create application.yaml and CustomPlatformApplication.java files. application.yaml CustomPlatformApplication.java Navigate to the src/main/resources/ folder. Create releng/src/main/resources/application.yaml file. Paste the following content: cxf : path : /services/v4 jaxrs : client : headers : accept : text/plain classes-scan-packages : org.eclipse.dirigible address : http://localhost:8080/services/v4 keycloak : enabled : ${DIRIGIBLE_KEYCLOAK_ENABLED:false} realm : ${DIRIGIBLE_KEYCLOAK_REALM} auth-server-url : ${DIRIGIBLE_KEYCLOAK_AUTH_SERVER_URL} ssl-required : ${DIRIGIBLE_KEYCLOAK_SSL_REQUIRED:external} resource : ${DIRIGIBLE_KEYCLOAK_CLIENT_ID} public-client : true principal-attribute : \"preferred_username\" confidential-port : ${DIRIGIBLE_KEYCLOAK_CONFIDENTIAL_PORT:443} use-resource-role-mappings : true securityConstraints : - securityCollections : - name : Landing Page patterns : [ / , /home , /index.html ] authRoles : [ Everyone ] - securityCollections : - name : Themes patterns : [ /services/v4/core/theme/* , /services/v4/web/resources/* ] - securityCollections : - name : Public Engine Services patterns : [ /public/v4/web/* , /public/v4/js/* , /public/v4/wiki/* , /public/v4/command/* ] - securityCollections : - name : IDE Services patterns : [ /services/v4/ide/* , /websockets/v4/ide/* ] authRoles : [ Developer ] - securityCollections : - name : Core Services patterns : [ /services/v4/core/* , /websockets/v4/core/* ] authRoles : [ Operator ] - securityCollections : - name : Operations Services patterns : [ /services/v4/ops/* , /websockets/v4/ops/* ] authRoles : [ Operator ] - securityCollections : - name : Transport Services patterns : [ /services/v4/transport/* ] authRoles : [ Operator ] Navigate to the src/main folder. Create java/io/dirigible/custom/platform/ and navigate to it. Create releng/src/main/java/io/dirigible/custom/platform/CustomPlatformApplication.java file. Paste the following content: package io.dirigible.custom.platform ; import org.eclipse.dirigible.DirigibleSpringConfiguration ; import org.springframework.boot.SpringApplication ; import org.springframework.boot.autoconfigure.SpringBootApplication ; @SpringBootApplication public class CustomPlatformApplication extends DirigibleSpringConfiguration { public static void main ( String [] args ) { SpringApplication . run ( CustomPlatformApplication . class , args ); } } Build the Custom Platform . Navigate to the root folder of the project (e.g. <my-custom-stack-path>/custom-stack ) . Open the Terminal and execute the following command to build the Custom Platform : mvn clean install Run the Custom Platform . Navigate to the releng/target folder. Open the Terminal and execute the following command to run the Custom Platform : java -jar custom-stack-spring-boot-*.jar Debugging To run in debug mode, execute the following command: java -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=8000 -jar custom-stack-spring-boot-*.jar Go to http://localhost:8080 to access the Custom Stack .","title":"Steps"},{"location":"tutorials/customizations/custom-stack/branding/","text":"Branding This tutorial will guide you through the process of rebranding of Eclipse Dirigible Custom Stack. Prerequisites This tutorial is assuming, that you've successfully completed the Custom Stack tutorial. Steps Create Maven Modules: Navigate to the root folder of the custom stack (e.g. <my-custom-stack-path>/custom-stack ) . Create modules folder and navigate to it. Create pom.xml , all/pom.xml and branding/pom.xml files. pom.xml all/pom.xml branding/pom.xml Create new modules/pom.xml file. Paste the following content: <project xmlns= \"http://maven.apache.org/POM/4.0.0\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation= \"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" > <modelVersion> 4.0.0 </modelVersion> <parent> <groupId> io.dirigible.custom.stack </groupId> <artifactId> custom-stack-parent </artifactId> <version> 1.0.0-SNAPSHOT </version> <relativePath> ../pom.xml </relativePath> </parent> <name> Custom Stack - Modules - Parent </name> <artifactId> custom-stack-modules-parent </artifactId> <packaging> pom </packaging> <modules> <module> all </module> <module> branding </module> </modules> </project> Create new folder all and navigate to it. Create new modules/all/pom.xml file. Paste the following content: <project xmlns= \"http://maven.apache.org/POM/4.0.0\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation= \"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" > <modelVersion> 4.0.0 </modelVersion> <parent> <groupId> io.dirigible.custom.stack </groupId> <artifactId> custom-stack-modules-parent </artifactId> <version> 1.0.0-SNAPSHOT </version> <relativePath> ../pom.xml </relativePath> </parent> <name> Custom Stack - Modules - All </name> <artifactId> custom-stack-modules-all </artifactId> <packaging> jar </packaging> <dependencies> <dependency> <groupId> io.dirigible.custom.stack </groupId> <artifactId> custom-stack-modules-branding </artifactId> <version> 1.0.0-SNAPSHOT </version> </dependency> </dependencies> </project> Create new folder branding and navigate to it. Create new modules/branding/pom.xml file. Paste the following content: <project xmlns= \"http://maven.apache.org/POM/4.0.0\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation= \"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" > <modelVersion> 4.0.0 </modelVersion> <parent> <groupId> io.dirigible.custom.stack </groupId> <artifactId> custom-stack-modules-parent </artifactId> <version> 1.0.0-SNAPSHOT </version> <relativePath> ../pom.xml </relativePath> </parent> <name> Custom Stack - Modules - Branding </name> <artifactId> custom-stack-modules-branding </artifactId> <packaging> jar </packaging> </project> Create Branding resources: Navigate to the branding folder. Create src/main/resources/META-INF/dirigible/ide-branding/ folder structure and navigate to it. Create branding.js and custom-stack.svg files. branding.js custom-stack.svg Create new modules/branding/src/main/resources/META-INF/dirigible/ide-branding/branding.js file. Paste the following content: const brandingInfo = { name : 'Custom Stack' , brand : 'Custom Stack' , brandUrl : 'https://www.dirigible.io' , icons : { faviconIco : '/services/v4/web/ide-branding/favicon.ico' , favicon32 : '/services/v4/web/ide-branding/favicon-32x32.png' , favicon16 : '/services/v4/web/ide-branding/favicon-16x16.png' , }, logo : '/services/v4/web/ide-branding/custom-stack.svg' }; Favicons For the sake of simplicity, the favicon files were omitted. Create new modules/branding/src/main/resources/META-INF/dirigible/ide-branding/custom-stack.svg file. Paste the following content: <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?> <svg style= \"filter: invert(100%);\" width= \"24\" height= \"24\" viewBox= \"0 0 6.3499999 6.3500002\" version= \"1.1\" id= \"svg5\" xmlns= \"http://www.w3.org/2000/svg\" xmlns:svg= \"http://www.w3.org/2000/svg\" > <defs id= \"defs2\" /> <g id= \"layer1\" transform= \"matrix(1.0590909,0,0,1.0590909,-0.18761367,-0.18761367)\" > <path id= \"path1074\" style= \"fill-opacity:1;stroke:none;stroke-width:2.8;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\" d= \"M 12,1 A 11,11 0 0 0 1,12 11,11 0 0 0 12,23 11,11 0 0 0 23,12 11,11 0 0 0 12,1 Z m -0.101562,4.3378906 c 0.955078,0 1.796875,0.15625 2.523437,0.4667969 0.732422,0.3046875 1.294922,0.7558594 1.6875,1.3535156 0.392578,0.5976562 0.603516,1.2734376 0.632813,2.0292969 L 15.107422,9.3105469 C 15.019531,8.4960938 14.720703,7.8808594 14.210938,7.4648438 13.707031,7.0488281 12.958984,6.8417969 11.96875,6.8417969 c -1.03125,0 -1.783203,0.1894531 -2.2578125,0.5703125 -0.46875,0.375 -0.703125,0.8300781 -0.703125,1.3632812 0,0.4628906 0.1660156,0.84375 0.5,1.1425782 0.328125,0.2988282 1.1835935,0.6054692 2.5664065,0.9218752 1.388672,0.310547 2.341797,0.583984 2.857422,0.818359 0.75,0.345703 1.302734,0.785156 1.660156,1.318359 0.357422,0.527344 0.537109,1.136719 0.537109,1.828126 0,0.685546 -0.197265,1.332031 -0.589844,1.941406 -0.392578,0.603515 -0.957031,1.074219 -1.695312,1.414062 -0.732422,0.333985 -1.558594,0.501953 -2.478516,0.501953 -1.166015,0 -2.144531,-0.169922 -2.9355465,-0.509765 C 8.6445313,17.8125 8.0253906,17.302734 7.5742188,16.623047 7.1289063,15.9375 6.8945312,15.164062 6.8710938,14.302734 l 1.609375,-0.140625 c 0.076172,0.644532 0.2519531,1.173829 0.5273437,1.589844 0.28125,0.410156 0.7148438,0.744141 1.3007815,1.001953 0.585937,0.251953 1.24414,0.378906 1.976562,0.378906 0.650391,0 1.22461,-0.09766 1.722656,-0.291015 0.498047,-0.193359 0.867188,-0.457031 1.107422,-0.791016 0.246094,-0.339843 0.369141,-0.707031 0.369141,-1.105469 0,-0.404296 -0.117188,-0.755859 -0.351563,-1.054687 C 14.898438,13.585938 14.511719,13.330078 13.972656,13.125 13.626953,12.990234 12.863281,12.783203 11.679688,12.501953 10.496094,12.214844 9.6660156,11.945312 9.1914062,11.693359 8.5761719,11.371094 8.1171875,10.972656 7.8125,10.498047 7.5136719,10.017578 7.3632812,9.4804687 7.3632812,8.8886719 c 10e-8,-0.6503906 0.1855469,-1.2558594 0.5546876,-1.8183594 0.3691406,-0.5683593 0.9082031,-1 1.6171874,-1.2929687 C 10.244141,5.484375 11.03125,5.3378906 11.898438,5.3378906 Z\" transform= \"scale(0.26458334)\" /> </g> </svg> Add Modules Dependency: Navigate to the releng folder. Open the pom.xml file. Make the following changes: Add Modules Dependency Exclude Default Branding Final pom.xml Navigate to the <dependencies> section. Add the following dependency: <!-- Custom Stack Modules --> <dependency> <groupId> io.dirigible.custom.stack </groupId> <artifactId> custom-stack-modules-all </artifactId> <version> 1.0.0-SNAPSHOT </version> </dependency> Navigate to the <dependencies> section. Edit the dirigible-server-spring dependency: <!-- Dirigible --> <dependency> <groupId> org.eclipse.dirigible </groupId> <artifactId> dirigible-server-spring </artifactId> <version> ${dirigible.version} </version> <exclusions> <exclusion> <groupId> org.eclipse.dirigible </groupId> <artifactId> dirigible-ide-ui-branding </artifactId> </exclusion> </exclusions> </dependency> <project xmlns= \"http://maven.apache.org/POM/4.0.0\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation= \"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/ maven-v4_0_0.xsd\" > <modelVersion> 4.0.0 </modelVersion> <parent> <groupId> io.dirigible.custom.stack </groupId> <artifactId> custom-stack-parent </artifactId> <version> 1.0.0-SNAPSHOT </version> <relativePath> ../pom.xml </relativePath> </parent> <name> Custom Stack - Releng - Spring Boot </name> <artifactId> custom-stack-spring-boot </artifactId> <version> 1.0.0-SNAPSHOT </version> <packaging> jar </packaging> <build> <plugins> <plugin> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-maven-plugin </artifactId> <version> ${spring.boot.version} </version> <configuration> <mainClass> io.dirigible.custom.platform.CustomPlatformApplication </mainClass> </configuration> <executions> <execution> <goals> <goal> repackage </goal> </goals> </execution> </executions> </plugin> </plugins> <resources> <resource> <directory> src/main/resources </directory> <filtering> true </filtering> </resource> </resources> </build> <dependencies> <!-- Custom Stack Modules --> <dependency> <groupId> io.dirigible.custom.stack </groupId> <artifactId> custom-stack-modules-all </artifactId> <version> 1.0.0-SNAPSHOT </version> </dependency> <!-- Dirigible --> <dependency> <groupId> org.eclipse.dirigible </groupId> <artifactId> dirigible-server-spring </artifactId> <version> ${dirigible.version} </version> <exclusions> <exclusion> <groupId> org.eclipse.dirigible </groupId> <artifactId> dirigible-ide-ui-branding </artifactId> </exclusion> </exclusions> </dependency> <!-- Platform --> <dependency> <groupId> org.slf4j </groupId> <artifactId> slf4j-api </artifactId> <version> ${slf4j.version} </version> <scope> compile </scope> </dependency> <dependency> <groupId> ch.qos.logback </groupId> <artifactId> logback-core </artifactId> <version> ${logback.version} </version> <scope> compile </scope> </dependency> <dependency> <groupId> ch.qos.logback </groupId> <artifactId> logback-classic </artifactId> <version> ${logback.version} </version> <scope> compile </scope> </dependency> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-configuration-processor </artifactId> <optional> true </optional> <version> ${spring.boot.version} </version> </dependency> </dependencies> </project> Build the Custom Platform . Navigate to the root folder of the project (e.g. <my-custom-stack-path>/custom-stack ) . Open the Terminal and execute the following command to build the Custom Platform : mvn clean install Run the Custom Platform . Navigate to the releng/target folder. Open the Terminal and execute the following command to run the Custom Platform : java -jar custom-stack-spring-boot-*.jar Debugging To run in debug mode, execute the following command: java -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=8000 -jar custom-stack-spring-boot-*.jar Go to http://localhost:8080 to access the Custom Stack .","title":"Branding"},{"location":"tutorials/customizations/custom-stack/branding/#branding","text":"This tutorial will guide you through the process of rebranding of Eclipse Dirigible Custom Stack. Prerequisites This tutorial is assuming, that you've successfully completed the Custom Stack tutorial.","title":"Branding"},{"location":"tutorials/customizations/custom-stack/branding/#steps","text":"Create Maven Modules: Navigate to the root folder of the custom stack (e.g. <my-custom-stack-path>/custom-stack ) . Create modules folder and navigate to it. Create pom.xml , all/pom.xml and branding/pom.xml files. pom.xml all/pom.xml branding/pom.xml Create new modules/pom.xml file. Paste the following content: <project xmlns= \"http://maven.apache.org/POM/4.0.0\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation= \"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" > <modelVersion> 4.0.0 </modelVersion> <parent> <groupId> io.dirigible.custom.stack </groupId> <artifactId> custom-stack-parent </artifactId> <version> 1.0.0-SNAPSHOT </version> <relativePath> ../pom.xml </relativePath> </parent> <name> Custom Stack - Modules - Parent </name> <artifactId> custom-stack-modules-parent </artifactId> <packaging> pom </packaging> <modules> <module> all </module> <module> branding </module> </modules> </project> Create new folder all and navigate to it. Create new modules/all/pom.xml file. Paste the following content: <project xmlns= \"http://maven.apache.org/POM/4.0.0\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation= \"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" > <modelVersion> 4.0.0 </modelVersion> <parent> <groupId> io.dirigible.custom.stack </groupId> <artifactId> custom-stack-modules-parent </artifactId> <version> 1.0.0-SNAPSHOT </version> <relativePath> ../pom.xml </relativePath> </parent> <name> Custom Stack - Modules - All </name> <artifactId> custom-stack-modules-all </artifactId> <packaging> jar </packaging> <dependencies> <dependency> <groupId> io.dirigible.custom.stack </groupId> <artifactId> custom-stack-modules-branding </artifactId> <version> 1.0.0-SNAPSHOT </version> </dependency> </dependencies> </project> Create new folder branding and navigate to it. Create new modules/branding/pom.xml file. Paste the following content: <project xmlns= \"http://maven.apache.org/POM/4.0.0\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation= \"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" > <modelVersion> 4.0.0 </modelVersion> <parent> <groupId> io.dirigible.custom.stack </groupId> <artifactId> custom-stack-modules-parent </artifactId> <version> 1.0.0-SNAPSHOT </version> <relativePath> ../pom.xml </relativePath> </parent> <name> Custom Stack - Modules - Branding </name> <artifactId> custom-stack-modules-branding </artifactId> <packaging> jar </packaging> </project> Create Branding resources: Navigate to the branding folder. Create src/main/resources/META-INF/dirigible/ide-branding/ folder structure and navigate to it. Create branding.js and custom-stack.svg files. branding.js custom-stack.svg Create new modules/branding/src/main/resources/META-INF/dirigible/ide-branding/branding.js file. Paste the following content: const brandingInfo = { name : 'Custom Stack' , brand : 'Custom Stack' , brandUrl : 'https://www.dirigible.io' , icons : { faviconIco : '/services/v4/web/ide-branding/favicon.ico' , favicon32 : '/services/v4/web/ide-branding/favicon-32x32.png' , favicon16 : '/services/v4/web/ide-branding/favicon-16x16.png' , }, logo : '/services/v4/web/ide-branding/custom-stack.svg' }; Favicons For the sake of simplicity, the favicon files were omitted. Create new modules/branding/src/main/resources/META-INF/dirigible/ide-branding/custom-stack.svg file. Paste the following content: <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?> <svg style= \"filter: invert(100%);\" width= \"24\" height= \"24\" viewBox= \"0 0 6.3499999 6.3500002\" version= \"1.1\" id= \"svg5\" xmlns= \"http://www.w3.org/2000/svg\" xmlns:svg= \"http://www.w3.org/2000/svg\" > <defs id= \"defs2\" /> <g id= \"layer1\" transform= \"matrix(1.0590909,0,0,1.0590909,-0.18761367,-0.18761367)\" > <path id= \"path1074\" style= \"fill-opacity:1;stroke:none;stroke-width:2.8;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\" d= \"M 12,1 A 11,11 0 0 0 1,12 11,11 0 0 0 12,23 11,11 0 0 0 23,12 11,11 0 0 0 12,1 Z m -0.101562,4.3378906 c 0.955078,0 1.796875,0.15625 2.523437,0.4667969 0.732422,0.3046875 1.294922,0.7558594 1.6875,1.3535156 0.392578,0.5976562 0.603516,1.2734376 0.632813,2.0292969 L 15.107422,9.3105469 C 15.019531,8.4960938 14.720703,7.8808594 14.210938,7.4648438 13.707031,7.0488281 12.958984,6.8417969 11.96875,6.8417969 c -1.03125,0 -1.783203,0.1894531 -2.2578125,0.5703125 -0.46875,0.375 -0.703125,0.8300781 -0.703125,1.3632812 0,0.4628906 0.1660156,0.84375 0.5,1.1425782 0.328125,0.2988282 1.1835935,0.6054692 2.5664065,0.9218752 1.388672,0.310547 2.341797,0.583984 2.857422,0.818359 0.75,0.345703 1.302734,0.785156 1.660156,1.318359 0.357422,0.527344 0.537109,1.136719 0.537109,1.828126 0,0.685546 -0.197265,1.332031 -0.589844,1.941406 -0.392578,0.603515 -0.957031,1.074219 -1.695312,1.414062 -0.732422,0.333985 -1.558594,0.501953 -2.478516,0.501953 -1.166015,0 -2.144531,-0.169922 -2.9355465,-0.509765 C 8.6445313,17.8125 8.0253906,17.302734 7.5742188,16.623047 7.1289063,15.9375 6.8945312,15.164062 6.8710938,14.302734 l 1.609375,-0.140625 c 0.076172,0.644532 0.2519531,1.173829 0.5273437,1.589844 0.28125,0.410156 0.7148438,0.744141 1.3007815,1.001953 0.585937,0.251953 1.24414,0.378906 1.976562,0.378906 0.650391,0 1.22461,-0.09766 1.722656,-0.291015 0.498047,-0.193359 0.867188,-0.457031 1.107422,-0.791016 0.246094,-0.339843 0.369141,-0.707031 0.369141,-1.105469 0,-0.404296 -0.117188,-0.755859 -0.351563,-1.054687 C 14.898438,13.585938 14.511719,13.330078 13.972656,13.125 13.626953,12.990234 12.863281,12.783203 11.679688,12.501953 10.496094,12.214844 9.6660156,11.945312 9.1914062,11.693359 8.5761719,11.371094 8.1171875,10.972656 7.8125,10.498047 7.5136719,10.017578 7.3632812,9.4804687 7.3632812,8.8886719 c 10e-8,-0.6503906 0.1855469,-1.2558594 0.5546876,-1.8183594 0.3691406,-0.5683593 0.9082031,-1 1.6171874,-1.2929687 C 10.244141,5.484375 11.03125,5.3378906 11.898438,5.3378906 Z\" transform= \"scale(0.26458334)\" /> </g> </svg> Add Modules Dependency: Navigate to the releng folder. Open the pom.xml file. Make the following changes: Add Modules Dependency Exclude Default Branding Final pom.xml Navigate to the <dependencies> section. Add the following dependency: <!-- Custom Stack Modules --> <dependency> <groupId> io.dirigible.custom.stack </groupId> <artifactId> custom-stack-modules-all </artifactId> <version> 1.0.0-SNAPSHOT </version> </dependency> Navigate to the <dependencies> section. Edit the dirigible-server-spring dependency: <!-- Dirigible --> <dependency> <groupId> org.eclipse.dirigible </groupId> <artifactId> dirigible-server-spring </artifactId> <version> ${dirigible.version} </version> <exclusions> <exclusion> <groupId> org.eclipse.dirigible </groupId> <artifactId> dirigible-ide-ui-branding </artifactId> </exclusion> </exclusions> </dependency> <project xmlns= \"http://maven.apache.org/POM/4.0.0\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation= \"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/ maven-v4_0_0.xsd\" > <modelVersion> 4.0.0 </modelVersion> <parent> <groupId> io.dirigible.custom.stack </groupId> <artifactId> custom-stack-parent </artifactId> <version> 1.0.0-SNAPSHOT </version> <relativePath> ../pom.xml </relativePath> </parent> <name> Custom Stack - Releng - Spring Boot </name> <artifactId> custom-stack-spring-boot </artifactId> <version> 1.0.0-SNAPSHOT </version> <packaging> jar </packaging> <build> <plugins> <plugin> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-maven-plugin </artifactId> <version> ${spring.boot.version} </version> <configuration> <mainClass> io.dirigible.custom.platform.CustomPlatformApplication </mainClass> </configuration> <executions> <execution> <goals> <goal> repackage </goal> </goals> </execution> </executions> </plugin> </plugins> <resources> <resource> <directory> src/main/resources </directory> <filtering> true </filtering> </resource> </resources> </build> <dependencies> <!-- Custom Stack Modules --> <dependency> <groupId> io.dirigible.custom.stack </groupId> <artifactId> custom-stack-modules-all </artifactId> <version> 1.0.0-SNAPSHOT </version> </dependency> <!-- Dirigible --> <dependency> <groupId> org.eclipse.dirigible </groupId> <artifactId> dirigible-server-spring </artifactId> <version> ${dirigible.version} </version> <exclusions> <exclusion> <groupId> org.eclipse.dirigible </groupId> <artifactId> dirigible-ide-ui-branding </artifactId> </exclusion> </exclusions> </dependency> <!-- Platform --> <dependency> <groupId> org.slf4j </groupId> <artifactId> slf4j-api </artifactId> <version> ${slf4j.version} </version> <scope> compile </scope> </dependency> <dependency> <groupId> ch.qos.logback </groupId> <artifactId> logback-core </artifactId> <version> ${logback.version} </version> <scope> compile </scope> </dependency> <dependency> <groupId> ch.qos.logback </groupId> <artifactId> logback-classic </artifactId> <version> ${logback.version} </version> <scope> compile </scope> </dependency> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-configuration-processor </artifactId> <optional> true </optional> <version> ${spring.boot.version} </version> </dependency> </dependencies> </project> Build the Custom Platform . Navigate to the root folder of the project (e.g. <my-custom-stack-path>/custom-stack ) . Open the Terminal and execute the following command to build the Custom Platform : mvn clean install Run the Custom Platform . Navigate to the releng/target folder. Open the Terminal and execute the following command to run the Custom Platform : java -jar custom-stack-spring-boot-*.jar Debugging To run in debug mode, execute the following command: java -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=8000 -jar custom-stack-spring-boot-*.jar Go to http://localhost:8080 to access the Custom Stack .","title":"Steps"},{"location":"tutorials/customizations/custom-stack/dependency/","text":"Dependency This tutorial will guide you through the process of adding external Maven dependency and using it in the Eclipse Dirigible Custom Stack. Prerequisites This tutorial is assuming, that you've successfully completed the following tutorials: Custom Stack . (optional) Branding . Steps Add External Dependency: Navigate to the root folder of the custom stack (e.g. <my-custom-stack-path>/custom-stack ) . Navigate to the releng folder. Open the pom.xml file. Make the following changes: Add External Dependency Final pom.xml Navigate to the <dependencies> section. Add the following dependency: <dependency> <groupId> uk.org.okapibarcode </groupId> <artifactId> okapibarcode </artifactId> <version> 0.3.3 </version> </dependency> <project xmlns= \"http://maven.apache.org/POM/4.0.0\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation= \"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\" > <modelVersion> 4.0.0 </modelVersion> <parent> <groupId> io.dirigible.custom.stack </groupId> <artifactId> custom-stack-parent </artifactId> <version> 1.0.0-SNAPSHOT </version> <relativePath> ../pom.xml </relativePath> </parent> <name> Custom Stack - Releng - Spring Boot </name> <artifactId> custom-stack-spring-boot </artifactId> <version> 1.0.0-SNAPSHOT </version> <packaging> jar </packaging> <build> <plugins> <plugin> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-maven-plugin </artifactId> <version> ${spring.boot.version} </version> <configuration> <mainClass> io.dirigible.custom.platform.CustomPlatformApplication </mainClass> </configuration> <executions> <execution> <goals> <goal> repackage </goal> </goals> </execution> </executions> </plugin> </plugins> <resources> <resource> <directory> src/main/resources </directory> <filtering> true </filtering> </resource> </resources> </build> <dependencies> <!-- Custom Stack Modules --> <dependency> <groupId> io.dirigible.custom.stack </groupId> <artifactId> custom-stack-modules-all </artifactId> <version> 1.0.0-SNAPSHOT </version> </dependency> <dependency> <groupId> uk.org.okapibarcode </groupId> <artifactId> okapibarcode </artifactId> <version> 0.3.3 </version> </dependency> <!-- Dirigible --> <dependency> <groupId> org.eclipse.dirigible </groupId> <artifactId> dirigible-server-spring </artifactId> <version> ${dirigible.version} </version> <exclusions> <exclusion> <groupId> org.eclipse.dirigible </groupId> <artifactId> dirigible-ide-ui-branding </artifactId> </exclusion> </exclusions> </dependency> <!-- Platform --> <dependency> <groupId> org.slf4j </groupId> <artifactId> slf4j-api </artifactId> <version> ${slf4j.version} </version> <scope> compile </scope> </dependency> <dependency> <groupId> ch.qos.logback </groupId> <artifactId> logback-core </artifactId> <version> ${logback.version} </version> <scope> compile </scope> </dependency> <dependency> <groupId> ch.qos.logback </groupId> <artifactId> logback-classic </artifactId> <version> ${logback.version} </version> <scope> compile </scope> </dependency> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-configuration-processor </artifactId> <optional> true </optional> <version> ${spring.boot.version} </version> </dependency> </dependencies> </project> Build the Custom Platform . Navigate to the root folder of the project (e.g. <my-custom-stack-path>/custom-stack ) . Open the Terminal and execute the following command to build the Custom Platform : mvn clean install Run the Custom Platform . Navigate to the releng/target folder. Open the Terminal and execute the following command to run the Custom Platform : java -jar custom-stack-spring-boot-*.jar Debugging To run in debug mode, execute the following command: java -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=8000 -jar custom-stack-spring-boot-*.jar Go to http://localhost:8080 to access the Custom Stack . Test the changes. Create a project named sample-custom-stack . Right click on the sample-custom-stack project and select New \u2192 JavaScript CJS Service . Enter barcode.js for the name of the JavaScript Service. Replace the content with the following code: var response = require ( \"http/v4/response\" ); let barcode = new Packages . uk . org . okapibarcode . backend . Code128 (); barcode . setFontName ( \"Monospaced\" ); barcode . setFontSize ( 16 ); barcode . setContent ( \"123456789\" ); let image = new java . awt . image . BufferedImage ( barcode . getWidth (), barcode . getHeight (), java . awt . image . BufferedImage . TYPE_BYTE_GRAY ); let g2d = image . createGraphics (); let renderer = new Packages . uk . org . okapibarcode . output . Java2DRenderer ( g2d , 1 , java . awt . Color . WHITE , java . awt . Color . BLACK ); renderer . render ( barcode ); let file = new java . io . File ( \"code128.png\" ); javax . imageio . ImageIO . write ( image , \"png\" , file ); let bytes = org . apache . commons . io . FileUtils . readFileToByteArray ( file ); response . write ( bytes ); response . flush (); response . close (); Access to Packages Java classes are accessed by Fully Qualified Name (FQN). For classes that are not packaged in java , com or org packages, the Packages object should be used. Save the changes. Open the Preview view to see the result.","title":"Dependency"},{"location":"tutorials/customizations/custom-stack/dependency/#dependency","text":"This tutorial will guide you through the process of adding external Maven dependency and using it in the Eclipse Dirigible Custom Stack. Prerequisites This tutorial is assuming, that you've successfully completed the following tutorials: Custom Stack . (optional) Branding .","title":"Dependency"},{"location":"tutorials/customizations/custom-stack/dependency/#steps","text":"Add External Dependency: Navigate to the root folder of the custom stack (e.g. <my-custom-stack-path>/custom-stack ) . Navigate to the releng folder. Open the pom.xml file. Make the following changes: Add External Dependency Final pom.xml Navigate to the <dependencies> section. Add the following dependency: <dependency> <groupId> uk.org.okapibarcode </groupId> <artifactId> okapibarcode </artifactId> <version> 0.3.3 </version> </dependency> <project xmlns= \"http://maven.apache.org/POM/4.0.0\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation= \"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\" > <modelVersion> 4.0.0 </modelVersion> <parent> <groupId> io.dirigible.custom.stack </groupId> <artifactId> custom-stack-parent </artifactId> <version> 1.0.0-SNAPSHOT </version> <relativePath> ../pom.xml </relativePath> </parent> <name> Custom Stack - Releng - Spring Boot </name> <artifactId> custom-stack-spring-boot </artifactId> <version> 1.0.0-SNAPSHOT </version> <packaging> jar </packaging> <build> <plugins> <plugin> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-maven-plugin </artifactId> <version> ${spring.boot.version} </version> <configuration> <mainClass> io.dirigible.custom.platform.CustomPlatformApplication </mainClass> </configuration> <executions> <execution> <goals> <goal> repackage </goal> </goals> </execution> </executions> </plugin> </plugins> <resources> <resource> <directory> src/main/resources </directory> <filtering> true </filtering> </resource> </resources> </build> <dependencies> <!-- Custom Stack Modules --> <dependency> <groupId> io.dirigible.custom.stack </groupId> <artifactId> custom-stack-modules-all </artifactId> <version> 1.0.0-SNAPSHOT </version> </dependency> <dependency> <groupId> uk.org.okapibarcode </groupId> <artifactId> okapibarcode </artifactId> <version> 0.3.3 </version> </dependency> <!-- Dirigible --> <dependency> <groupId> org.eclipse.dirigible </groupId> <artifactId> dirigible-server-spring </artifactId> <version> ${dirigible.version} </version> <exclusions> <exclusion> <groupId> org.eclipse.dirigible </groupId> <artifactId> dirigible-ide-ui-branding </artifactId> </exclusion> </exclusions> </dependency> <!-- Platform --> <dependency> <groupId> org.slf4j </groupId> <artifactId> slf4j-api </artifactId> <version> ${slf4j.version} </version> <scope> compile </scope> </dependency> <dependency> <groupId> ch.qos.logback </groupId> <artifactId> logback-core </artifactId> <version> ${logback.version} </version> <scope> compile </scope> </dependency> <dependency> <groupId> ch.qos.logback </groupId> <artifactId> logback-classic </artifactId> <version> ${logback.version} </version> <scope> compile </scope> </dependency> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-configuration-processor </artifactId> <optional> true </optional> <version> ${spring.boot.version} </version> </dependency> </dependencies> </project> Build the Custom Platform . Navigate to the root folder of the project (e.g. <my-custom-stack-path>/custom-stack ) . Open the Terminal and execute the following command to build the Custom Platform : mvn clean install Run the Custom Platform . Navigate to the releng/target folder. Open the Terminal and execute the following command to run the Custom Platform : java -jar custom-stack-spring-boot-*.jar Debugging To run in debug mode, execute the following command: java -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=8000 -jar custom-stack-spring-boot-*.jar Go to http://localhost:8080 to access the Custom Stack . Test the changes. Create a project named sample-custom-stack . Right click on the sample-custom-stack project and select New \u2192 JavaScript CJS Service . Enter barcode.js for the name of the JavaScript Service. Replace the content with the following code: var response = require ( \"http/v4/response\" ); let barcode = new Packages . uk . org . okapibarcode . backend . Code128 (); barcode . setFontName ( \"Monospaced\" ); barcode . setFontSize ( 16 ); barcode . setContent ( \"123456789\" ); let image = new java . awt . image . BufferedImage ( barcode . getWidth (), barcode . getHeight (), java . awt . image . BufferedImage . TYPE_BYTE_GRAY ); let g2d = image . createGraphics (); let renderer = new Packages . uk . org . okapibarcode . output . Java2DRenderer ( g2d , 1 , java . awt . Color . WHITE , java . awt . Color . BLACK ); renderer . render ( barcode ); let file = new java . io . File ( \"code128.png\" ); javax . imageio . ImageIO . write ( image , \"png\" , file ); let bytes = org . apache . commons . io . FileUtils . readFileToByteArray ( file ); response . write ( bytes ); response . flush (); response . close (); Access to Packages Java classes are accessed by Fully Qualified Name (FQN). For classes that are not packaged in java , com or org packages, the Packages object should be used. Save the changes. Open the Preview view to see the result.","title":"Steps"},{"location":"tutorials/customizations/custom-stack/facade/","text":"Facade This tutorial will guide you through the creation of Java facade and JavaScript API for the Eclipse Dirigible Custom Stack. Prerequisites This tutorial is assuming, that you've successfully completed the following tutorials: Custom Stack . Branding . Steps Create Facade Module: Navigate to the root folder of the custom stack (e.g. <my-custom-stack-path>/custom-stack ) . Navigate to the modules folder. Creatae facade folder and navigate to it. Create pom.xml , GreetingsFacade.java and greetings.js files. pom.xml GreetingsFacade.java greetings.js Create new modules/facade/pom.xml file. Paste the following content: <project xmlns= \"http://maven.apache.org/POM/4.0.0\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation= \"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" > <modelVersion> 4.0.0 </modelVersion> <parent> <groupId> io.dirigible.custom.stack </groupId> <artifactId> custom-stack-modules-parent </artifactId> <version> 1.0.0-SNAPSHOT </version> <relativePath> ../pom.xml </relativePath> </parent> <name> Custom Stack - Modules - Facade </name> <artifactId> custom-stack-modules-facade </artifactId> <packaging> jar </packaging> </project> Create src/main/java/io/dirigible/custom/platform/facade/ folder stucture and navigate to it. Create new modules/facade/src/main/java/io/dirigible/custom/platform/facade/GreetingsFacade.java file. Paste the following content: package io.dirigible.custom.platform.facade ; public class GreetingsFacade { public static String getGreeting () { return \"Welcome to Eclipse Dirigible!\" ; } } Create src/main/resources/META-INF/dirigible/custom-stack/ folder stucture and navigate to it. Create new modules/facade/src/main/resources/META-INF/dirigible/custom-stack/greetings.js file. Paste the following content: exports . getMessage = function () { let username = org . eclipse . dirigible . api . v3 . security . UserFacade . getName (); let greeting = Packages . io . dirigible . custom . platform . facade . GreetingsFacade . getGreeting (); return `Hello ' ${ username } '! ${ greeting } ` ; }; Access to Packages Java classes are accessed by Fully Qualified Name (FQN). For classes that are not packaged in java , com or org packages, the Packages object should be used. Add Modules Dependency: Navigate to the modules folder. Open the pom.xml file. Make the following changes: Add Facade Module Final pom.xml Navigate to the <modules> section. Add the following module: <modules> <module> all </module> <module> branding </module> <module> facade </module> </modules> <project xmlns= \"http://maven.apache.org/POM/4.0.0\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation= \"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" > <modelVersion> 4.0.0 </modelVersion> <parent> <groupId> io.dirigible.custom.stack </groupId> <artifactId> custom-stack-parent </artifactId> <version> 1.0.0-SNAPSHOT </version> <relativePath> ../pom.xml </relativePath> </parent> <name> Custom Stack - Modules - Parent </name> <artifactId> custom-stack-modules-parent </artifactId> <packaging> pom </packaging> <modules> <module> all </module> <module> branding </module> <module> facade </module> </modules> </project> Navigate to the all folder. Open the pom.xml file. Make the following changes: Add Facade Dependency Final pom.xml Navigate to the <dependencies> section. Add the following dependency: <dependency> <groupId> io.dirigible.custom.stack </groupId> <artifactId> custom-stack-modules-facade </artifactId> <version> 1.0.0-SNAPSHOT </version> </dependency> <project xmlns= \"http://maven.apache.org/POM/4.0.0\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation= \"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" > <modelVersion> 4.0.0 </modelVersion> <parent> <groupId> io.dirigible.custom.stack </groupId> <artifactId> custom-stack-modules-parent </artifactId> <version> 1.0.0-SNAPSHOT </version> <relativePath> ../pom.xml </relativePath> </parent> <name> Custom Stack - Modules - All </name> <artifactId> custom-stack-modules-all </artifactId> <packaging> jar </packaging> <dependencies> <dependency> <groupId> io.dirigible.custom.stack </groupId> <artifactId> custom-stack-modules-branding </artifactId> <version> 1.0.0-SNAPSHOT </version> </dependency> <dependency> <groupId> io.dirigible.custom.stack </groupId> <artifactId> custom-stack-modules-facade </artifactId> <version> 1.0.0-SNAPSHOT </version> </dependency> </dependencies> </project> Build the Custom Platform . Navigate to the root folder of the project (e.g. <my-custom-stack-path>/custom-stack ) . Open the Terminal and execute the following command to build the Custom Platform : mvn clean install Run the Custom Platform . Navigate to the releng/target folder. Open the Terminal and execute the following command to run the Custom Platform : java -jar custom-stack-spring-boot-*.jar Debugging To run in debug mode, execute the following command: java -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=8000 -jar custom-stack-spring-boot-*.jar Go to http://localhost:8080 to access the Custom Stack . Test the changes. Create a project named sample-custom-stack . Right click on the sample-custom-stack project and select New \u2192 JavaScript CJS Service . Enter greeting.js for the name of the JavaScript Service. Replace the content with the following code: var response = require ( \"http/v4/response\" ); let greetings = require ( \"custom-stack/greetings\" ); let message = greetings . getMessage (); response . println ( message ); response . flush (); response . close (); Save the changes. Open the Preview view to see the result.","title":"Facade"},{"location":"tutorials/customizations/custom-stack/facade/#facade","text":"This tutorial will guide you through the creation of Java facade and JavaScript API for the Eclipse Dirigible Custom Stack. Prerequisites This tutorial is assuming, that you've successfully completed the following tutorials: Custom Stack . Branding .","title":"Facade"},{"location":"tutorials/customizations/custom-stack/facade/#steps","text":"Create Facade Module: Navigate to the root folder of the custom stack (e.g. <my-custom-stack-path>/custom-stack ) . Navigate to the modules folder. Creatae facade folder and navigate to it. Create pom.xml , GreetingsFacade.java and greetings.js files. pom.xml GreetingsFacade.java greetings.js Create new modules/facade/pom.xml file. Paste the following content: <project xmlns= \"http://maven.apache.org/POM/4.0.0\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation= \"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" > <modelVersion> 4.0.0 </modelVersion> <parent> <groupId> io.dirigible.custom.stack </groupId> <artifactId> custom-stack-modules-parent </artifactId> <version> 1.0.0-SNAPSHOT </version> <relativePath> ../pom.xml </relativePath> </parent> <name> Custom Stack - Modules - Facade </name> <artifactId> custom-stack-modules-facade </artifactId> <packaging> jar </packaging> </project> Create src/main/java/io/dirigible/custom/platform/facade/ folder stucture and navigate to it. Create new modules/facade/src/main/java/io/dirigible/custom/platform/facade/GreetingsFacade.java file. Paste the following content: package io.dirigible.custom.platform.facade ; public class GreetingsFacade { public static String getGreeting () { return \"Welcome to Eclipse Dirigible!\" ; } } Create src/main/resources/META-INF/dirigible/custom-stack/ folder stucture and navigate to it. Create new modules/facade/src/main/resources/META-INF/dirigible/custom-stack/greetings.js file. Paste the following content: exports . getMessage = function () { let username = org . eclipse . dirigible . api . v3 . security . UserFacade . getName (); let greeting = Packages . io . dirigible . custom . platform . facade . GreetingsFacade . getGreeting (); return `Hello ' ${ username } '! ${ greeting } ` ; }; Access to Packages Java classes are accessed by Fully Qualified Name (FQN). For classes that are not packaged in java , com or org packages, the Packages object should be used. Add Modules Dependency: Navigate to the modules folder. Open the pom.xml file. Make the following changes: Add Facade Module Final pom.xml Navigate to the <modules> section. Add the following module: <modules> <module> all </module> <module> branding </module> <module> facade </module> </modules> <project xmlns= \"http://maven.apache.org/POM/4.0.0\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation= \"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" > <modelVersion> 4.0.0 </modelVersion> <parent> <groupId> io.dirigible.custom.stack </groupId> <artifactId> custom-stack-parent </artifactId> <version> 1.0.0-SNAPSHOT </version> <relativePath> ../pom.xml </relativePath> </parent> <name> Custom Stack - Modules - Parent </name> <artifactId> custom-stack-modules-parent </artifactId> <packaging> pom </packaging> <modules> <module> all </module> <module> branding </module> <module> facade </module> </modules> </project> Navigate to the all folder. Open the pom.xml file. Make the following changes: Add Facade Dependency Final pom.xml Navigate to the <dependencies> section. Add the following dependency: <dependency> <groupId> io.dirigible.custom.stack </groupId> <artifactId> custom-stack-modules-facade </artifactId> <version> 1.0.0-SNAPSHOT </version> </dependency> <project xmlns= \"http://maven.apache.org/POM/4.0.0\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation= \"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" > <modelVersion> 4.0.0 </modelVersion> <parent> <groupId> io.dirigible.custom.stack </groupId> <artifactId> custom-stack-modules-parent </artifactId> <version> 1.0.0-SNAPSHOT </version> <relativePath> ../pom.xml </relativePath> </parent> <name> Custom Stack - Modules - All </name> <artifactId> custom-stack-modules-all </artifactId> <packaging> jar </packaging> <dependencies> <dependency> <groupId> io.dirigible.custom.stack </groupId> <artifactId> custom-stack-modules-branding </artifactId> <version> 1.0.0-SNAPSHOT </version> </dependency> <dependency> <groupId> io.dirigible.custom.stack </groupId> <artifactId> custom-stack-modules-facade </artifactId> <version> 1.0.0-SNAPSHOT </version> </dependency> </dependencies> </project> Build the Custom Platform . Navigate to the root folder of the project (e.g. <my-custom-stack-path>/custom-stack ) . Open the Terminal and execute the following command to build the Custom Platform : mvn clean install Run the Custom Platform . Navigate to the releng/target folder. Open the Terminal and execute the following command to run the Custom Platform : java -jar custom-stack-spring-boot-*.jar Debugging To run in debug mode, execute the following command: java -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=8000 -jar custom-stack-spring-boot-*.jar Go to http://localhost:8080 to access the Custom Stack . Test the changes. Create a project named sample-custom-stack . Right click on the sample-custom-stack project and select New \u2192 JavaScript CJS Service . Enter greeting.js for the name of the JavaScript Service. Replace the content with the following code: var response = require ( \"http/v4/response\" ); let greetings = require ( \"custom-stack/greetings\" ); let message = greetings . getMessage (); response . println ( message ); response . flush (); response . close (); Save the changes. Open the Preview view to see the result.","title":"Steps"},{"location":"tutorials/customizations/ide/contribute-ide-modules/","text":"Contributing to IDE Modules All IDE modules are located in the DirigibleLabs GitHub organization. Sample repositories, used for showing how to create Eclipse Dirigible modules, starts with the sample- prefix. Prerequisites Make sure you have permissions to commit in DirigibleLabs . PR are also accepted. Commit Change to DirigibleLabs Organization Go to DirigibleLabs and copy the url to the IDE project you will contribute to. Start Eclipse Dirigible. Info You can find more information on how to do that by following: Getting Started section. Setup section. Go to the Git perspective and click on Clone Project button. Enter the URL of the IDE project and click Clone . The project will appear under the git project list. Go to the Workspace perspective and make your changes. To be 100% sure all changes are saved and applied, right click on the project and select Publish . Now you can test the changes locally. After the changes are tested you can submit them. Open the Git perspective, click on the project and select the Stage tab. Select the changed files and use the down arrow button to stage them. Enter Commit Message . Enter your Username , Email , Password and click Commit and Push . GitHub Personal Access Token (PAT) In case your profile has two-factor authentication , for the Password field use your GitHub Personal Access Token (PAT) . Creating a personal access token - GitHub Docs . Select all scopes. Copy and save your token, because after you navigate off the page, you will not be able to see the token again. Go to the IDE project github page and make sure your changes were committed. Commit Change to Eclipse Dirigible Repository Fork the Eclipse Dirigible git repository into your account. Pull the forked project locally. Note If you have done this before and now have to push new changes, make sure to checkout the master branch, fetch all changes from the original repository in GitHub and pull them locally. Checkout to a new branch by giving it either a topic name or a name starting with fix- followed by the issue number. Execute mvn clean install -P content in the ide module root directory. You can also execute this for the whole project but that will pull the changes from all modules. Execute mvn clean install in the same module. You should see your changes that you already committed in the DirigibleLabs project. Add, commit and push only the files that you have changed. When committing, never forget to sign off you commit using the -s argument. You can use the git status command, to see all changed files. Create a PR to the master branch.","title":"Contribute IDE Modules"},{"location":"tutorials/customizations/ide/contribute-ide-modules/#contributing-to-ide-modules","text":"All IDE modules are located in the DirigibleLabs GitHub organization. Sample repositories, used for showing how to create Eclipse Dirigible modules, starts with the sample- prefix. Prerequisites Make sure you have permissions to commit in DirigibleLabs . PR are also accepted.","title":"Contributing to IDE Modules"},{"location":"tutorials/customizations/ide/contribute-ide-modules/#commit-change-to-dirigiblelabs-organization","text":"Go to DirigibleLabs and copy the url to the IDE project you will contribute to. Start Eclipse Dirigible. Info You can find more information on how to do that by following: Getting Started section. Setup section. Go to the Git perspective and click on Clone Project button. Enter the URL of the IDE project and click Clone . The project will appear under the git project list. Go to the Workspace perspective and make your changes. To be 100% sure all changes are saved and applied, right click on the project and select Publish . Now you can test the changes locally. After the changes are tested you can submit them. Open the Git perspective, click on the project and select the Stage tab. Select the changed files and use the down arrow button to stage them. Enter Commit Message . Enter your Username , Email , Password and click Commit and Push . GitHub Personal Access Token (PAT) In case your profile has two-factor authentication , for the Password field use your GitHub Personal Access Token (PAT) . Creating a personal access token - GitHub Docs . Select all scopes. Copy and save your token, because after you navigate off the page, you will not be able to see the token again. Go to the IDE project github page and make sure your changes were committed.","title":"Commit Change to DirigibleLabs Organization"},{"location":"tutorials/customizations/ide/contribute-ide-modules/#commit-change-to-eclipse-dirigible-repository","text":"Fork the Eclipse Dirigible git repository into your account. Pull the forked project locally. Note If you have done this before and now have to push new changes, make sure to checkout the master branch, fetch all changes from the original repository in GitHub and pull them locally. Checkout to a new branch by giving it either a topic name or a name starting with fix- followed by the issue number. Execute mvn clean install -P content in the ide module root directory. You can also execute this for the whole project but that will pull the changes from all modules. Execute mvn clean install in the same module. You should see your changes that you already committed in the DirigibleLabs project. Add, commit and push only the files that you have changed. When committing, never forget to sign off you commit using the -s argument. You can use the git status command, to see all changed files. Create a PR to the master branch.","title":"Commit Change to Eclipse Dirigible Repository"},{"location":"tutorials/customizations/ide/create-perspective/","text":"Create Perspective All perspectives in Eclipse Dirigible are loaded via the ide-perspective extension point. List with all extension points can be found at the Extensions Overview page. To develop a new perspective, extension , perspective definition and frontend resources should be created. The following example is using AngularJS and Fundamental Library . Steps Start Eclipse Dirigible. Info You can find more information on how to do that by following: Getting Started section. Setup section. Go to the Projects perspective and create New Project . Enter my-perspective for the name of the project. The project will appear under the projects list. Create perspective extension: Right click on the my-perspective project and select New \u2192 Folder . Enter perspective for the name of the folder. Right click on the perspective folder and select New \u2192 Folder . Enter extensions for the name of the folder. Create perspective.extension , perspective-menu.extension , perspective-menu-window.extension and perspective-menu-help.extension files. perspective.extension perspective-menu.extension perspective-menu-window.extension perspective-menu-help.extension Right click on the extensions folder and select New \u2192 Extension . Enter perspective.extension for the name of the file. Right click on the perspective.extension file and select Open With \u2192 Code Editor . Replace the content with the following definition: { \"module\" : \"my-perspective/perspective/perspective.js\" , \"extensionPoint\" : \"ide-perspective\" , \"description\" : \"My Perspective\" } Save the changes and close the Code Editor . (optional) Double click on the perspective.extension file to open the extension with the Extension Editor . Right click on the extensions folder and select New \u2192 Extension . Enter perspective-menu.extension for the name of the file. Right click on the perspective-menu.extension file and select Open With \u2192 Code Editor . Replace the content with the following definition: { \"module\" : \"my-perspective/perspective/perspective-menu.js\" , \"extensionPoint\" : \"my-perspective-menu\" , \"description\" : \"My Perspective Menu\" } Save the changes and close the Code Editor . (optional) Double click on the perspective-menu.extension file to open the extension with the Extension Editor . Right click on the extensions folder and select New \u2192 Extension . Enter perspective-menu-window.extension for the name of the file. Right click on the perspective-menu-window.extension file and select Open With \u2192 Code Editor . Replace the content with the following definition: { \"module\" : \"ide-core/services/menus/window.js\" , \"extensionPoint\" : \"my-perspective-menu\" , \"description\" : \"Window Menu\" } Save the changes and close the Code Editor . (optional) Double click on the perspective-menu-window.extension file to open the extension with the Extension Editor . Right click on the extensions folder and select New \u2192 Extension . Enter perspective-menu-help.extension for the name of the file. Right click on the perspective-menu-help.extension file and select Open With \u2192 Code Editor . Replace the content with the following definition: { \"module\" : \"ide-core/services/menus/help.js\" , \"extensionPoint\" : \"my-perspective-menu\" , \"description\" : \"Help Menu\" } Save the changes and close the Code Editor . (optional) Double click on the perspective-menu-help.extension file to open the extension with the Extension Editor . Create perspective definition: Create perspective.js and perspective-menu.js files. perspective.js perspective-menu.js Right click on the perspective folder and select New \u2192 JavaScript CJS Service . Enter perspective.js for the name of the file. Double click on the perspective.js file to open it with the Code Editor . Replace the content with the following code: const perspectiveData = { id : \"my-perspective\" , name : \"My Perspective\" , link : \"../my-perspective/index.html\" , order : \"1000\" , icon : \"../my-perspective/icon.svg\" , }; if ( typeof exports !== 'undefined' ) { exports . getPerspective = function () { return perspectiveData ; } } Save the changes and close the Code Editor . Right click on the perspective folder and select New \u2192 JavaScript CJS Service . Enter perspective-menu.js for the name of the file. Double click on the perspective-menu.js file to open it with the Code Editor . Replace the content with the following code: exports . getMenu = function () { return { label : \"My Menu\" , order : 1 , items : [ { label : \"Empty item\" , order : 1 }, { label : \"Empty item with divider\" , divider : true , order : 2 }, { label : \"Submenu\" , order : 3 , items : [ { label : \"GitHub page\" , data : \"https://github.com/eclipse/dirigible\" , action : \"open\" , order : 1 } ] }, { label : \"About\" , action : \"openDialogWindow\" , dialogId : \"about\" , order : 4 } ] }; } Save the changes and close the Code Editor . Create perspective frontend resources: Create index.html , controller.js and icon.svg files. index.html controller.js icon.svg Right click on the my-perspective project and select New \u2192 HTML5 Page . Enter index.html for the name of the file. Double click on the index.html file to open it with the Code Editor . Replace the content with the following code: <!DOCTYPE HTML> < html lang = \"en\" ng-app = \"myPerspective\" ng-controller = \"MyPerspectiveController\" xmlns = \"http://www.w3.org/1999/xhtml\" > < head > < meta charset = \"utf-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > < title dg-brand-title ></ title > <!-- 'brandicon' is an AngularJS directive to set the proper favicon. Do this only for perspective and not regular views --> < link rel = \"icon\" href = \"data:;base64,iVBORw0KGgo=\" dg-brand-icon /> <!-- Perspective data --> < script type = \"text/javascript\" src = \"/services/v4/web/my-perspective/perspective/perspective.js\" ></ script > < theme ></ theme > < script type = \"text/javascript\" src = \"/services/v4/js/ide-core/services/loader.js?id=ide-perspective-js\" ></ script > < link type = \"text/css\" rel = \"stylesheet\" href = \"/services/v4/js/ide-core/services/loader.js?id=ide-perspective-css\" /> <!-- Project-specific stuff --> < script type = \"text/javascript\" src = \"controller.js\" ></ script > </ head > < body dg-contextmenu = \"contextMenuContent\" > <!-- Top IDE panel and it's contents --> < ide-header menu-ext-id = \"my-perspective-menu\" ></ ide-header > <!-- Context menu overlay --> < ide-contextmenu ></ ide-contextmenu > <!-- The container which holds the sidebar and this perspective --> < ide-container > < ide-layout views-layout-model = \"layoutModel\" ></ ide-layout > </ ide-container > <!-- Alert dialog Overlay for alerts, notifications, dialogs --> < ide-dialogs ></ ide-dialogs > <!-- Bottom IDE status bar --> < ide-status-bar ></ ide-status-bar > </ body > </ html > Save the changes and close the Code Editor . Right click on the my-perspective project and select New \u2192 File . Enter controller.js for the name of the file. Double click on the controller.js file to open it with the Code Editor . Replace the content with the following code: let myPerspective = angular . module ( \"myPerspective\" , [ \"ngResource\" , \"ideLayout\" , \"ideUI\" ]); myPerspective . config ([ \"messageHubProvider\" , function ( messageHubProvider ) { messageHubProvider . eventIdPrefix = 'example' ; }]); myPerspective . controller ( \"MyPerspectiveController\" , [ \"$scope\" , \"messageHub\" , function ( $scope , messageHub ) { $scope . layoutModel = { // Array of view ids views : [ \"import\" , \"welcome\" , \"console\" ], layoutSettings : { hideEditorsPane : false }, events : { \"example.alert.info\" : function ( msg ) { console . info ( msg . data . message ); } } }; $scope . contextMenuContent = function ( element ) { return { callbackTopic : \"example.contextmenu\" , items : [ { id : \"new\" , label : \"New\" , icon : \"sap-icon--create\" , items : [ { id : \"tab\" , label : \"Tab\" }, ] }, { id : \"other\" , label : \"Other\" , divider : true , icon : \"sap-icon--question-mark\" } ] } }; messageHub . onDidReceiveMessage ( \"contextmenu\" , function ( msg ) { if ( msg . data == \"other\" ) { messageHub . showAlertSuccess ( \"Success\" , \"You have selected the other option!\" ); } else { messageHub . showAlertInfo ( \"Nothing will happen\" , \"This is just a demo after all.\" ); } } ); }]); Save the changes and close the Code Editor . Right click on the my-perspective project and select New \u2192 File . Enter icon.svg for the name of the file. Right click on the icon.svg file and select Open With \u2192 Code Editor . Replace the content with the following code: <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?> <svg width= \"24\" height= \"24\" viewBox= \"0 0 6.3499999 6.3500002\" version= \"1.1\" id= \"svg5\" xmlns= \"http://www.w3.org/2000/svg\" xmlns:svg= \"http://www.w3.org/2000/svg\" > <defs id= \"defs2\" /> <g id= \"layer1\" transform= \"matrix(1.0590909,0,0,1.0590909,-0.18761367,-0.18761367)\" > <path id= \"path1074\" style= \"fill-opacity:1;stroke:none;stroke-width:2.8;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\" d= \"M 12,1 A 11,11 0 0 0 1,12 11,11 0 0 0 12,23 11,11 0 0 0 23,12 11,11 0 0 0 12,1 Z m -0.101562,4.3378906 c 0.955078,0 1.796875,0.15625 2.523437,0.4667969 0.732422,0.3046875 1.294922,0.7558594 1.6875,1.3535156 0.392578,0.5976562 0.603516,1.2734376 0.632813,2.0292969 L 15.107422,9.3105469 C 15.019531,8.4960938 14.720703,7.8808594 14.210938,7.4648438 13.707031,7.0488281 12.958984,6.8417969 11.96875,6.8417969 c -1.03125,0 -1.783203,0.1894531 -2.2578125,0.5703125 -0.46875,0.375 -0.703125,0.8300781 -0.703125,1.3632812 0,0.4628906 0.1660156,0.84375 0.5,1.1425782 0.328125,0.2988282 1.1835935,0.6054692 2.5664065,0.9218752 1.388672,0.310547 2.341797,0.583984 2.857422,0.818359 0.75,0.345703 1.302734,0.785156 1.660156,1.318359 0.357422,0.527344 0.537109,1.136719 0.537109,1.828126 0,0.685546 -0.197265,1.332031 -0.589844,1.941406 -0.392578,0.603515 -0.957031,1.074219 -1.695312,1.414062 -0.732422,0.333985 -1.558594,0.501953 -2.478516,0.501953 -1.166015,0 -2.144531,-0.169922 -2.9355465,-0.509765 C 8.6445313,17.8125 8.0253906,17.302734 7.5742188,16.623047 7.1289063,15.9375 6.8945312,15.164062 6.8710938,14.302734 l 1.609375,-0.140625 c 0.076172,0.644532 0.2519531,1.173829 0.5273437,1.589844 0.28125,0.410156 0.7148438,0.744141 1.3007815,1.001953 0.585937,0.251953 1.24414,0.378906 1.976562,0.378906 0.650391,0 1.22461,-0.09766 1.722656,-0.291015 0.498047,-0.193359 0.867188,-0.457031 1.107422,-0.791016 0.246094,-0.339843 0.369141,-0.707031 0.369141,-1.105469 0,-0.404296 -0.117188,-0.755859 -0.351563,-1.054687 C 14.898438,13.585938 14.511719,13.330078 13.972656,13.125 13.626953,12.990234 12.863281,12.783203 11.679688,12.501953 10.496094,12.214844 9.6660156,11.945312 9.1914062,11.693359 8.5761719,11.371094 8.1171875,10.972656 7.8125,10.498047 7.5136719,10.017578 7.3632812,9.4804687 7.3632812,8.8886719 c 10e-8,-0.6503906 0.1855469,-1.2558594 0.5546876,-1.8183594 0.3691406,-0.5683593 0.9082031,-1 1.6171874,-1.2929687 C 10.244141,5.484375 11.03125,5.3378906 11.898438,5.3378906 Z\" transform= \"scale(0.26458334)\" /> </g> </svg> Save the changes and close the Code Editor . Refresh the browser. Info In some cases you may want to go to Theme \u2192 Reset to clean Web IDE state. The new perspective should be visibile at the bottom of the perspectives list. Info Alternatively go to Window \u2192 Open Perspective \u2192 My Perspective to open the new perspective.","title":"Create Perspective"},{"location":"tutorials/customizations/ide/create-perspective/#create-perspective","text":"All perspectives in Eclipse Dirigible are loaded via the ide-perspective extension point. List with all extension points can be found at the Extensions Overview page. To develop a new perspective, extension , perspective definition and frontend resources should be created. The following example is using AngularJS and Fundamental Library .","title":"Create Perspective"},{"location":"tutorials/customizations/ide/create-perspective/#steps","text":"Start Eclipse Dirigible. Info You can find more information on how to do that by following: Getting Started section. Setup section. Go to the Projects perspective and create New Project . Enter my-perspective for the name of the project. The project will appear under the projects list. Create perspective extension: Right click on the my-perspective project and select New \u2192 Folder . Enter perspective for the name of the folder. Right click on the perspective folder and select New \u2192 Folder . Enter extensions for the name of the folder. Create perspective.extension , perspective-menu.extension , perspective-menu-window.extension and perspective-menu-help.extension files. perspective.extension perspective-menu.extension perspective-menu-window.extension perspective-menu-help.extension Right click on the extensions folder and select New \u2192 Extension . Enter perspective.extension for the name of the file. Right click on the perspective.extension file and select Open With \u2192 Code Editor . Replace the content with the following definition: { \"module\" : \"my-perspective/perspective/perspective.js\" , \"extensionPoint\" : \"ide-perspective\" , \"description\" : \"My Perspective\" } Save the changes and close the Code Editor . (optional) Double click on the perspective.extension file to open the extension with the Extension Editor . Right click on the extensions folder and select New \u2192 Extension . Enter perspective-menu.extension for the name of the file. Right click on the perspective-menu.extension file and select Open With \u2192 Code Editor . Replace the content with the following definition: { \"module\" : \"my-perspective/perspective/perspective-menu.js\" , \"extensionPoint\" : \"my-perspective-menu\" , \"description\" : \"My Perspective Menu\" } Save the changes and close the Code Editor . (optional) Double click on the perspective-menu.extension file to open the extension with the Extension Editor . Right click on the extensions folder and select New \u2192 Extension . Enter perspective-menu-window.extension for the name of the file. Right click on the perspective-menu-window.extension file and select Open With \u2192 Code Editor . Replace the content with the following definition: { \"module\" : \"ide-core/services/menus/window.js\" , \"extensionPoint\" : \"my-perspective-menu\" , \"description\" : \"Window Menu\" } Save the changes and close the Code Editor . (optional) Double click on the perspective-menu-window.extension file to open the extension with the Extension Editor . Right click on the extensions folder and select New \u2192 Extension . Enter perspective-menu-help.extension for the name of the file. Right click on the perspective-menu-help.extension file and select Open With \u2192 Code Editor . Replace the content with the following definition: { \"module\" : \"ide-core/services/menus/help.js\" , \"extensionPoint\" : \"my-perspective-menu\" , \"description\" : \"Help Menu\" } Save the changes and close the Code Editor . (optional) Double click on the perspective-menu-help.extension file to open the extension with the Extension Editor . Create perspective definition: Create perspective.js and perspective-menu.js files. perspective.js perspective-menu.js Right click on the perspective folder and select New \u2192 JavaScript CJS Service . Enter perspective.js for the name of the file. Double click on the perspective.js file to open it with the Code Editor . Replace the content with the following code: const perspectiveData = { id : \"my-perspective\" , name : \"My Perspective\" , link : \"../my-perspective/index.html\" , order : \"1000\" , icon : \"../my-perspective/icon.svg\" , }; if ( typeof exports !== 'undefined' ) { exports . getPerspective = function () { return perspectiveData ; } } Save the changes and close the Code Editor . Right click on the perspective folder and select New \u2192 JavaScript CJS Service . Enter perspective-menu.js for the name of the file. Double click on the perspective-menu.js file to open it with the Code Editor . Replace the content with the following code: exports . getMenu = function () { return { label : \"My Menu\" , order : 1 , items : [ { label : \"Empty item\" , order : 1 }, { label : \"Empty item with divider\" , divider : true , order : 2 }, { label : \"Submenu\" , order : 3 , items : [ { label : \"GitHub page\" , data : \"https://github.com/eclipse/dirigible\" , action : \"open\" , order : 1 } ] }, { label : \"About\" , action : \"openDialogWindow\" , dialogId : \"about\" , order : 4 } ] }; } Save the changes and close the Code Editor . Create perspective frontend resources: Create index.html , controller.js and icon.svg files. index.html controller.js icon.svg Right click on the my-perspective project and select New \u2192 HTML5 Page . Enter index.html for the name of the file. Double click on the index.html file to open it with the Code Editor . Replace the content with the following code: <!DOCTYPE HTML> < html lang = \"en\" ng-app = \"myPerspective\" ng-controller = \"MyPerspectiveController\" xmlns = \"http://www.w3.org/1999/xhtml\" > < head > < meta charset = \"utf-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > < title dg-brand-title ></ title > <!-- 'brandicon' is an AngularJS directive to set the proper favicon. Do this only for perspective and not regular views --> < link rel = \"icon\" href = \"data:;base64,iVBORw0KGgo=\" dg-brand-icon /> <!-- Perspective data --> < script type = \"text/javascript\" src = \"/services/v4/web/my-perspective/perspective/perspective.js\" ></ script > < theme ></ theme > < script type = \"text/javascript\" src = \"/services/v4/js/ide-core/services/loader.js?id=ide-perspective-js\" ></ script > < link type = \"text/css\" rel = \"stylesheet\" href = \"/services/v4/js/ide-core/services/loader.js?id=ide-perspective-css\" /> <!-- Project-specific stuff --> < script type = \"text/javascript\" src = \"controller.js\" ></ script > </ head > < body dg-contextmenu = \"contextMenuContent\" > <!-- Top IDE panel and it's contents --> < ide-header menu-ext-id = \"my-perspective-menu\" ></ ide-header > <!-- Context menu overlay --> < ide-contextmenu ></ ide-contextmenu > <!-- The container which holds the sidebar and this perspective --> < ide-container > < ide-layout views-layout-model = \"layoutModel\" ></ ide-layout > </ ide-container > <!-- Alert dialog Overlay for alerts, notifications, dialogs --> < ide-dialogs ></ ide-dialogs > <!-- Bottom IDE status bar --> < ide-status-bar ></ ide-status-bar > </ body > </ html > Save the changes and close the Code Editor . Right click on the my-perspective project and select New \u2192 File . Enter controller.js for the name of the file. Double click on the controller.js file to open it with the Code Editor . Replace the content with the following code: let myPerspective = angular . module ( \"myPerspective\" , [ \"ngResource\" , \"ideLayout\" , \"ideUI\" ]); myPerspective . config ([ \"messageHubProvider\" , function ( messageHubProvider ) { messageHubProvider . eventIdPrefix = 'example' ; }]); myPerspective . controller ( \"MyPerspectiveController\" , [ \"$scope\" , \"messageHub\" , function ( $scope , messageHub ) { $scope . layoutModel = { // Array of view ids views : [ \"import\" , \"welcome\" , \"console\" ], layoutSettings : { hideEditorsPane : false }, events : { \"example.alert.info\" : function ( msg ) { console . info ( msg . data . message ); } } }; $scope . contextMenuContent = function ( element ) { return { callbackTopic : \"example.contextmenu\" , items : [ { id : \"new\" , label : \"New\" , icon : \"sap-icon--create\" , items : [ { id : \"tab\" , label : \"Tab\" }, ] }, { id : \"other\" , label : \"Other\" , divider : true , icon : \"sap-icon--question-mark\" } ] } }; messageHub . onDidReceiveMessage ( \"contextmenu\" , function ( msg ) { if ( msg . data == \"other\" ) { messageHub . showAlertSuccess ( \"Success\" , \"You have selected the other option!\" ); } else { messageHub . showAlertInfo ( \"Nothing will happen\" , \"This is just a demo after all.\" ); } } ); }]); Save the changes and close the Code Editor . Right click on the my-perspective project and select New \u2192 File . Enter icon.svg for the name of the file. Right click on the icon.svg file and select Open With \u2192 Code Editor . Replace the content with the following code: <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?> <svg width= \"24\" height= \"24\" viewBox= \"0 0 6.3499999 6.3500002\" version= \"1.1\" id= \"svg5\" xmlns= \"http://www.w3.org/2000/svg\" xmlns:svg= \"http://www.w3.org/2000/svg\" > <defs id= \"defs2\" /> <g id= \"layer1\" transform= \"matrix(1.0590909,0,0,1.0590909,-0.18761367,-0.18761367)\" > <path id= \"path1074\" style= \"fill-opacity:1;stroke:none;stroke-width:2.8;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\" d= \"M 12,1 A 11,11 0 0 0 1,12 11,11 0 0 0 12,23 11,11 0 0 0 23,12 11,11 0 0 0 12,1 Z m -0.101562,4.3378906 c 0.955078,0 1.796875,0.15625 2.523437,0.4667969 0.732422,0.3046875 1.294922,0.7558594 1.6875,1.3535156 0.392578,0.5976562 0.603516,1.2734376 0.632813,2.0292969 L 15.107422,9.3105469 C 15.019531,8.4960938 14.720703,7.8808594 14.210938,7.4648438 13.707031,7.0488281 12.958984,6.8417969 11.96875,6.8417969 c -1.03125,0 -1.783203,0.1894531 -2.2578125,0.5703125 -0.46875,0.375 -0.703125,0.8300781 -0.703125,1.3632812 0,0.4628906 0.1660156,0.84375 0.5,1.1425782 0.328125,0.2988282 1.1835935,0.6054692 2.5664065,0.9218752 1.388672,0.310547 2.341797,0.583984 2.857422,0.818359 0.75,0.345703 1.302734,0.785156 1.660156,1.318359 0.357422,0.527344 0.537109,1.136719 0.537109,1.828126 0,0.685546 -0.197265,1.332031 -0.589844,1.941406 -0.392578,0.603515 -0.957031,1.074219 -1.695312,1.414062 -0.732422,0.333985 -1.558594,0.501953 -2.478516,0.501953 -1.166015,0 -2.144531,-0.169922 -2.9355465,-0.509765 C 8.6445313,17.8125 8.0253906,17.302734 7.5742188,16.623047 7.1289063,15.9375 6.8945312,15.164062 6.8710938,14.302734 l 1.609375,-0.140625 c 0.076172,0.644532 0.2519531,1.173829 0.5273437,1.589844 0.28125,0.410156 0.7148438,0.744141 1.3007815,1.001953 0.585937,0.251953 1.24414,0.378906 1.976562,0.378906 0.650391,0 1.22461,-0.09766 1.722656,-0.291015 0.498047,-0.193359 0.867188,-0.457031 1.107422,-0.791016 0.246094,-0.339843 0.369141,-0.707031 0.369141,-1.105469 0,-0.404296 -0.117188,-0.755859 -0.351563,-1.054687 C 14.898438,13.585938 14.511719,13.330078 13.972656,13.125 13.626953,12.990234 12.863281,12.783203 11.679688,12.501953 10.496094,12.214844 9.6660156,11.945312 9.1914062,11.693359 8.5761719,11.371094 8.1171875,10.972656 7.8125,10.498047 7.5136719,10.017578 7.3632812,9.4804687 7.3632812,8.8886719 c 10e-8,-0.6503906 0.1855469,-1.2558594 0.5546876,-1.8183594 0.3691406,-0.5683593 0.9082031,-1 1.6171874,-1.2929687 C 10.244141,5.484375 11.03125,5.3378906 11.898438,5.3378906 Z\" transform= \"scale(0.26458334)\" /> </g> </svg> Save the changes and close the Code Editor . Refresh the browser. Info In some cases you may want to go to Theme \u2192 Reset to clean Web IDE state. The new perspective should be visibile at the bottom of the perspectives list. Info Alternatively go to Window \u2192 Open Perspective \u2192 My Perspective to open the new perspective.","title":"Steps"},{"location":"tutorials/customizations/ide/create-view/","text":"Create View All views in Eclipse Dirigible are loaded via the ide-view extension point. List with all extension points can be found at the Extensions Overview page. To develop a new view, extension , view definition and frontend resources should be created. The following example is using AngularJS and Fundamental Library . Steps Start Eclipse Dirigible. Info You can find more information on how to do that by following: Getting Started section. Setup section. Go to the Projects perspective and create New Project . Enter my-view for the name of the project. The project will appear under the projects list. Create view extension: Right click on the my-view project and select New \u2192 Folder . Enter view for the name of the folder. Create view.extension and view.js files. view.extension view.js Right click on the view folder and select New \u2192 Extension . Enter view.extension for the name of the file. Right click on the view.extension file and select Open With \u2192 Code Editor . Replace the content with the following definition: { \"module\" : \"my-view/view/view.js\" , \"extensionPoint\" : \"ide-view\" , \"description\" : \"My View\" } Save the changes and close the Code Editor . (optional) Double click on the view.extension file to open the extension with the Extension Editor . Right click on the view folder and select New \u2192 JavaScript CJS Service . Enter view.js for the name of the file. Double click on the view.js file to open it with the Code Editor . Replace the content with the following code: const viewData = { id : \"my-view\" , label : \"My View\" , factory : \"frame\" , region : \"bottom\" , link : \"../my-view/index.html\" , }; if ( typeof exports !== 'undefined' ) { exports . getView = function () { return viewData ; } } Save the changes and close the Code Editor . Create view frontend resources: Create index.html and controller.js files. index.html controller.js Right click on the my-view project and select New \u2192 HTML5 Page . Enter index.html for the name of the file. Double click on the index.html file to open it with the Code Editor . Replace the content with the following code: <!DOCTYPE HTML> < html lang = \"en\" xmlns = \"http://www.w3.org/1999/xhtml\" ng-app = \"myView\" ng-controller = \"MyViewController as mvc\" > < head > < meta charset = \"utf-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > <!-- Fake favicon to silent console errors and not waste a get request --> < link rel = \"icon\" sizes = \"any\" href = \"data:;base64,iVBORw0KGgo=\" > <!-- Title directive --> < title dg-view-title ></ title > <!-- jQuery --> < script type = \"text/javascript\" src = \"/webjars/jquery/3.6.0/jquery.min.js\" ></ script > <!-- AngularJS --> < script type = \"text/javascript\" src = \"/webjars/angularjs/1.8.2/angular.min.js\" ></ script > < script type = \"text/javascript\" src = \"/webjars/angularjs/1.8.2/angular-resource.min.js\" ></ script > < script type = \"text/javascript\" src = \"/webjars/angular-aria/1.8.2/angular-aria.min.js\" ></ script > <!-- Fundamental-styles --> < link type = \"text/css\" rel = \"stylesheet\" href = \"/webjars/fundamental-styles/0.24.0/dist/fundamental-styles.css\" > < theme ></ theme > <!-- Dirigible styles --> < link type = \"text/css\" rel = \"stylesheet\" href = \"/services/v4/web/resources/styles/core.css\" /> < link type = \"text/css\" rel = \"stylesheet\" href = \"/services/v4/web/resources/styles/widgets.css\" /> <!-- MessageHub --> < script type = \"text/javascript\" src = \"/services/v4/web/ide-core/core/message-hub.js\" ></ script > < script type = \"text/javascript\" src = \"/services/v4/web/ide-core/core/ide-message-hub.js\" ></ script > <!-- IDE Core UI --> < script type = \"text/javascript\" src = \"/services/v4/web/ide-core/ui/theming.js\" ></ script > < script type = \"text/javascript\" src = \"/services/v4/web/ide-core/ui/widgets.js\" ></ script > < script type = \"text/javascript\" src = \"/services/v4/web/ide-core/ui/view.js\" ></ script > <!-- Project-specific stuff --> < script type = \"text/javascript\" src = \"controller.js\" ></ script > </ head > < body class = \"fd-scrollbar\" dg-contextmenu = \"contextMenuContent\" > < fd-fieldset > < fd-form-group dg-header = \"My Form\" > < fd-form-item horizontal = \"true\" > < fd-form-label for = \"idName\" dg-required = \"true\" dg-colon = \"true\" > Name </ fd-form-label > < fd-input id = \"idName\" type = \"text\" placeholder = \"Enter name here\" ng-model = \"inputData.name\" > </ fd-input > </ fd-form-item > < fd-form-item horizontal = \"true\" > < fd-form-label for = \"idEmail\" dg-required = \"true\" dg-colon = \"true\" > Email </ fd-form-label > < fd-input id = \"idEmail\" type = \"text\" placeholder = \"Enter email here\" ng-model = \"inputData.email\" > </ fd-input > </ fd-form-item > </ fd-form-group > </ fd-fieldset > < button class = \"fd-button fd-button--emphasized\" ng-click = \"saveForm()\" style = \"margin: 6px;\" > Save </ button > < table fd-table display-mode = \"compact\" style = \"margin-top: 20px\" > < thead fd-table-header > < tr fd-table-row > < th fd-table-header-cell > Name </ th > < th fd-table-header-cell > Email </ th > </ tr > </ thead > < tbody fd-table-body > < tr fd-table-row hoverable = \"true\" ng-repeat = \"next in data\" > < td fd-table-cell > {{next.name}} </ td > < td fd-table-cell activable = \"true\" >< a class = \"fd-link\" > {{next.email}} </ a ></ td > </ tr > </ tbody > </ table > </ body > </ html > Save the changes and close the Code Editor . Right click on the my-view project and select New \u2192 File . Enter controller.js for the name of the file. Double click on the controller.js file to open it with the Code Editor . Replace the content with the following code: let myView = angular . module ( \"myView\" , [ \"ideUI\" , \"ideView\" ]); myView . config ([ \"messageHubProvider\" , function ( messageHubProvider ) { messageHubProvider . eventIdPrefix = \"myView\" ; }]); myView . controller ( \"MyViewController\" , [ \"$scope\" , \"$http\" , \"messageHub\" , function ( $scope , $http , messageHub ) { $scope . inputData = {}; $scope . data = [{ name : \"John Doe\" , email : \"john.doe@email.com\" }, { name : \"Jane Doe\" , email : \"jane.doe@email.com\" }]; $scope . saveForm = function () { messageHub . showAlertInfo ( \"Form Successfully Save\" , `Name: ${ $scope . inputData . name } , Email: ${ $scope . inputData . email } ` ); }; }]); Save the changes and close the Code Editor . Refresh the browser. Info In some cases you may want to go to Theme \u2192 Reset to clean Web IDE state. Go to Window \u2192 Show View \u2192 My View to open the new view.","title":"Create View"},{"location":"tutorials/customizations/ide/create-view/#create-view","text":"All views in Eclipse Dirigible are loaded via the ide-view extension point. List with all extension points can be found at the Extensions Overview page. To develop a new view, extension , view definition and frontend resources should be created. The following example is using AngularJS and Fundamental Library .","title":"Create View"},{"location":"tutorials/customizations/ide/create-view/#steps","text":"Start Eclipse Dirigible. Info You can find more information on how to do that by following: Getting Started section. Setup section. Go to the Projects perspective and create New Project . Enter my-view for the name of the project. The project will appear under the projects list. Create view extension: Right click on the my-view project and select New \u2192 Folder . Enter view for the name of the folder. Create view.extension and view.js files. view.extension view.js Right click on the view folder and select New \u2192 Extension . Enter view.extension for the name of the file. Right click on the view.extension file and select Open With \u2192 Code Editor . Replace the content with the following definition: { \"module\" : \"my-view/view/view.js\" , \"extensionPoint\" : \"ide-view\" , \"description\" : \"My View\" } Save the changes and close the Code Editor . (optional) Double click on the view.extension file to open the extension with the Extension Editor . Right click on the view folder and select New \u2192 JavaScript CJS Service . Enter view.js for the name of the file. Double click on the view.js file to open it with the Code Editor . Replace the content with the following code: const viewData = { id : \"my-view\" , label : \"My View\" , factory : \"frame\" , region : \"bottom\" , link : \"../my-view/index.html\" , }; if ( typeof exports !== 'undefined' ) { exports . getView = function () { return viewData ; } } Save the changes and close the Code Editor . Create view frontend resources: Create index.html and controller.js files. index.html controller.js Right click on the my-view project and select New \u2192 HTML5 Page . Enter index.html for the name of the file. Double click on the index.html file to open it with the Code Editor . Replace the content with the following code: <!DOCTYPE HTML> < html lang = \"en\" xmlns = \"http://www.w3.org/1999/xhtml\" ng-app = \"myView\" ng-controller = \"MyViewController as mvc\" > < head > < meta charset = \"utf-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > <!-- Fake favicon to silent console errors and not waste a get request --> < link rel = \"icon\" sizes = \"any\" href = \"data:;base64,iVBORw0KGgo=\" > <!-- Title directive --> < title dg-view-title ></ title > <!-- jQuery --> < script type = \"text/javascript\" src = \"/webjars/jquery/3.6.0/jquery.min.js\" ></ script > <!-- AngularJS --> < script type = \"text/javascript\" src = \"/webjars/angularjs/1.8.2/angular.min.js\" ></ script > < script type = \"text/javascript\" src = \"/webjars/angularjs/1.8.2/angular-resource.min.js\" ></ script > < script type = \"text/javascript\" src = \"/webjars/angular-aria/1.8.2/angular-aria.min.js\" ></ script > <!-- Fundamental-styles --> < link type = \"text/css\" rel = \"stylesheet\" href = \"/webjars/fundamental-styles/0.24.0/dist/fundamental-styles.css\" > < theme ></ theme > <!-- Dirigible styles --> < link type = \"text/css\" rel = \"stylesheet\" href = \"/services/v4/web/resources/styles/core.css\" /> < link type = \"text/css\" rel = \"stylesheet\" href = \"/services/v4/web/resources/styles/widgets.css\" /> <!-- MessageHub --> < script type = \"text/javascript\" src = \"/services/v4/web/ide-core/core/message-hub.js\" ></ script > < script type = \"text/javascript\" src = \"/services/v4/web/ide-core/core/ide-message-hub.js\" ></ script > <!-- IDE Core UI --> < script type = \"text/javascript\" src = \"/services/v4/web/ide-core/ui/theming.js\" ></ script > < script type = \"text/javascript\" src = \"/services/v4/web/ide-core/ui/widgets.js\" ></ script > < script type = \"text/javascript\" src = \"/services/v4/web/ide-core/ui/view.js\" ></ script > <!-- Project-specific stuff --> < script type = \"text/javascript\" src = \"controller.js\" ></ script > </ head > < body class = \"fd-scrollbar\" dg-contextmenu = \"contextMenuContent\" > < fd-fieldset > < fd-form-group dg-header = \"My Form\" > < fd-form-item horizontal = \"true\" > < fd-form-label for = \"idName\" dg-required = \"true\" dg-colon = \"true\" > Name </ fd-form-label > < fd-input id = \"idName\" type = \"text\" placeholder = \"Enter name here\" ng-model = \"inputData.name\" > </ fd-input > </ fd-form-item > < fd-form-item horizontal = \"true\" > < fd-form-label for = \"idEmail\" dg-required = \"true\" dg-colon = \"true\" > Email </ fd-form-label > < fd-input id = \"idEmail\" type = \"text\" placeholder = \"Enter email here\" ng-model = \"inputData.email\" > </ fd-input > </ fd-form-item > </ fd-form-group > </ fd-fieldset > < button class = \"fd-button fd-button--emphasized\" ng-click = \"saveForm()\" style = \"margin: 6px;\" > Save </ button > < table fd-table display-mode = \"compact\" style = \"margin-top: 20px\" > < thead fd-table-header > < tr fd-table-row > < th fd-table-header-cell > Name </ th > < th fd-table-header-cell > Email </ th > </ tr > </ thead > < tbody fd-table-body > < tr fd-table-row hoverable = \"true\" ng-repeat = \"next in data\" > < td fd-table-cell > {{next.name}} </ td > < td fd-table-cell activable = \"true\" >< a class = \"fd-link\" > {{next.email}} </ a ></ td > </ tr > </ tbody > </ table > </ body > </ html > Save the changes and close the Code Editor . Right click on the my-view project and select New \u2192 File . Enter controller.js for the name of the file. Double click on the controller.js file to open it with the Code Editor . Replace the content with the following code: let myView = angular . module ( \"myView\" , [ \"ideUI\" , \"ideView\" ]); myView . config ([ \"messageHubProvider\" , function ( messageHubProvider ) { messageHubProvider . eventIdPrefix = \"myView\" ; }]); myView . controller ( \"MyViewController\" , [ \"$scope\" , \"$http\" , \"messageHub\" , function ( $scope , $http , messageHub ) { $scope . inputData = {}; $scope . data = [{ name : \"John Doe\" , email : \"john.doe@email.com\" }, { name : \"Jane Doe\" , email : \"jane.doe@email.com\" }]; $scope . saveForm = function () { messageHub . showAlertInfo ( \"Form Successfully Save\" , `Name: ${ $scope . inputData . name } , Email: ${ $scope . inputData . email } ` ); }; }]); Save the changes and close the Code Editor . Refresh the browser. Info In some cases you may want to go to Theme \u2192 Reset to clean Web IDE state. Go to Window \u2192 Show View \u2192 My View to open the new view.","title":"Steps"},{"location":"tutorials/modeling/bpmn-process/","text":"BPMN Process This tutorial will guide you through the steps of creating a Business Process with Service Task , User Task and Choice Gateway elements. The result of the business process modeling would be a Time Entry Request process, that once started would trigger an approval process (with mail notifications, if configured) with the following steps: Steps Start Eclipse Dirigible Info You can find more information on how to do that by following: Getting Started section. Setup section. Create Project Go to the Projects perspective and create New Project . Enter sample-bpm for the name of the project. The project will appear under the projects list. Create JavaScript Process Task Handlers JavaScript handlers should be provided for the Service Task steps in the Business Process . The following handlers will be executed during the Approve Time Entry Request , Deny Time Entry Request and Send Notification tasks. Right click on the sample-bpm project and select New \u2192 Folder . Enter tasks for the name of the folder. Create approve-request.js , reject-request.js and send-notification.js files. approve-request.js reject-request.js send-notification.js Right click on the tasks folder and select New \u2192 JavaScript CJS Service . Enter approve-request.js for the name of the file. Double-click to open the file. Replace the content with the following: const process = require ( \"bpm/v4/process\" ); const mailClient = require ( \"mail/v4/client\" ); const config = require ( \"core/v4/configurations\" ); let execution = process . getExecutionContext (); let executionId = execution . getId (); let user = process . getVariable ( executionId , \"user\" ); console . log ( `Time Entry Request Approved for User [ ${ user } ]` ); if ( isMailConfigured ()) { let from = config . get ( \"APP_SAMPLE_BPM_FROM_EMAIL\" ); let to = config . get ( \"APP_SAMPLE_BPM_TO_EMAIL\" ); let subject = \"Time Entry Request - Approved\" ; let content = `<h2>Status:</h2><h4>Time Entry Request for [ ${ user } ] - Approved</4>` ; let subType = \"html\" ; mailClient . send ( from , to , subject , content , subType ); } else { console . error ( \"Missing mail configuration\" ); } function isMailConfigured () { return config . get ( \"DIRIGIBLE_MAIL_USERNAME\" ) != \"\" && config . get ( \"DIRIGIBLE_MAIL_PASSWORD\" ) != \"\" && config . get ( \"DIRIGIBLE_MAIL_TRANSPORT_PROTOCOL\" ) != \"\" && config . get ( \"DIRIGIBLE_MAIL_SMTPS_HOST\" ) != \"\" && config . get ( \"DIRIGIBLE_MAIL_SMTPS_PORT\" ) != \"\" && config . get ( \"APP_SAMPLE_BPM_FROM_EMAIL\" ) != \"\" && config . get ( \"APP_SAMPLE_BPM_TO_EMAIL\" ) != \"\" } Save the changes. Right click on the tasks folder and select New \u2192 JavaScript CJS Service . Enter reject-request.js for the name of the file. Double-click to open the file. Replace the content with the following: const process = require ( \"bpm/v4/process\" ); const mailClient = require ( \"mail/v4/client\" ); const config = require ( \"core/v4/configurations\" ); let execution = process . getExecutionContext (); let executionId = execution . getId (); let user = process . getVariable ( executionId , \"user\" ); console . error ( `Time Entry Request Rejected for User [ ${ user } ]` ); if ( isMailConfigured ()) { let from = config . get ( \"APP_SAMPLE_BPM_FROM_EMAIL\" ); let to = config . get ( \"APP_SAMPLE_BPM_TO_EMAIL\" ); let subject = \"Time Entry Request - Rejected\" ; let content = `<h2>Status:</h2><h4>Time Entry Request for [ ${ user } ] - Rejected</h4>` ; let subType = \"html\" ; mailClient . send ( from , to , subject , content , subType ); } else { console . error ( \"Missing mail configuration\" ); } function isMailConfigured () { return config . get ( \"DIRIGIBLE_MAIL_USERNAME\" ) != \"\" && config . get ( \"DIRIGIBLE_MAIL_PASSWORD\" ) != \"\" && config . get ( \"DIRIGIBLE_MAIL_TRANSPORT_PROTOCOL\" ) != \"\" && config . get ( \"DIRIGIBLE_MAIL_SMTPS_HOST\" ) != \"\" && config . get ( \"DIRIGIBLE_MAIL_SMTPS_PORT\" ) != \"\" && config . get ( \"APP_SAMPLE_BPM_FROM_EMAIL\" ) != \"\" && config . get ( \"APP_SAMPLE_BPM_TO_EMAIL\" ) != \"\" } Save the changes. Right click on the tasks folder and select New \u2192 JavaScript CJS Service . Enter send-notification.js for the name of the file. Double-click to open the file. Replace the content with the following: const process = require ( \"bpm/v4/process\" ); const base64 = require ( \"utils/v4/base64\" ); const mailClient = require ( \"mail/v4/client\" ); const config = require ( \"core/v4/configurations\" ); let execution = process . getExecutionContext (); let executionId = execution . getId (); let data = { executionId : executionId , User : process . getVariable ( executionId , \"User\" ), Project : process . getVariable ( executionId , \"Project\" ), Start : process . getVariable ( executionId , \"Start\" ), End : process . getVariable ( executionId , \"End\" ), Hours : process . getVariable ( executionId , \"Hours\" ) }; let urlEncodedData = base64 . encode ( JSON . stringify ( data )); let url = `http://localhost:8080/services/v4/web/sample-bpm/process/?data= ${ urlEncodedData } ` ; console . log ( `Approve Request URL: ${ url } ` ); if ( isMailConfigured ()) { let from = config . get ( \"APP_SAMPLE_BPM_FROM_EMAIL\" ); let to = config . get ( \"APP_SAMPLE_BPM_TO_EMAIL\" ); let subject = \"Time Entry Request - Pending\" ; let content = `<h2>Status:</h2><h4>Time Entry Request for [ ${ data . User } ] - Pending</h4>Click <a href=\" ${ url } \" target=\"_blank\">here</a> to process request.` ; let subType = \"html\" ; mailClient . send ( from , to , subject , content , subType ); } else { console . error ( \"Missing mail configuration\" ); } function isMailConfigured () { return config . get ( \"DIRIGIBLE_MAIL_USERNAME\" ) != \"\" && config . get ( \"DIRIGIBLE_MAIL_PASSWORD\" ) != \"\" && config . get ( \"DIRIGIBLE_MAIL_TRANSPORT_PROTOCOL\" ) != \"\" && config . get ( \"DIRIGIBLE_MAIL_SMTPS_HOST\" ) != \"\" && config . get ( \"DIRIGIBLE_MAIL_SMTPS_PORT\" ) != \"\" && config . get ( \"APP_SAMPLE_BPM_FROM_EMAIL\" ) != \"\" && config . get ( \"APP_SAMPLE_BPM_TO_EMAIL\" ) != \"\" } Save the changes. Create Business Process Model Right click on the sample-bpm project and select New \u2192 Business Process Model . Enter time-entry-request.bpmn for the name of the business process. Manual Steps XML Double-click the time-entry-request.bpmn file to open it with the Flowable Editor . Click on the Process identifier field and change the value to time-entry-request . Click on the Name field and change the value to Time Entry Request . Click on the MyServiceTasks to select the first step of the business process. Click on the Name field and change the value to Send Notification . Scroll down to the Class fields and click on it. Change the handler filed to sample-bpm/tasks/send-notification.js . JavaScript Task Handler The value of the handler field (e.g. sample-bpm/tasks/send-notification.js ) points to the location of the javascript task handler created in the previous step. Delete the arrow comming out of the Send Notification step. Expand the Activities group and drag and drop new User task to editor area. Connect the Send Notification task and the newly created user task. User Task Once the business process is triggered, it would stop at the Process Time Entry Request user task and it will wait for process continuation after the user task is completed. Select the user task. Click on the Name field and change the value to Process Time Entry Request . Create Choice gateway comming out of the Process Time Entry Request user task. Expand the Activities group and drag and drop new Service task to editor area. Select the service task. Click on the Name field and change the value to Approve Time Entry Request . Scroll down to the Class fields and click on it. Change the handler filed to sample-bpm/tasks/approve-request.js . Expand the Activities group and drag and drop new Service task to editor area. Select the service task. Click on the Name field and change the value to Reject Time Entry Request . Scroll down to the Class fields and click on it. Change the handler filed to sample-bpm/tasks/reject-request.js . Connect the Choice gateway with the Approve Time Entry Request and Reject Time Entry Request steps. Select the connection between the Choice gateway and the Reject Time Entry Request step. Click on the Default flow checkbox. Select the connection between the Choice gateway and the Approve Time Entry Request step. Click on the Flow condition field and change the value to ${isRequestApproved} . Flow Condition In the flow condition isRequestApproved is a process context variable, that would be set as part of the process continuation after the completion of the Process Time Entry Request user task. Connect the Approve Time Entry Request and Reject Time Entry Request steps with the end event. Save the changes. Right click on the time-entry-request.bpmn file and select Open With \u2192 Code Editor . Replace the content with the following: <?xml version='1.0' encoding='UTF-8'?> <definitions xmlns= \"http://www.omg.org/spec/BPMN/20100524/MODEL\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd= \"http://www.w3.org/2001/XMLSchema\" xmlns:flowable= \"http:// flowable.org/bpmn\" xmlns:bpmndi= \"http://www.omg.org/spec/BPMN/20100524/DI\" xmlns:omgdc= \"http://www.omg.org/spec/DD/20100524/DC\" xmlns:omgdi= \"http://www.omg.org/spec/DD/20100524/DI\" typeLanguage= \"http://www.w3.org/2001/XMLSchema\" expressionLanguage= \"http://www.w3.org/1999/XPath\" targetNamespace= \"http://www.flowable.org/processdef\" exporter= \"Flowable Open Source Modeler\" exporterVersion= \"6.7.2\" > <process id= \"time-entry-request\" name= \"Time Entry Request\" isExecutable= \"true\" > <startEvent id= \"sid-3334E861-7999-4B89-B8B0-11724BA17A3E\" /> <serviceTask id= \"sid-ED1BBD7E-41C4-42D7-A933-2CD979372BE7\" name= \"Send Notification\" flowable:class= \"org.eclipse.dirigible.bpm.flowable.DirigibleCallDelegate\" > <extensionElements> <flowable:field name= \"handler\" > <flowable:string> <![CDATA[sample-bpm/tasks/send-notification.js]]> </flowable:string> </flowable:field> </extensionElements> </serviceTask> <sequenceFlow id= \"sid-797626AE-B2F6-4C00-ABEE-FB30ADC177E4\" sourceRef= \"sid-3334E861-7999-4B89-B8B0-11724BA17A3E\" targetRef= \"sid-ED1BBD7E-41C4-42D7-A933-2CD979372BE7\" /> <endEvent id= \"sid-70B488C1-384A-4E19-8091-1B12D1AEC7FD\" /> <userTask id= \"sid-1949B473-2C74-4A44-BBB5-EA6235D62426\" name= \"Process Time Entry Request\" /> <serviceTask id= \"sid-07258D72-C009-406E-82EE-512FC68F9339\" name= \"Approve Time Entry Request\" flowable:class= \"org.eclipse.dirigible.bpm.flowable.DirigibleCallDelegate\" > <extensionElements> <flowable:field name= \"handler\" > <flowable:string> <![CDATA[sample-bpm/tasks/approve-request.js]]> </flowable:string> </flowable:field> </extensionElements> </serviceTask> <exclusiveGateway id= \"sid-9D358738-173A-49C8-8B5C-DE28F95CF812\" default= \"sid-354260C8-2700-4D26-ACB3-03990B1B83B6\" /> <sequenceFlow id= \"sid-A3B49B75-2D22-4D46-A01D-89663F5D9398\" sourceRef= \"sid-1949B473-2C74-4A44-BBB5-EA6235D62426\" targetRef= \"sid-9D358738-173A-49C8-8B5C-DE28F95CF812\" /> <sequenceFlow id= \"sid-645847E8-C959-48BD-816B-2E9CC4A2F08A\" sourceRef= \"sid-ED1BBD7E-41C4-42D7-A933-2CD979372BE7\" targetRef= \"sid-1949B473-2C74-4A44-BBB5-EA6235D62426\" /> <serviceTask id= \"sid-EBA0B783-C844-4C0D-AFAD-18699F661DB4\" name= \"Reject Time Entry Request\" flowable:class= \"org.eclipse.dirigible.bpm.flowable.DirigibleCallDelegate\" > <extensionElements> <flowable:field name= \"handler\" > <flowable:string> <![CDATA[sample-bpm/tasks/reject-request.js]]> </flowable:string> </flowable:field> </extensionElements> </serviceTask> <sequenceFlow id= \"sid-23401766-A5CA-4A91-8187-EDDCCD2BC5D5\" sourceRef= \"sid-EBA0B783-C844-4C0D-AFAD-18699F661DB4\" targetRef= \"sid-70B488C1-384A-4E19-8091-1B12D1AEC7FD\" /> <sequenceFlow id= \"sid-4CFA2E86-C3CD-4290-95B9-010BC9C0BEDC\" sourceRef= \"sid-07258D72-C009-406E-82EE-512FC68F9339\" targetRef= \"sid-70B488C1-384A-4E19-8091-1B12D1AEC7FD\" /> <sequenceFlow id= \"sid-354260C8-2700-4D26-ACB3-03990B1B83B6\" sourceRef= \"sid-9D358738-173A-49C8-8B5C-DE28F95CF812\" targetRef= \"sid-EBA0B783-C844-4C0D-AFAD-18699F661DB4\" /> <sequenceFlow id= \"sid-300248C3-876E-4B89-86F4-E978FA150CA5\" sourceRef= \"sid-9D358738-173A-49C8-8B5C-DE28F95CF812\" targetRef= \"sid-07258D72-C009-406E-82EE-512FC68F9339\" > <conditionExpression xsi:type= \"tFormalExpression\" > <![CDATA[${isRequestApproved}]]> </conditionExpression> </sequenceFlow> </process> <bpmndi:BPMNDiagram id= \"BPMNDiagram_time-entry-request\" > <bpmndi:BPMNPlane bpmnElement= \"time-entry-request\" id= \"BPMNPlane_time-entry-request\" > <bpmndi:BPMNShape bpmnElement= \"sid-3334E861-7999-4B89-B8B0-11724BA17A3E\" id= \"BPMNShape_sid-3334E861-7999-4B89-B8B0-11724BA17A3E\" > <omgdc:Bounds height= \"30.0\" width= \"30.0\" x= \"103.0\" y= \"78.0\" /> </bpmndi:BPMNShape> <bpmndi:BPMNShape bpmnElement= \"sid-ED1BBD7E-41C4-42D7-A933-2CD979372BE7\" id= \"BPMNShape_sid-ED1BBD7E-41C4-42D7-A933-2CD979372BE7\" > <omgdc:Bounds height= \"80.0\" width= \"100.0\" x= \"180.0\" y= \"52.0\" /> </bpmndi:BPMNShape> <bpmndi:BPMNShape bpmnElement= \"sid-70B488C1-384A-4E19-8091-1B12D1AEC7FD\" id= \"BPMNShape_sid-70B488C1-384A-4E19-8091-1B12D1AEC7FD\" > <omgdc:Bounds height= \"28.00000000000003\" width= \"28.0\" x= \"683.3333061801073\" y= \"233.33332406150006\" /> </bpmndi:BPMNShape> <bpmndi:BPMNShape bpmnElement= \"sid-1949B473-2C74-4A44-BBB5-EA6235D62426\" id= \"BPMNShape_sid-1949B473-2C74-4A44-BBB5-EA6235D62426\" > <omgdc:Bounds height= \"80.0\" width= \"100.0\" x= \"315.0\" y= \"52.0\" /> </bpmndi:BPMNShape> <bpmndi:BPMNShape bpmnElement= \"sid-07258D72-C009-406E-82EE-512FC68F9339\" id= \"BPMNShape_sid-07258D72-C009-406E-82EE-512FC68F9339\" > <omgdc:Bounds height= \"80.0\" width= \"100.0\" x= \"450.0\" y= \"144.99999999999997\" /> </bpmndi:BPMNShape> <bpmndi:BPMNShape bpmnElement= \"sid-9D358738-173A-49C8-8B5C-DE28F95CF812\" id= \"BPMNShape_sid-9D358738-173A-49C8-8B5C-DE28F95CF812\" > <omgdc:Bounds height= \"40.0\" width= \"40.0\" x= \"345.0\" y= \"165.0\" /> </bpmndi:BPMNShape> <bpmndi:BPMNShape bpmnElement= \"sid-EBA0B783-C844-4C0D-AFAD-18699F661DB4\" id= \"BPMNShape_sid-EBA0B783-C844-4C0D-AFAD-18699F661DB4\" > <omgdc:Bounds height= \"80.0\" width= \"100.0\" x= \"450.0\" y= \"240.0\" /> </bpmndi:BPMNShape> <bpmndi:BPMNEdge bpmnElement= \"sid-797626AE-B2F6-4C00-ABEE-FB30ADC177E4\" id= \"BPMNEdge_sid-797626AE-B2F6-4C00-ABEE-FB30ADC177E4\" flowable:sourceDockerX= \"15.0\" flowable:sourceDockerY= \"15.0\" flowable:targetDockerX= \"50.0\" flowable:targetDockerY= \"40.0\" > <omgdi:waypoint x= \"132.9494165151691\" y= \"92.86607665568077\" /> <omgdi:waypoint x= \"179.99999999999878\" y= \"92.44598214285713\" /> </bpmndi:BPMNEdge> <bpmndi:BPMNEdge bpmnElement= \"sid-645847E8-C959-48BD-816B-2E9CC4A2F08A\" id= \"BPMNEdge_sid-645847E8-C959-48BD-816B-2E9CC4A2F08A\" flowable:sourceDockerX= \"50.0\" flowable:sourceDockerY= \"40.0\" flowable:targetDockerX= \"50.0\" flowable:targetDockerY= \"40.0\" > <omgdi:waypoint x= \"279.95000000000005\" y= \"92.0\" /> <omgdi:waypoint x= \"314.9999999999962\" y= \"92.0\" /> </bpmndi:BPMNEdge> <bpmndi:BPMNEdge bpmnElement= \"sid-23401766-A5CA-4A91-8187-EDDCCD2BC5D5\" id= \"BPMNEdge_sid-23401766-A5CA-4A91-8187-EDDCCD2BC5D5\" flowable:sourceDockerX= \"50.0\" flowable:sourceDockerY= \"40.0\" flowable:targetDockerX= \"14.0\" flowable:targetDockerY= \"14.000000000000014\" > <omgdi:waypoint x= \"549.9499999999998\" y= \"271.7229694847648\" /> <omgdi:waypoint x= \"683.5191504285505\" y= \"249.61196067916165\" /> </bpmndi:BPMNEdge> <bpmndi:BPMNEdge bpmnElement= \"sid-4CFA2E86-C3CD-4290-95B9-010BC9C0BEDC\" id= \"BPMNEdge_sid-4CFA2E86-C3CD-4290-95B9-010BC9C0BEDC\" flowable:sourceDockerX= \"50.0\" flowable:sourceDockerY= \"40.0\" flowable:targetDockerX= \"14.0\" flowable:targetDockerY= \"14.000000000000014\" > <omgdi:waypoint x= \"549.95\" y= \"200.77812482414993\" /> <omgdi:waypoint x= \"683.9707941300649\" y= \"243.1152758099949\" /> </bpmndi:BPMNEdge> <bpmndi:BPMNEdge bpmnElement= \"sid-354260C8-2700-4D26-ACB3-03990B1B83B6\" id= \"BPMNEdge_sid-354260C8-2700-4D26-ACB3-03990B1B83B6\" flowable:sourceDockerX= \"20.0\" flowable:sourceDockerY= \"20.0\" flowable:targetDockerX= \"50.0\" flowable:targetDockerY= \"40.0\" > <omgdi:waypoint x= \"365.0\" y= \"204.93951104100947\" /> <omgdi:waypoint x= \"365.0\" y= \"280.0\" /> <omgdi:waypoint x= \"449.99999999997203\" y= \"280.0\" /> </bpmndi:BPMNEdge> <bpmndi:BPMNEdge bpmnElement= \"sid-A3B49B75-2D22-4D46-A01D-89663F5D9398\" id= \"BPMNEdge_sid-A3B49B75-2D22-4D46-A01D-89663F5D9398\" flowable:sourceDockerX= \"50.0\" flowable:sourceDockerY= \"40.0\" flowable:targetDockerX= \"20.0\" flowable:targetDockerY= \"20.0\" > <omgdi:waypoint x= \"365.0\" y= \"131.95\" /> <omgdi:waypoint x= \"365.0\" y= \"165.0\" /> </bpmndi:BPMNEdge> <bpmndi:BPMNEdge bpmnElement= \"sid-300248C3-876E-4B89-86F4-E978FA150CA5\" id= \"BPMNEdge_sid-300248C3-876E-4B89-86F4-E978FA150CA5\" flowable:sourceDockerX= \"20.0\" flowable:sourceDockerY= \"20.0\" flowable:targetDockerX= \"50.0\" flowable:targetDockerY= \"40.0\" > <omgdi:waypoint x= \"384.94261658031087\" y= \"185.0\" /> <omgdi:waypoint x= \"450.0\" y= \"184.99999999999997\" /> </bpmndi:BPMNEdge> </bpmndi:BPMNPlane> </bpmndi:BPMNDiagram> </definitions> Save the changes. Business Process Synchronization Usually when the *.bpmn process is saved it would take between one and two minutes to be deployed and active. After that period of time the business process can be executed. The synchronization period by default is set to 50 seconds ( 0/50 * * * * ? ) . Find out more about the Job Expression environment variables. Updating the *.bpmn file would result in new synchronization being triggered and the updated process flow would be available after minute or two. Updating the JavaScript Task Handler won't require new synchronization and the new behaviour of the handlers will be available on the fly. Create Process API To trigger and continue the BPMN Process execution a server-side JavaScript API will be created. Right click on the sample-bpm project and select New \u2192 Folder . Enter api for the name of the folder. Create process.js file. process.js Right click on the api folder and select New \u2192 JavaScript CJS Service . Enter process.js for the name of the file. Double-click to open the file. Replace the content with the following: const rs = require ( \"http/v4/rs\" ); const process = require ( \"bpm/v4/process\" ); const tasks = require ( \"bpm/v4/tasks\" ); const user = require ( \"security/v4/user\" ); rs . service () . post ( \"\" , ( ctx , request , response ) => { let data = request . getJSON (); process . start ( 'time-entry-request' , { \"User\" : \"\" + user . getName (), \"Project\" : \"\" + data . Project , \"Start\" : \"\" + data . Start , \"End\" : \"\" + data . End , \"Hours\" : \"\" + data . Hours }); response . setStatus ( response . ACCEPTED ); }) . resource ( \"continue/:executionId\" ) . post (( ctx , request , response ) => { let executionId = request . params . executionId ; let tasksList = tasks . list (); let data = request . getJSON (); for ( const task of tasksList ) { if ( task . executionId . toString () === executionId . toString ()) { tasks . completeTask ( task . id , { isRequestApproved : data . approved , user : data . user }); break ; } } response . setStatus ( response . ACCEPTED ); }) . execute () Create Submit Form The submit form would call the server-side javascript api that was created in the previous step and will trigger the business process. Right click on the sample-bpm project and select New \u2192 Folder . Enter submit for the name of the folder. Create index.html and controller.js files. index.html controller.js Right click on the submit folder and select New \u2192 HTML5 Page . Enter index.html for the name of the file. Double-click to open the file. Replace the content with the following: <!DOCTYPE HTML> < html lang = \"en\" xmlns = \"http://www.w3.org/1999/xhtml\" ng-app = \"page\" ng-controller = \"PageController\" > < head > < meta charset = \"utf-8\" > < meta http-equiv = \"X-UA-Compatible\" content = \"IE=edge\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > < link rel = \"icon\" href = \"data:;base64,iVBORw0KGgo=\" dg-brand-icon /> < title dg-brand-title ></ title > < theme ></ theme > < script type = \"text/javascript\" src = \"/services/v4/js/resources-core/services/loader.js?id=application-view-js\" > </ script > < link type = \"text/css\" rel = \"stylesheet\" href = \"/services/v4/js/resources-core/services/loader.js?id=application-view-css\" /> < script type = \"text/javascript\" src = \"controller.js\" ></ script > </ head > < body class = \"dg-vbox\" dg-contextmenu = \"contextMenuContent\" > < div > < fd-message-page glyph = \"sap-icon--time-entry-request\" > < fd-message-page-title > Submit Time Entry Request </ fd-message-page-title > < fd-message-page-subtitle > < fd-scrollbar class = \"dg-full-height\" > < fd-fieldset class = \"fd-margin--md\" ng-form = \"formFieldset\" > < fd-form-group name = \"entityForm\" > < fd-form-item horizontal = \"false\" > < fd-form-label for = \"idProject\" dg-required = \"true\" dg-colon = \"true\" > Project </ fd-form-label > < fd-combobox-input id = \"idProject\" name = \"Project\" state = \"{{ formErrors.Project ? 'error' : '' }}\" ng-required = \"true\" ng-change = \"isValid(formFieldset['Project'].$valid, 'Project')\" ng-model = \"entity.Project\" dropdown-items = \"optionsProject\" dg-placeholder = \"Search Project ...\" > </ fd-combobox-input > </ fd-form-item > < fd-form-item horizontal = \"false\" > < fd-form-label for = \"idStart\" dg-required = \"true\" dg-colon = \"true\" > Start </ fd-form-label > < fd-form-input-message-group dg-inactive = \"{{ formErrors.Start ? false : true }}\" > < fd-input id = \"idStart\" name = \"Start\" state = \"{{ formErrors.Start ? 'error' : '' }}\" ng-required = \"true\" ng-change = \"isValid(formFieldset['Start'].$valid, 'Start')\" ng-model = \"entity.Start\" type = \"date\" > </ fd-input > < fd-form-message dg-type = \"error\" > Incorrect Input </ fd-form-message > </ fd-form-input-message-group > </ fd-form-item > < fd-form-item horizontal = \"false\" > < fd-form-label for = \"idEnd\" dg-required = \"true\" dg-colon = \"true\" > End </ fd-form-label > < fd-form-input-message-group dg-inactive = \"{{ formErrors.End ? false : true }}\" > < fd-input id = \"idEnd\" name = \"End\" state = \"{{ formErrors.End ? 'error' : '' }}\" ng-required = \"true\" ng-change = \"isValid(formFieldset['End'].$valid, 'End')\" ng-model = \"entity.End\" type = \"date\" > </ fd-input > < fd-form-message dg-type = \"error\" > Incorrect Input </ fd-form-message > </ fd-form-input-message-group > </ fd-form-item > < fd-form-item horizontal = \"false\" > < fd-form-label for = \"idHours\" dg-required = \"true\" dg-colon = \"true\" > Hours </ fd-form-label > < fd-form-input-message-group dg-inactive = \"{{ formErrors.Hours ? false : true }}\" > < fd-input id = \"idHours\" name = \"Hours\" state = \"{{ formErrors.Hours ? 'error' : '' }}\" ng-required = \"true\" ng-change = \"isValid(formFieldset['Hours'].$valid, 'Hours')\" ng-model = \"entity.Hours\" min = \"0\" max = \"40\" dg-input-rules = \"{ patterns: [''] }\" type = \"number\" placeholder = \"Enter Hours\" > </ fd-input > < fd-form-message dg-type = \"error\" > Incorrect Input </ fd-form-message > </ fd-form-input-message-group > </ fd-form-item > </ fd-form-group > </ fd-fieldset > </ fd-scrollbar > </ fd-message-page-subtitle > < fd-message-page-actions > < fd-button class = \"fd-margin-end--tiny fd-dialog__decisive-button\" compact = \"true\" dg-type = \"emphasized\" dg-label = \"Submit\" ng-click = \"submit()\" state = \"{{ !isFormValid ? 'disabled' : '' }}\" > </ fd-button > < fd-button class = \"fd-dialog__decisive-button\" compact = \"true\" dg-type = \"transparent\" dg-label = \"Cancel\" ng-click = \"resetForm()\" ></ fd-button > </ fd-message-page-actions > </ fd-message-page > </ div > </ body > </ html > Right click on the api folder and select New \u2192 File . Enter controller.js for the name of the file. Double-click to open the file. Replace the content with the following: angular . module ( 'page' , [ \"ideUI\" , \"ideView\" ]) . controller ( 'PageController' , [ '$scope' , '$http' , function ( $scope , $http ) { $scope . entity = {}; $scope . optionsProject = [{ text : \"Project Alpha\" , value : \"Project Alpha\" }, { text : \"Project Beta\" , value : \"Project Beta\" }, { text : \"Project Evolution\" , value : \"Project Evolution\" }, { text : \"Project Next\" , value : \"Project Next\" }]; $scope . isValid = function ( isValid , property ) { $scope . formErrors [ property ] = ! isValid ? true : undefined ; for ( let next in $scope . formErrors ) { if ( $scope . formErrors [ next ] === true ) { $scope . isFormValid = false ; return ; } } $scope . isFormValid = true ; }; $scope . submit = function () { $http . post ( \"/services/v4/js/sample-bpm/api/process.js\" , JSON . stringify ( $scope . entity )). then ( function ( response ) { if ( response . status != 202 ) { alert ( `Unable to submit Time Entry Request: ' ${ response . message } '` ); $scope . resetForm (); return ; } alert ( \"Time Entry Request successfully submitted\" ); $scope . resetForm (); }); }; $scope . resetForm = function () { $scope . entity = {}; $scope . formErrors = { Project : true , Start : true , End : true , Hours : true , }; }; $scope . resetForm (); }]); Create Process Form The process form would call the server-side javascript api that was created before and will resume the business process execution. Right click on the sample-bpm project and select New \u2192 Folder . Enter process for the name of the folder. Create index.html and controller.js files. index.html controller.js Right click on the process folder and select New \u2192 HTML5 Page . Enter index.html for the name of the file. Double-click to open the file. Replace the content with the following: <!DOCTYPE HTML> < html lang = \"en\" xmlns = \"http://www.w3.org/1999/xhtml\" ng-app = \"page\" ng-controller = \"PageController\" > < head > < meta charset = \"utf-8\" > < meta http-equiv = \"X-UA-Compatible\" content = \"IE=edge\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > < link rel = \"icon\" href = \"data:;base64,iVBORw0KGgo=\" dg-brand-icon /> < title dg-brand-title ></ title > < theme ></ theme > < script type = \"text/javascript\" src = \"/services/v4/js/resources-core/services/loader.js?id=application-view-js\" > </ script > < link type = \"text/css\" rel = \"stylesheet\" href = \"/services/v4/js/resources-core/services/loader.js?id=application-view-css\" /> < script type = \"text/javascript\" src = \"controller.js\" ></ script > </ head > < body class = \"dg-vbox\" dg-contextmenu = \"contextMenuContent\" > < div > < fd-message-page glyph = \"sap-icon--approvals\" > < fd-message-page-title > Approve Time Entry Request </ fd-message-page-title > < fd-message-page-subtitle > < fd-scrollbar class = \"dg-full-height\" > < fd-fieldset class = \"fd-margin--md\" ng-form = \"formFieldset\" > < fd-form-group name = \"entityForm\" > < fd-form-item horizontal = \"false\" > < fd-form-label for = \"idHours\" dg-colon = \"true\" > Hours </ fd-form-label > < fd-form-input-message-group > < fd-input id = \"idProject\" name = \"Project\" ng-model = \"entity.Project\" type = \"input\" ng-readonly = \"true\" > </ fd-input > < fd-form-message dg-type = \"error\" > Incorrect Input </ fd-form-message > </ fd-form-input-message-group > </ fd-form-item > < fd-form-item horizontal = \"false\" > < fd-form-label for = \"idStart\" dg-colon = \"true\" > Start </ fd-form-label > < fd-form-input-message-group > < fd-input id = \"idStart\" name = \"Start\" ng-model = \"entity.Start\" type = \"date\" ng-readonly = \"true\" > </ fd-input > < fd-form-message dg-type = \"error\" > Incorrect Input </ fd-form-message > </ fd-form-input-message-group > </ fd-form-item > < fd-form-item horizontal = \"false\" > < fd-form-label for = \"idEnd\" dg-colon = \"true\" > End </ fd-form-label > < fd-form-input-message-group > < fd-input id = \"idEnd\" name = \"End\" ng-model = \"entity.End\" type = \"date\" ng-readonly = \"true\" > </ fd-input > < fd-form-message dg-type = \"error\" > Incorrect Input </ fd-form-message > </ fd-form-input-message-group > </ fd-form-item > < fd-form-item horizontal = \"false\" > < fd-form-label for = \"idHours\" dg-colon = \"true\" > Hours </ fd-form-label > < fd-form-input-message-group > < fd-input id = \"idHours\" name = \"Hours\" ng-model = \"entity.Hours\" type = \"number\" ng-readonly = \"true\" > </ fd-input > < fd-form-message dg-type = \"error\" > Incorrect Input </ fd-form-message > </ fd-form-input-message-group > </ fd-form-item > </ fd-form-group > </ fd-fieldset > </ fd-scrollbar > </ fd-message-page-subtitle > < fd-message-page-actions > < fd-button class = \"fd-margin-end--tiny fd-dialog__decisive-button\" compact = \"true\" dg-type = \"emphasized\" dg-label = \"Approve\" ng-click = \"approve()\" > </ fd-button > < fd-button class = \"fd-dialog__decisive-button\" compact = \"true\" dg-type = \"negative\" dg-label = \"Reject\" ng-click = \"reject()\" ></ fd-button > </ fd-message-page-actions > </ fd-message-page > </ div > </ body > </ html > Right click on the process folder and select New \u2192 File . Enter controller.js for the name of the file. Double-click to open the file. Replace the content with the following: angular . module ( 'page' , [ \"ideUI\" , \"ideView\" ]) . controller ( 'PageController' , [ '$scope' , '$http' , '$location' , function ( $scope , $http , $location ) { let data = JSON . parse ( atob ( window . location . search . split ( \"=\" )[ 1 ])); $scope . executionId = data . executionId ; $scope . user = data . User ; $scope . entity = { Project : data . Project , Start : new Date ( data . Start ), End : new Date ( data . End ), Hours : parseInt ( data . Hours ) }; $scope . approve = function () { $http . post ( \"/services/v4/js/sample-bpm/api/process.js/continue/\" + $scope . executionId , JSON . stringify ( { user : $scope . user , approved : true } )). then ( function ( response ) { if ( response . status != 202 ) { alert ( `Unable to approve Time Entry Request: ' ${ response . message } '` ); return ; } $scope . entity = {}; alert ( \"Time Entry Request Approved\" ); }); }; $scope . reject = function () { $http . post ( \"/services/v4/js/sample-bpm/api/process.js/continue/\" + $scope . executionId , JSON . stringify ( { user : $scope . user , approved : false } )). then ( function ( response ) { if ( response . status != 202 ) { alert ( `Unable to reject Time Entry Request: ' ${ response . message } '` ); return ; } $scope . entity = {}; alert ( \"Time Entry Request Rejected\" ); }); }; }]); (Optional) Email Configuration In order to recieve email notifications about the process steps a mail configuration should be provided. The following environment variables are needed: DIRIGIBLE_MAIL_USERNAME=<YOUR_MAIL_USERNAME> DIRIGIBLE_MAIL_PASSWORD=<YOUR_MAIL_PASSWORD> DIRIGIBLE_MAIL_TRANSPORT_PROTOCOL=smtps DIRIGIBLE_MAIL_SMTPS_HOST=<YOUR_MAIL_HOST> DIRIGIBLE_MAIL_SMTPS_PORT=465 APP_SAMPLE_BPM_FROM_EMAIL=<SENDER_EMAIL> APP_SAMPLE_BPM_TO_EMAIL=<RECEIVER_EMAIL> Connecting Eclipse Dirigible with SendGrid SMTP Relay To use a gmail account for the mail configuration follow the steps in the Connecting Eclipse Dirigible with SendGrid SMTP Relay blog. DIRIGIBLE_MAIL_USERNAME=apikey DIRIGIBLE_MAIL_PASSWORD=<YOUR_API_KEY_HERE> DIRIGIBLE_MAIL_TRANSPORT_PROTOCOL=smtps DIRIGIBLE_MAIL_SMTPS_HOST=smtp.sendgrid.net DIRIGIBLE_MAIL_SMTPS_PORT=465 APP_SAMPLE_BPM_FROM_EMAIL=<SENDER_EMAIL> APP_SAMPLE_BPM_TO_EMAIL=<RECEIVER_EMAIL> Demo Navigate to http://localhost:8080/services/v4/web/sample-bpm/submit/ to open the Submit form . Enter the required data and press the Submit button. If email configuration was provided an email notification will be send to the email address set by the APP_SAMPLE_BPM_TO_EMAIL=<RECEIVER_EMAIL> environment variable. If email configuration wasn't provided then in the Console view the following message can be found: ` Approve Request URL: http://localhost:8080/services/v4/web/sample-bpm/process/?data=eyJleGVjdXRpb25JZCI6IjE4Ni... Open the URL from the Console view or open it from the email notification. The Process form would be prefilled with the data that was entered in the Submit form . Press the Approve or Reject button to resume the process execution. One more email notification would be send and message in the Console would be logged as part of the last step of the Business Process . BPM Sample GitHub Repository Go to https://github.com/dirigiblelabs/sample-bpm to find the complete sample. The repository can be clone in the Git perspective and after few minutes the BPM Sample would be active.","title":"BPMN Process"},{"location":"tutorials/modeling/bpmn-process/#bpmn-process","text":"This tutorial will guide you through the steps of creating a Business Process with Service Task , User Task and Choice Gateway elements. The result of the business process modeling would be a Time Entry Request process, that once started would trigger an approval process (with mail notifications, if configured) with the following steps:","title":"BPMN Process"},{"location":"tutorials/modeling/bpmn-process/#steps","text":"","title":"Steps"},{"location":"tutorials/modeling/bpmn-process/#start-eclipse-dirigible","text":"Info You can find more information on how to do that by following: Getting Started section. Setup section.","title":"Start Eclipse Dirigible"},{"location":"tutorials/modeling/bpmn-process/#create-project","text":"Go to the Projects perspective and create New Project . Enter sample-bpm for the name of the project. The project will appear under the projects list.","title":"Create Project"},{"location":"tutorials/modeling/bpmn-process/#create-javascript-process-task-handlers","text":"JavaScript handlers should be provided for the Service Task steps in the Business Process . The following handlers will be executed during the Approve Time Entry Request , Deny Time Entry Request and Send Notification tasks. Right click on the sample-bpm project and select New \u2192 Folder . Enter tasks for the name of the folder. Create approve-request.js , reject-request.js and send-notification.js files. approve-request.js reject-request.js send-notification.js Right click on the tasks folder and select New \u2192 JavaScript CJS Service . Enter approve-request.js for the name of the file. Double-click to open the file. Replace the content with the following: const process = require ( \"bpm/v4/process\" ); const mailClient = require ( \"mail/v4/client\" ); const config = require ( \"core/v4/configurations\" ); let execution = process . getExecutionContext (); let executionId = execution . getId (); let user = process . getVariable ( executionId , \"user\" ); console . log ( `Time Entry Request Approved for User [ ${ user } ]` ); if ( isMailConfigured ()) { let from = config . get ( \"APP_SAMPLE_BPM_FROM_EMAIL\" ); let to = config . get ( \"APP_SAMPLE_BPM_TO_EMAIL\" ); let subject = \"Time Entry Request - Approved\" ; let content = `<h2>Status:</h2><h4>Time Entry Request for [ ${ user } ] - Approved</4>` ; let subType = \"html\" ; mailClient . send ( from , to , subject , content , subType ); } else { console . error ( \"Missing mail configuration\" ); } function isMailConfigured () { return config . get ( \"DIRIGIBLE_MAIL_USERNAME\" ) != \"\" && config . get ( \"DIRIGIBLE_MAIL_PASSWORD\" ) != \"\" && config . get ( \"DIRIGIBLE_MAIL_TRANSPORT_PROTOCOL\" ) != \"\" && config . get ( \"DIRIGIBLE_MAIL_SMTPS_HOST\" ) != \"\" && config . get ( \"DIRIGIBLE_MAIL_SMTPS_PORT\" ) != \"\" && config . get ( \"APP_SAMPLE_BPM_FROM_EMAIL\" ) != \"\" && config . get ( \"APP_SAMPLE_BPM_TO_EMAIL\" ) != \"\" } Save the changes. Right click on the tasks folder and select New \u2192 JavaScript CJS Service . Enter reject-request.js for the name of the file. Double-click to open the file. Replace the content with the following: const process = require ( \"bpm/v4/process\" ); const mailClient = require ( \"mail/v4/client\" ); const config = require ( \"core/v4/configurations\" ); let execution = process . getExecutionContext (); let executionId = execution . getId (); let user = process . getVariable ( executionId , \"user\" ); console . error ( `Time Entry Request Rejected for User [ ${ user } ]` ); if ( isMailConfigured ()) { let from = config . get ( \"APP_SAMPLE_BPM_FROM_EMAIL\" ); let to = config . get ( \"APP_SAMPLE_BPM_TO_EMAIL\" ); let subject = \"Time Entry Request - Rejected\" ; let content = `<h2>Status:</h2><h4>Time Entry Request for [ ${ user } ] - Rejected</h4>` ; let subType = \"html\" ; mailClient . send ( from , to , subject , content , subType ); } else { console . error ( \"Missing mail configuration\" ); } function isMailConfigured () { return config . get ( \"DIRIGIBLE_MAIL_USERNAME\" ) != \"\" && config . get ( \"DIRIGIBLE_MAIL_PASSWORD\" ) != \"\" && config . get ( \"DIRIGIBLE_MAIL_TRANSPORT_PROTOCOL\" ) != \"\" && config . get ( \"DIRIGIBLE_MAIL_SMTPS_HOST\" ) != \"\" && config . get ( \"DIRIGIBLE_MAIL_SMTPS_PORT\" ) != \"\" && config . get ( \"APP_SAMPLE_BPM_FROM_EMAIL\" ) != \"\" && config . get ( \"APP_SAMPLE_BPM_TO_EMAIL\" ) != \"\" } Save the changes. Right click on the tasks folder and select New \u2192 JavaScript CJS Service . Enter send-notification.js for the name of the file. Double-click to open the file. Replace the content with the following: const process = require ( \"bpm/v4/process\" ); const base64 = require ( \"utils/v4/base64\" ); const mailClient = require ( \"mail/v4/client\" ); const config = require ( \"core/v4/configurations\" ); let execution = process . getExecutionContext (); let executionId = execution . getId (); let data = { executionId : executionId , User : process . getVariable ( executionId , \"User\" ), Project : process . getVariable ( executionId , \"Project\" ), Start : process . getVariable ( executionId , \"Start\" ), End : process . getVariable ( executionId , \"End\" ), Hours : process . getVariable ( executionId , \"Hours\" ) }; let urlEncodedData = base64 . encode ( JSON . stringify ( data )); let url = `http://localhost:8080/services/v4/web/sample-bpm/process/?data= ${ urlEncodedData } ` ; console . log ( `Approve Request URL: ${ url } ` ); if ( isMailConfigured ()) { let from = config . get ( \"APP_SAMPLE_BPM_FROM_EMAIL\" ); let to = config . get ( \"APP_SAMPLE_BPM_TO_EMAIL\" ); let subject = \"Time Entry Request - Pending\" ; let content = `<h2>Status:</h2><h4>Time Entry Request for [ ${ data . User } ] - Pending</h4>Click <a href=\" ${ url } \" target=\"_blank\">here</a> to process request.` ; let subType = \"html\" ; mailClient . send ( from , to , subject , content , subType ); } else { console . error ( \"Missing mail configuration\" ); } function isMailConfigured () { return config . get ( \"DIRIGIBLE_MAIL_USERNAME\" ) != \"\" && config . get ( \"DIRIGIBLE_MAIL_PASSWORD\" ) != \"\" && config . get ( \"DIRIGIBLE_MAIL_TRANSPORT_PROTOCOL\" ) != \"\" && config . get ( \"DIRIGIBLE_MAIL_SMTPS_HOST\" ) != \"\" && config . get ( \"DIRIGIBLE_MAIL_SMTPS_PORT\" ) != \"\" && config . get ( \"APP_SAMPLE_BPM_FROM_EMAIL\" ) != \"\" && config . get ( \"APP_SAMPLE_BPM_TO_EMAIL\" ) != \"\" } Save the changes.","title":"Create JavaScript Process Task Handlers"},{"location":"tutorials/modeling/bpmn-process/#create-business-process-model","text":"Right click on the sample-bpm project and select New \u2192 Business Process Model . Enter time-entry-request.bpmn for the name of the business process. Manual Steps XML Double-click the time-entry-request.bpmn file to open it with the Flowable Editor . Click on the Process identifier field and change the value to time-entry-request . Click on the Name field and change the value to Time Entry Request . Click on the MyServiceTasks to select the first step of the business process. Click on the Name field and change the value to Send Notification . Scroll down to the Class fields and click on it. Change the handler filed to sample-bpm/tasks/send-notification.js . JavaScript Task Handler The value of the handler field (e.g. sample-bpm/tasks/send-notification.js ) points to the location of the javascript task handler created in the previous step. Delete the arrow comming out of the Send Notification step. Expand the Activities group and drag and drop new User task to editor area. Connect the Send Notification task and the newly created user task. User Task Once the business process is triggered, it would stop at the Process Time Entry Request user task and it will wait for process continuation after the user task is completed. Select the user task. Click on the Name field and change the value to Process Time Entry Request . Create Choice gateway comming out of the Process Time Entry Request user task. Expand the Activities group and drag and drop new Service task to editor area. Select the service task. Click on the Name field and change the value to Approve Time Entry Request . Scroll down to the Class fields and click on it. Change the handler filed to sample-bpm/tasks/approve-request.js . Expand the Activities group and drag and drop new Service task to editor area. Select the service task. Click on the Name field and change the value to Reject Time Entry Request . Scroll down to the Class fields and click on it. Change the handler filed to sample-bpm/tasks/reject-request.js . Connect the Choice gateway with the Approve Time Entry Request and Reject Time Entry Request steps. Select the connection between the Choice gateway and the Reject Time Entry Request step. Click on the Default flow checkbox. Select the connection between the Choice gateway and the Approve Time Entry Request step. Click on the Flow condition field and change the value to ${isRequestApproved} . Flow Condition In the flow condition isRequestApproved is a process context variable, that would be set as part of the process continuation after the completion of the Process Time Entry Request user task. Connect the Approve Time Entry Request and Reject Time Entry Request steps with the end event. Save the changes. Right click on the time-entry-request.bpmn file and select Open With \u2192 Code Editor . Replace the content with the following: <?xml version='1.0' encoding='UTF-8'?> <definitions xmlns= \"http://www.omg.org/spec/BPMN/20100524/MODEL\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd= \"http://www.w3.org/2001/XMLSchema\" xmlns:flowable= \"http:// flowable.org/bpmn\" xmlns:bpmndi= \"http://www.omg.org/spec/BPMN/20100524/DI\" xmlns:omgdc= \"http://www.omg.org/spec/DD/20100524/DC\" xmlns:omgdi= \"http://www.omg.org/spec/DD/20100524/DI\" typeLanguage= \"http://www.w3.org/2001/XMLSchema\" expressionLanguage= \"http://www.w3.org/1999/XPath\" targetNamespace= \"http://www.flowable.org/processdef\" exporter= \"Flowable Open Source Modeler\" exporterVersion= \"6.7.2\" > <process id= \"time-entry-request\" name= \"Time Entry Request\" isExecutable= \"true\" > <startEvent id= \"sid-3334E861-7999-4B89-B8B0-11724BA17A3E\" /> <serviceTask id= \"sid-ED1BBD7E-41C4-42D7-A933-2CD979372BE7\" name= \"Send Notification\" flowable:class= \"org.eclipse.dirigible.bpm.flowable.DirigibleCallDelegate\" > <extensionElements> <flowable:field name= \"handler\" > <flowable:string> <![CDATA[sample-bpm/tasks/send-notification.js]]> </flowable:string> </flowable:field> </extensionElements> </serviceTask> <sequenceFlow id= \"sid-797626AE-B2F6-4C00-ABEE-FB30ADC177E4\" sourceRef= \"sid-3334E861-7999-4B89-B8B0-11724BA17A3E\" targetRef= \"sid-ED1BBD7E-41C4-42D7-A933-2CD979372BE7\" /> <endEvent id= \"sid-70B488C1-384A-4E19-8091-1B12D1AEC7FD\" /> <userTask id= \"sid-1949B473-2C74-4A44-BBB5-EA6235D62426\" name= \"Process Time Entry Request\" /> <serviceTask id= \"sid-07258D72-C009-406E-82EE-512FC68F9339\" name= \"Approve Time Entry Request\" flowable:class= \"org.eclipse.dirigible.bpm.flowable.DirigibleCallDelegate\" > <extensionElements> <flowable:field name= \"handler\" > <flowable:string> <![CDATA[sample-bpm/tasks/approve-request.js]]> </flowable:string> </flowable:field> </extensionElements> </serviceTask> <exclusiveGateway id= \"sid-9D358738-173A-49C8-8B5C-DE28F95CF812\" default= \"sid-354260C8-2700-4D26-ACB3-03990B1B83B6\" /> <sequenceFlow id= \"sid-A3B49B75-2D22-4D46-A01D-89663F5D9398\" sourceRef= \"sid-1949B473-2C74-4A44-BBB5-EA6235D62426\" targetRef= \"sid-9D358738-173A-49C8-8B5C-DE28F95CF812\" /> <sequenceFlow id= \"sid-645847E8-C959-48BD-816B-2E9CC4A2F08A\" sourceRef= \"sid-ED1BBD7E-41C4-42D7-A933-2CD979372BE7\" targetRef= \"sid-1949B473-2C74-4A44-BBB5-EA6235D62426\" /> <serviceTask id= \"sid-EBA0B783-C844-4C0D-AFAD-18699F661DB4\" name= \"Reject Time Entry Request\" flowable:class= \"org.eclipse.dirigible.bpm.flowable.DirigibleCallDelegate\" > <extensionElements> <flowable:field name= \"handler\" > <flowable:string> <![CDATA[sample-bpm/tasks/reject-request.js]]> </flowable:string> </flowable:field> </extensionElements> </serviceTask> <sequenceFlow id= \"sid-23401766-A5CA-4A91-8187-EDDCCD2BC5D5\" sourceRef= \"sid-EBA0B783-C844-4C0D-AFAD-18699F661DB4\" targetRef= \"sid-70B488C1-384A-4E19-8091-1B12D1AEC7FD\" /> <sequenceFlow id= \"sid-4CFA2E86-C3CD-4290-95B9-010BC9C0BEDC\" sourceRef= \"sid-07258D72-C009-406E-82EE-512FC68F9339\" targetRef= \"sid-70B488C1-384A-4E19-8091-1B12D1AEC7FD\" /> <sequenceFlow id= \"sid-354260C8-2700-4D26-ACB3-03990B1B83B6\" sourceRef= \"sid-9D358738-173A-49C8-8B5C-DE28F95CF812\" targetRef= \"sid-EBA0B783-C844-4C0D-AFAD-18699F661DB4\" /> <sequenceFlow id= \"sid-300248C3-876E-4B89-86F4-E978FA150CA5\" sourceRef= \"sid-9D358738-173A-49C8-8B5C-DE28F95CF812\" targetRef= \"sid-07258D72-C009-406E-82EE-512FC68F9339\" > <conditionExpression xsi:type= \"tFormalExpression\" > <![CDATA[${isRequestApproved}]]> </conditionExpression> </sequenceFlow> </process> <bpmndi:BPMNDiagram id= \"BPMNDiagram_time-entry-request\" > <bpmndi:BPMNPlane bpmnElement= \"time-entry-request\" id= \"BPMNPlane_time-entry-request\" > <bpmndi:BPMNShape bpmnElement= \"sid-3334E861-7999-4B89-B8B0-11724BA17A3E\" id= \"BPMNShape_sid-3334E861-7999-4B89-B8B0-11724BA17A3E\" > <omgdc:Bounds height= \"30.0\" width= \"30.0\" x= \"103.0\" y= \"78.0\" /> </bpmndi:BPMNShape> <bpmndi:BPMNShape bpmnElement= \"sid-ED1BBD7E-41C4-42D7-A933-2CD979372BE7\" id= \"BPMNShape_sid-ED1BBD7E-41C4-42D7-A933-2CD979372BE7\" > <omgdc:Bounds height= \"80.0\" width= \"100.0\" x= \"180.0\" y= \"52.0\" /> </bpmndi:BPMNShape> <bpmndi:BPMNShape bpmnElement= \"sid-70B488C1-384A-4E19-8091-1B12D1AEC7FD\" id= \"BPMNShape_sid-70B488C1-384A-4E19-8091-1B12D1AEC7FD\" > <omgdc:Bounds height= \"28.00000000000003\" width= \"28.0\" x= \"683.3333061801073\" y= \"233.33332406150006\" /> </bpmndi:BPMNShape> <bpmndi:BPMNShape bpmnElement= \"sid-1949B473-2C74-4A44-BBB5-EA6235D62426\" id= \"BPMNShape_sid-1949B473-2C74-4A44-BBB5-EA6235D62426\" > <omgdc:Bounds height= \"80.0\" width= \"100.0\" x= \"315.0\" y= \"52.0\" /> </bpmndi:BPMNShape> <bpmndi:BPMNShape bpmnElement= \"sid-07258D72-C009-406E-82EE-512FC68F9339\" id= \"BPMNShape_sid-07258D72-C009-406E-82EE-512FC68F9339\" > <omgdc:Bounds height= \"80.0\" width= \"100.0\" x= \"450.0\" y= \"144.99999999999997\" /> </bpmndi:BPMNShape> <bpmndi:BPMNShape bpmnElement= \"sid-9D358738-173A-49C8-8B5C-DE28F95CF812\" id= \"BPMNShape_sid-9D358738-173A-49C8-8B5C-DE28F95CF812\" > <omgdc:Bounds height= \"40.0\" width= \"40.0\" x= \"345.0\" y= \"165.0\" /> </bpmndi:BPMNShape> <bpmndi:BPMNShape bpmnElement= \"sid-EBA0B783-C844-4C0D-AFAD-18699F661DB4\" id= \"BPMNShape_sid-EBA0B783-C844-4C0D-AFAD-18699F661DB4\" > <omgdc:Bounds height= \"80.0\" width= \"100.0\" x= \"450.0\" y= \"240.0\" /> </bpmndi:BPMNShape> <bpmndi:BPMNEdge bpmnElement= \"sid-797626AE-B2F6-4C00-ABEE-FB30ADC177E4\" id= \"BPMNEdge_sid-797626AE-B2F6-4C00-ABEE-FB30ADC177E4\" flowable:sourceDockerX= \"15.0\" flowable:sourceDockerY= \"15.0\" flowable:targetDockerX= \"50.0\" flowable:targetDockerY= \"40.0\" > <omgdi:waypoint x= \"132.9494165151691\" y= \"92.86607665568077\" /> <omgdi:waypoint x= \"179.99999999999878\" y= \"92.44598214285713\" /> </bpmndi:BPMNEdge> <bpmndi:BPMNEdge bpmnElement= \"sid-645847E8-C959-48BD-816B-2E9CC4A2F08A\" id= \"BPMNEdge_sid-645847E8-C959-48BD-816B-2E9CC4A2F08A\" flowable:sourceDockerX= \"50.0\" flowable:sourceDockerY= \"40.0\" flowable:targetDockerX= \"50.0\" flowable:targetDockerY= \"40.0\" > <omgdi:waypoint x= \"279.95000000000005\" y= \"92.0\" /> <omgdi:waypoint x= \"314.9999999999962\" y= \"92.0\" /> </bpmndi:BPMNEdge> <bpmndi:BPMNEdge bpmnElement= \"sid-23401766-A5CA-4A91-8187-EDDCCD2BC5D5\" id= \"BPMNEdge_sid-23401766-A5CA-4A91-8187-EDDCCD2BC5D5\" flowable:sourceDockerX= \"50.0\" flowable:sourceDockerY= \"40.0\" flowable:targetDockerX= \"14.0\" flowable:targetDockerY= \"14.000000000000014\" > <omgdi:waypoint x= \"549.9499999999998\" y= \"271.7229694847648\" /> <omgdi:waypoint x= \"683.5191504285505\" y= \"249.61196067916165\" /> </bpmndi:BPMNEdge> <bpmndi:BPMNEdge bpmnElement= \"sid-4CFA2E86-C3CD-4290-95B9-010BC9C0BEDC\" id= \"BPMNEdge_sid-4CFA2E86-C3CD-4290-95B9-010BC9C0BEDC\" flowable:sourceDockerX= \"50.0\" flowable:sourceDockerY= \"40.0\" flowable:targetDockerX= \"14.0\" flowable:targetDockerY= \"14.000000000000014\" > <omgdi:waypoint x= \"549.95\" y= \"200.77812482414993\" /> <omgdi:waypoint x= \"683.9707941300649\" y= \"243.1152758099949\" /> </bpmndi:BPMNEdge> <bpmndi:BPMNEdge bpmnElement= \"sid-354260C8-2700-4D26-ACB3-03990B1B83B6\" id= \"BPMNEdge_sid-354260C8-2700-4D26-ACB3-03990B1B83B6\" flowable:sourceDockerX= \"20.0\" flowable:sourceDockerY= \"20.0\" flowable:targetDockerX= \"50.0\" flowable:targetDockerY= \"40.0\" > <omgdi:waypoint x= \"365.0\" y= \"204.93951104100947\" /> <omgdi:waypoint x= \"365.0\" y= \"280.0\" /> <omgdi:waypoint x= \"449.99999999997203\" y= \"280.0\" /> </bpmndi:BPMNEdge> <bpmndi:BPMNEdge bpmnElement= \"sid-A3B49B75-2D22-4D46-A01D-89663F5D9398\" id= \"BPMNEdge_sid-A3B49B75-2D22-4D46-A01D-89663F5D9398\" flowable:sourceDockerX= \"50.0\" flowable:sourceDockerY= \"40.0\" flowable:targetDockerX= \"20.0\" flowable:targetDockerY= \"20.0\" > <omgdi:waypoint x= \"365.0\" y= \"131.95\" /> <omgdi:waypoint x= \"365.0\" y= \"165.0\" /> </bpmndi:BPMNEdge> <bpmndi:BPMNEdge bpmnElement= \"sid-300248C3-876E-4B89-86F4-E978FA150CA5\" id= \"BPMNEdge_sid-300248C3-876E-4B89-86F4-E978FA150CA5\" flowable:sourceDockerX= \"20.0\" flowable:sourceDockerY= \"20.0\" flowable:targetDockerX= \"50.0\" flowable:targetDockerY= \"40.0\" > <omgdi:waypoint x= \"384.94261658031087\" y= \"185.0\" /> <omgdi:waypoint x= \"450.0\" y= \"184.99999999999997\" /> </bpmndi:BPMNEdge> </bpmndi:BPMNPlane> </bpmndi:BPMNDiagram> </definitions> Save the changes. Business Process Synchronization Usually when the *.bpmn process is saved it would take between one and two minutes to be deployed and active. After that period of time the business process can be executed. The synchronization period by default is set to 50 seconds ( 0/50 * * * * ? ) . Find out more about the Job Expression environment variables. Updating the *.bpmn file would result in new synchronization being triggered and the updated process flow would be available after minute or two. Updating the JavaScript Task Handler won't require new synchronization and the new behaviour of the handlers will be available on the fly.","title":"Create Business Process Model"},{"location":"tutorials/modeling/bpmn-process/#create-process-api","text":"To trigger and continue the BPMN Process execution a server-side JavaScript API will be created. Right click on the sample-bpm project and select New \u2192 Folder . Enter api for the name of the folder. Create process.js file. process.js Right click on the api folder and select New \u2192 JavaScript CJS Service . Enter process.js for the name of the file. Double-click to open the file. Replace the content with the following: const rs = require ( \"http/v4/rs\" ); const process = require ( \"bpm/v4/process\" ); const tasks = require ( \"bpm/v4/tasks\" ); const user = require ( \"security/v4/user\" ); rs . service () . post ( \"\" , ( ctx , request , response ) => { let data = request . getJSON (); process . start ( 'time-entry-request' , { \"User\" : \"\" + user . getName (), \"Project\" : \"\" + data . Project , \"Start\" : \"\" + data . Start , \"End\" : \"\" + data . End , \"Hours\" : \"\" + data . Hours }); response . setStatus ( response . ACCEPTED ); }) . resource ( \"continue/:executionId\" ) . post (( ctx , request , response ) => { let executionId = request . params . executionId ; let tasksList = tasks . list (); let data = request . getJSON (); for ( const task of tasksList ) { if ( task . executionId . toString () === executionId . toString ()) { tasks . completeTask ( task . id , { isRequestApproved : data . approved , user : data . user }); break ; } } response . setStatus ( response . ACCEPTED ); }) . execute ()","title":"Create Process API"},{"location":"tutorials/modeling/bpmn-process/#create-submit-form","text":"The submit form would call the server-side javascript api that was created in the previous step and will trigger the business process. Right click on the sample-bpm project and select New \u2192 Folder . Enter submit for the name of the folder. Create index.html and controller.js files. index.html controller.js Right click on the submit folder and select New \u2192 HTML5 Page . Enter index.html for the name of the file. Double-click to open the file. Replace the content with the following: <!DOCTYPE HTML> < html lang = \"en\" xmlns = \"http://www.w3.org/1999/xhtml\" ng-app = \"page\" ng-controller = \"PageController\" > < head > < meta charset = \"utf-8\" > < meta http-equiv = \"X-UA-Compatible\" content = \"IE=edge\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > < link rel = \"icon\" href = \"data:;base64,iVBORw0KGgo=\" dg-brand-icon /> < title dg-brand-title ></ title > < theme ></ theme > < script type = \"text/javascript\" src = \"/services/v4/js/resources-core/services/loader.js?id=application-view-js\" > </ script > < link type = \"text/css\" rel = \"stylesheet\" href = \"/services/v4/js/resources-core/services/loader.js?id=application-view-css\" /> < script type = \"text/javascript\" src = \"controller.js\" ></ script > </ head > < body class = \"dg-vbox\" dg-contextmenu = \"contextMenuContent\" > < div > < fd-message-page glyph = \"sap-icon--time-entry-request\" > < fd-message-page-title > Submit Time Entry Request </ fd-message-page-title > < fd-message-page-subtitle > < fd-scrollbar class = \"dg-full-height\" > < fd-fieldset class = \"fd-margin--md\" ng-form = \"formFieldset\" > < fd-form-group name = \"entityForm\" > < fd-form-item horizontal = \"false\" > < fd-form-label for = \"idProject\" dg-required = \"true\" dg-colon = \"true\" > Project </ fd-form-label > < fd-combobox-input id = \"idProject\" name = \"Project\" state = \"{{ formErrors.Project ? 'error' : '' }}\" ng-required = \"true\" ng-change = \"isValid(formFieldset['Project'].$valid, 'Project')\" ng-model = \"entity.Project\" dropdown-items = \"optionsProject\" dg-placeholder = \"Search Project ...\" > </ fd-combobox-input > </ fd-form-item > < fd-form-item horizontal = \"false\" > < fd-form-label for = \"idStart\" dg-required = \"true\" dg-colon = \"true\" > Start </ fd-form-label > < fd-form-input-message-group dg-inactive = \"{{ formErrors.Start ? false : true }}\" > < fd-input id = \"idStart\" name = \"Start\" state = \"{{ formErrors.Start ? 'error' : '' }}\" ng-required = \"true\" ng-change = \"isValid(formFieldset['Start'].$valid, 'Start')\" ng-model = \"entity.Start\" type = \"date\" > </ fd-input > < fd-form-message dg-type = \"error\" > Incorrect Input </ fd-form-message > </ fd-form-input-message-group > </ fd-form-item > < fd-form-item horizontal = \"false\" > < fd-form-label for = \"idEnd\" dg-required = \"true\" dg-colon = \"true\" > End </ fd-form-label > < fd-form-input-message-group dg-inactive = \"{{ formErrors.End ? false : true }}\" > < fd-input id = \"idEnd\" name = \"End\" state = \"{{ formErrors.End ? 'error' : '' }}\" ng-required = \"true\" ng-change = \"isValid(formFieldset['End'].$valid, 'End')\" ng-model = \"entity.End\" type = \"date\" > </ fd-input > < fd-form-message dg-type = \"error\" > Incorrect Input </ fd-form-message > </ fd-form-input-message-group > </ fd-form-item > < fd-form-item horizontal = \"false\" > < fd-form-label for = \"idHours\" dg-required = \"true\" dg-colon = \"true\" > Hours </ fd-form-label > < fd-form-input-message-group dg-inactive = \"{{ formErrors.Hours ? false : true }}\" > < fd-input id = \"idHours\" name = \"Hours\" state = \"{{ formErrors.Hours ? 'error' : '' }}\" ng-required = \"true\" ng-change = \"isValid(formFieldset['Hours'].$valid, 'Hours')\" ng-model = \"entity.Hours\" min = \"0\" max = \"40\" dg-input-rules = \"{ patterns: [''] }\" type = \"number\" placeholder = \"Enter Hours\" > </ fd-input > < fd-form-message dg-type = \"error\" > Incorrect Input </ fd-form-message > </ fd-form-input-message-group > </ fd-form-item > </ fd-form-group > </ fd-fieldset > </ fd-scrollbar > </ fd-message-page-subtitle > < fd-message-page-actions > < fd-button class = \"fd-margin-end--tiny fd-dialog__decisive-button\" compact = \"true\" dg-type = \"emphasized\" dg-label = \"Submit\" ng-click = \"submit()\" state = \"{{ !isFormValid ? 'disabled' : '' }}\" > </ fd-button > < fd-button class = \"fd-dialog__decisive-button\" compact = \"true\" dg-type = \"transparent\" dg-label = \"Cancel\" ng-click = \"resetForm()\" ></ fd-button > </ fd-message-page-actions > </ fd-message-page > </ div > </ body > </ html > Right click on the api folder and select New \u2192 File . Enter controller.js for the name of the file. Double-click to open the file. Replace the content with the following: angular . module ( 'page' , [ \"ideUI\" , \"ideView\" ]) . controller ( 'PageController' , [ '$scope' , '$http' , function ( $scope , $http ) { $scope . entity = {}; $scope . optionsProject = [{ text : \"Project Alpha\" , value : \"Project Alpha\" }, { text : \"Project Beta\" , value : \"Project Beta\" }, { text : \"Project Evolution\" , value : \"Project Evolution\" }, { text : \"Project Next\" , value : \"Project Next\" }]; $scope . isValid = function ( isValid , property ) { $scope . formErrors [ property ] = ! isValid ? true : undefined ; for ( let next in $scope . formErrors ) { if ( $scope . formErrors [ next ] === true ) { $scope . isFormValid = false ; return ; } } $scope . isFormValid = true ; }; $scope . submit = function () { $http . post ( \"/services/v4/js/sample-bpm/api/process.js\" , JSON . stringify ( $scope . entity )). then ( function ( response ) { if ( response . status != 202 ) { alert ( `Unable to submit Time Entry Request: ' ${ response . message } '` ); $scope . resetForm (); return ; } alert ( \"Time Entry Request successfully submitted\" ); $scope . resetForm (); }); }; $scope . resetForm = function () { $scope . entity = {}; $scope . formErrors = { Project : true , Start : true , End : true , Hours : true , }; }; $scope . resetForm (); }]);","title":"Create Submit Form"},{"location":"tutorials/modeling/bpmn-process/#create-process-form","text":"The process form would call the server-side javascript api that was created before and will resume the business process execution. Right click on the sample-bpm project and select New \u2192 Folder . Enter process for the name of the folder. Create index.html and controller.js files. index.html controller.js Right click on the process folder and select New \u2192 HTML5 Page . Enter index.html for the name of the file. Double-click to open the file. Replace the content with the following: <!DOCTYPE HTML> < html lang = \"en\" xmlns = \"http://www.w3.org/1999/xhtml\" ng-app = \"page\" ng-controller = \"PageController\" > < head > < meta charset = \"utf-8\" > < meta http-equiv = \"X-UA-Compatible\" content = \"IE=edge\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > < link rel = \"icon\" href = \"data:;base64,iVBORw0KGgo=\" dg-brand-icon /> < title dg-brand-title ></ title > < theme ></ theme > < script type = \"text/javascript\" src = \"/services/v4/js/resources-core/services/loader.js?id=application-view-js\" > </ script > < link type = \"text/css\" rel = \"stylesheet\" href = \"/services/v4/js/resources-core/services/loader.js?id=application-view-css\" /> < script type = \"text/javascript\" src = \"controller.js\" ></ script > </ head > < body class = \"dg-vbox\" dg-contextmenu = \"contextMenuContent\" > < div > < fd-message-page glyph = \"sap-icon--approvals\" > < fd-message-page-title > Approve Time Entry Request </ fd-message-page-title > < fd-message-page-subtitle > < fd-scrollbar class = \"dg-full-height\" > < fd-fieldset class = \"fd-margin--md\" ng-form = \"formFieldset\" > < fd-form-group name = \"entityForm\" > < fd-form-item horizontal = \"false\" > < fd-form-label for = \"idHours\" dg-colon = \"true\" > Hours </ fd-form-label > < fd-form-input-message-group > < fd-input id = \"idProject\" name = \"Project\" ng-model = \"entity.Project\" type = \"input\" ng-readonly = \"true\" > </ fd-input > < fd-form-message dg-type = \"error\" > Incorrect Input </ fd-form-message > </ fd-form-input-message-group > </ fd-form-item > < fd-form-item horizontal = \"false\" > < fd-form-label for = \"idStart\" dg-colon = \"true\" > Start </ fd-form-label > < fd-form-input-message-group > < fd-input id = \"idStart\" name = \"Start\" ng-model = \"entity.Start\" type = \"date\" ng-readonly = \"true\" > </ fd-input > < fd-form-message dg-type = \"error\" > Incorrect Input </ fd-form-message > </ fd-form-input-message-group > </ fd-form-item > < fd-form-item horizontal = \"false\" > < fd-form-label for = \"idEnd\" dg-colon = \"true\" > End </ fd-form-label > < fd-form-input-message-group > < fd-input id = \"idEnd\" name = \"End\" ng-model = \"entity.End\" type = \"date\" ng-readonly = \"true\" > </ fd-input > < fd-form-message dg-type = \"error\" > Incorrect Input </ fd-form-message > </ fd-form-input-message-group > </ fd-form-item > < fd-form-item horizontal = \"false\" > < fd-form-label for = \"idHours\" dg-colon = \"true\" > Hours </ fd-form-label > < fd-form-input-message-group > < fd-input id = \"idHours\" name = \"Hours\" ng-model = \"entity.Hours\" type = \"number\" ng-readonly = \"true\" > </ fd-input > < fd-form-message dg-type = \"error\" > Incorrect Input </ fd-form-message > </ fd-form-input-message-group > </ fd-form-item > </ fd-form-group > </ fd-fieldset > </ fd-scrollbar > </ fd-message-page-subtitle > < fd-message-page-actions > < fd-button class = \"fd-margin-end--tiny fd-dialog__decisive-button\" compact = \"true\" dg-type = \"emphasized\" dg-label = \"Approve\" ng-click = \"approve()\" > </ fd-button > < fd-button class = \"fd-dialog__decisive-button\" compact = \"true\" dg-type = \"negative\" dg-label = \"Reject\" ng-click = \"reject()\" ></ fd-button > </ fd-message-page-actions > </ fd-message-page > </ div > </ body > </ html > Right click on the process folder and select New \u2192 File . Enter controller.js for the name of the file. Double-click to open the file. Replace the content with the following: angular . module ( 'page' , [ \"ideUI\" , \"ideView\" ]) . controller ( 'PageController' , [ '$scope' , '$http' , '$location' , function ( $scope , $http , $location ) { let data = JSON . parse ( atob ( window . location . search . split ( \"=\" )[ 1 ])); $scope . executionId = data . executionId ; $scope . user = data . User ; $scope . entity = { Project : data . Project , Start : new Date ( data . Start ), End : new Date ( data . End ), Hours : parseInt ( data . Hours ) }; $scope . approve = function () { $http . post ( \"/services/v4/js/sample-bpm/api/process.js/continue/\" + $scope . executionId , JSON . stringify ( { user : $scope . user , approved : true } )). then ( function ( response ) { if ( response . status != 202 ) { alert ( `Unable to approve Time Entry Request: ' ${ response . message } '` ); return ; } $scope . entity = {}; alert ( \"Time Entry Request Approved\" ); }); }; $scope . reject = function () { $http . post ( \"/services/v4/js/sample-bpm/api/process.js/continue/\" + $scope . executionId , JSON . stringify ( { user : $scope . user , approved : false } )). then ( function ( response ) { if ( response . status != 202 ) { alert ( `Unable to reject Time Entry Request: ' ${ response . message } '` ); return ; } $scope . entity = {}; alert ( \"Time Entry Request Rejected\" ); }); }; }]);","title":"Create Process Form"},{"location":"tutorials/modeling/bpmn-process/#optional-email-configuration","text":"In order to recieve email notifications about the process steps a mail configuration should be provided. The following environment variables are needed: DIRIGIBLE_MAIL_USERNAME=<YOUR_MAIL_USERNAME> DIRIGIBLE_MAIL_PASSWORD=<YOUR_MAIL_PASSWORD> DIRIGIBLE_MAIL_TRANSPORT_PROTOCOL=smtps DIRIGIBLE_MAIL_SMTPS_HOST=<YOUR_MAIL_HOST> DIRIGIBLE_MAIL_SMTPS_PORT=465 APP_SAMPLE_BPM_FROM_EMAIL=<SENDER_EMAIL> APP_SAMPLE_BPM_TO_EMAIL=<RECEIVER_EMAIL> Connecting Eclipse Dirigible with SendGrid SMTP Relay To use a gmail account for the mail configuration follow the steps in the Connecting Eclipse Dirigible with SendGrid SMTP Relay blog. DIRIGIBLE_MAIL_USERNAME=apikey DIRIGIBLE_MAIL_PASSWORD=<YOUR_API_KEY_HERE> DIRIGIBLE_MAIL_TRANSPORT_PROTOCOL=smtps DIRIGIBLE_MAIL_SMTPS_HOST=smtp.sendgrid.net DIRIGIBLE_MAIL_SMTPS_PORT=465 APP_SAMPLE_BPM_FROM_EMAIL=<SENDER_EMAIL> APP_SAMPLE_BPM_TO_EMAIL=<RECEIVER_EMAIL>","title":"(Optional) Email Configuration"},{"location":"tutorials/modeling/bpmn-process/#demo","text":"Navigate to http://localhost:8080/services/v4/web/sample-bpm/submit/ to open the Submit form . Enter the required data and press the Submit button. If email configuration was provided an email notification will be send to the email address set by the APP_SAMPLE_BPM_TO_EMAIL=<RECEIVER_EMAIL> environment variable. If email configuration wasn't provided then in the Console view the following message can be found: ` Approve Request URL: http://localhost:8080/services/v4/web/sample-bpm/process/?data=eyJleGVjdXRpb25JZCI6IjE4Ni... Open the URL from the Console view or open it from the email notification. The Process form would be prefilled with the data that was entered in the Submit form . Press the Approve or Reject button to resume the process execution. One more email notification would be send and message in the Console would be logged as part of the last step of the Business Process . BPM Sample GitHub Repository Go to https://github.com/dirigiblelabs/sample-bpm to find the complete sample. The repository can be clone in the Git perspective and after few minutes the BPM Sample would be active.","title":"Demo"},{"location":"tutorials/modeling/generate-application-from-model/","text":"Generate Application from Model This tutorial will guide you through the creation of an entity data model and generation of a full-stack Dirigible application, from this model. Prerequisites Access to the latest version of Eclipse Dirigible (3.2.2+) Overview In this tutorial we will create an entity model of a car service bookings and generate full-stack Dirigible application from it. The complete sample can be found here . Setup Car Service Bookings Create new project car-service-bookings Right click -> New -> Entity Data Model Rename file.edm to car-service-bookings.edm Open car-service-bookings.edm Brands Drag and drop new entity Name it Brands Rename entityId to Id Drag and drop new property Rename property2 to Name Open the properties of the Brands entity Open the General tab Set the Type to Primary Entity Switch to the User Interface tab Set the Layout Type to Manage Master Entites Models Drag and drop new entity Name it Models Rename entityId to Id Drag and drop new property Rename property2 to Name Add new relation between Models and Brands Rename the relation property in the Models entity to BrandId Open the relation properties Set Name to Brand Set Relationship Type to Composition Set Relationship Cardinality to one-to-many Open the properties of the BrandId property Switch to the User Interface tab Set Is Major to Show in form only Open the properties of the Models entity Open the General tab Set the Type to Dependent Entity Swith to the User Interface tab Set the Layout Tab to Manage Details Entities Cars Drag and drop new entity Name it Cars Rename entityId to Id Drag and drop new property Rename property2 to PlateNumber Add new relation between Cars and Models Rename the relation property in the Cars entity to ModelId Open the properties of the ModelId property Open the Data tab Set the Data Type to INTEGER Switch to the User Interface Set Widget Type to Dropdown Set Label to Model Set Dropdown Key to Id Set Dropdown Value to Name > Note : the dropdown key and value refers respectively to the Models:Id and Models:Name values Generation Save the model Right click on car-service-bookings.model and select Generate Set Template to Full-stack Application (AngularJS) Set Extension to car-service Check Embedded mode Set Title to Car Service Set Brand to Car Service Click Generate Publish the project Extensibility Sample view based extension can be found here Wrap up The whole application can be found here Resources Sample Car Service Bookings: sample-v3-car-service-bookings Sample Data: sample-v3-car-service-bookings-data Sample Extension: sample-v3-car-service-bookings-extension","title":"Generate Application from Model"},{"location":"tutorials/modeling/generate-application-from-model/#generate-application-from-model","text":"This tutorial will guide you through the creation of an entity data model and generation of a full-stack Dirigible application, from this model.","title":"Generate Application from Model"},{"location":"tutorials/modeling/generate-application-from-model/#prerequisites","text":"Access to the latest version of Eclipse Dirigible (3.2.2+)","title":"Prerequisites"},{"location":"tutorials/modeling/generate-application-from-model/#overview","text":"In this tutorial we will create an entity model of a car service bookings and generate full-stack Dirigible application from it. The complete sample can be found here .","title":"Overview"},{"location":"tutorials/modeling/generate-application-from-model/#setup-car-service-bookings","text":"Create new project car-service-bookings Right click -> New -> Entity Data Model Rename file.edm to car-service-bookings.edm Open car-service-bookings.edm","title":"Setup Car Service Bookings"},{"location":"tutorials/modeling/generate-application-from-model/#brands","text":"Drag and drop new entity Name it Brands Rename entityId to Id Drag and drop new property Rename property2 to Name Open the properties of the Brands entity Open the General tab Set the Type to Primary Entity Switch to the User Interface tab Set the Layout Type to Manage Master Entites","title":"Brands"},{"location":"tutorials/modeling/generate-application-from-model/#models","text":"Drag and drop new entity Name it Models Rename entityId to Id Drag and drop new property Rename property2 to Name Add new relation between Models and Brands Rename the relation property in the Models entity to BrandId Open the relation properties Set Name to Brand Set Relationship Type to Composition Set Relationship Cardinality to one-to-many Open the properties of the BrandId property Switch to the User Interface tab Set Is Major to Show in form only Open the properties of the Models entity Open the General tab Set the Type to Dependent Entity Swith to the User Interface tab Set the Layout Tab to Manage Details Entities","title":"Models"},{"location":"tutorials/modeling/generate-application-from-model/#cars","text":"Drag and drop new entity Name it Cars Rename entityId to Id Drag and drop new property Rename property2 to PlateNumber Add new relation between Cars and Models Rename the relation property in the Cars entity to ModelId Open the properties of the ModelId property Open the Data tab Set the Data Type to INTEGER Switch to the User Interface Set Widget Type to Dropdown Set Label to Model Set Dropdown Key to Id Set Dropdown Value to Name > Note : the dropdown key and value refers respectively to the Models:Id and Models:Name values","title":"Cars"},{"location":"tutorials/modeling/generate-application-from-model/#generation","text":"Save the model Right click on car-service-bookings.model and select Generate Set Template to Full-stack Application (AngularJS) Set Extension to car-service Check Embedded mode Set Title to Car Service Set Brand to Car Service Click Generate Publish the project","title":"Generation"},{"location":"tutorials/modeling/generate-application-from-model/#extensibility","text":"Sample view based extension can be found here","title":"Extensibility"},{"location":"tutorials/modeling/generate-application-from-model/#wrap-up","text":"The whole application can be found here","title":"Wrap up"},{"location":"tutorials/modeling/generate-application-from-model/#resources","text":"Sample Car Service Bookings: sample-v3-car-service-bookings Sample Data: sample-v3-car-service-bookings-data Sample Extension: sample-v3-car-service-bookings-extension","title":"Resources"},{"location":"tutorials/setup/zeus-on-kubernetes-minikube/","text":"Zeus on Kubernetes These tutorials will guide you through the processes of installation of Kubernetes Minikube, deployment of Zeus and building an image with Docker: Setup on Windows on MacOS Start Minikube To run the local Kubernetes cluster execute the following command: minikube start Deploy and Run the Guestbook sample Follow the steps described in this tutorial - https://kubernetes.io/docs/tutorials/stateless-application/guestbook/ Deploy Zeus Deploy Zeus version 3 on Minikube using kubectl by executing: kubectl create -f https://raw.githubusercontent.com/dirigiblelabs/zeus-v3-package/master/zeus/zeus.yml Get the necessary information for access Get IP: minikube ip or directly: minikube dashboard Get port Execute: kubectl get services -n zeus -o go-template='{{range .items}}{{range.spec.ports}}{{if .nodePort}}{{.nodePort}}{{\"\\n\"}}{{end}}{{end}}{{end}}' or run minikube dashboard Open Zeus Cockpit From the Kubernetes Dashboard: Change the Namespace to zeus (from the sidebar menu) Select Discovery and Load Balancing (from the sidebar menu) Find the Services section and take the port of the Zeus instance. Copy the second port from the Internal endpoints column (e.g. 31111) Construct URL: {IP}:{Port} and open it in Web browser. Create Account Go to Accounts settings (via the sidebar - last icon) Select Partners view and add a new partner details Select the Accounts view and add a new account details Configure the local Cluster Go to Accounts settings (via the sidebar - last icon) Select Clusters view and add a new cluster details as follows Name: e.g. local URL: https://{IP}:8443 Token: from Minikube Dashboard, go to Config and Storage -> Secrets -> Token Account: select from the drop down Register a Container Go to Templates perspective Select the Containers view Enter the following parameters: Name: Dirigible Image: dirigiblelabs/dirigible-tomcat:latest Protocol: TCP Port: 8080 Create a Template Go to Templates perspective Select the Templates section Create a new Template named Dirigible Select the row representing the just created Template Select the Containers section below Create a new reference to the Container created in the previous step Select the Services section Create a new Service with the following details: Name: http Type: NodePort Port: 8080 Deploy the Application Go to Applications perspective Select the Deploy view Click on New button and enter the following details: Cluster: select from the drop down Template: select from the drop down Name: dirigible Undeploying Zeus If you want to undeploy Zeus, execute the following command: kubectl delete -f https://raw.githubusercontent.com/dirigiblelabs/zeus-v3-package/master/zeus/zeus.yml Stop Minikube To stop Minikube run: minikube stop","title":"Zeus on Kubernetes"},{"location":"tutorials/setup/zeus-on-kubernetes-minikube/#zeus-on-kubernetes","text":"These tutorials will guide you through the processes of installation of Kubernetes Minikube, deployment of Zeus and building an image with Docker:","title":"Zeus on Kubernetes"},{"location":"tutorials/setup/zeus-on-kubernetes-minikube/#setup","text":"on Windows on MacOS","title":"Setup"},{"location":"tutorials/setup/zeus-on-kubernetes-minikube/#start-minikube","text":"To run the local Kubernetes cluster execute the following command: minikube start","title":"Start Minikube"},{"location":"tutorials/setup/zeus-on-kubernetes-minikube/#deploy-and-run-the-guestbook-sample","text":"Follow the steps described in this tutorial - https://kubernetes.io/docs/tutorials/stateless-application/guestbook/","title":"Deploy and Run the Guestbook sample"},{"location":"tutorials/setup/zeus-on-kubernetes-minikube/#deploy-zeus","text":"Deploy Zeus version 3 on Minikube using kubectl by executing: kubectl create -f https://raw.githubusercontent.com/dirigiblelabs/zeus-v3-package/master/zeus/zeus.yml Get the necessary information for access Get IP: minikube ip or directly: minikube dashboard Get port Execute: kubectl get services -n zeus -o go-template='{{range .items}}{{range.spec.ports}}{{if .nodePort}}{{.nodePort}}{{\"\\n\"}}{{end}}{{end}}{{end}}' or run minikube dashboard","title":"Deploy Zeus"},{"location":"tutorials/setup/zeus-on-kubernetes-minikube/#open-zeus-cockpit","text":"From the Kubernetes Dashboard: Change the Namespace to zeus (from the sidebar menu) Select Discovery and Load Balancing (from the sidebar menu) Find the Services section and take the port of the Zeus instance. Copy the second port from the Internal endpoints column (e.g. 31111) Construct URL: {IP}:{Port} and open it in Web browser.","title":"Open Zeus Cockpit"},{"location":"tutorials/setup/zeus-on-kubernetes-minikube/#create-account","text":"Go to Accounts settings (via the sidebar - last icon) Select Partners view and add a new partner details Select the Accounts view and add a new account details","title":"Create Account"},{"location":"tutorials/setup/zeus-on-kubernetes-minikube/#configure-the-local-cluster","text":"Go to Accounts settings (via the sidebar - last icon) Select Clusters view and add a new cluster details as follows Name: e.g. local URL: https://{IP}:8443 Token: from Minikube Dashboard, go to Config and Storage -> Secrets -> Token Account: select from the drop down","title":"Configure the local Cluster"},{"location":"tutorials/setup/zeus-on-kubernetes-minikube/#register-a-container","text":"Go to Templates perspective Select the Containers view Enter the following parameters: Name: Dirigible Image: dirigiblelabs/dirigible-tomcat:latest Protocol: TCP Port: 8080","title":"Register a Container"},{"location":"tutorials/setup/zeus-on-kubernetes-minikube/#create-a-template","text":"Go to Templates perspective Select the Templates section Create a new Template named Dirigible Select the row representing the just created Template Select the Containers section below Create a new reference to the Container created in the previous step Select the Services section Create a new Service with the following details: Name: http Type: NodePort Port: 8080","title":"Create a Template"},{"location":"tutorials/setup/zeus-on-kubernetes-minikube/#deploy-the-application","text":"Go to Applications perspective Select the Deploy view Click on New button and enter the following details: Cluster: select from the drop down Template: select from the drop down Name: dirigible","title":"Deploy the Application"},{"location":"tutorials/setup/zeus-on-kubernetes-minikube/#undeploying-zeus","text":"If you want to undeploy Zeus, execute the following command: kubectl delete -f https://raw.githubusercontent.com/dirigiblelabs/zeus-v3-package/master/zeus/zeus.yml","title":"Undeploying Zeus"},{"location":"tutorials/setup/zeus-on-kubernetes-minikube/#stop-minikube","text":"To stop Minikube run: minikube stop","title":"Stop Minikube"},{"location":"tutorials/setup/zeus-on-macos/","text":"Zeus on Kubernetes with MacOS Prerequisites Have a Homebrew installed - https://docs.brew.sh/Installation Install Kubernetes command-line tool Run the following command: brew install kubectl To verify that the version you\u2019ve installed is up-to-date, run: kubectl version Install Minikube Install Minikube v0.27.0 curl -Lo minikube https://storage.googleapis.com/minikube/releases/v0.27.0/minikube-darwin-amd64 && chmod +x minikube && sudo mv minikube /usr/local/bin/ Additional Steps with Docker Install Docker Install it using Hombrew: brew cask install docker Open Docker.app and continue the installation of the network (Ctrl+Space) Build the image Build an image without uploading it: Set the environment variables with eval $(minikube docker-env) Clone the Zeus packaging project: git clone https://github.com/dirigiblelabs/zeus-v3-package.git Build the image with the Docker daemon of Minikube: cd zeus-v3-package/zeus mvn clean install docker build -t zeus . Set the image in the pod spec like the build tag: zeus Set the imagePullPolicy to Never , otherwise Kubernetes will try to download the image Important note: You have to run eval $(minikube docker-env) on each terminal you want to use, since it only sets the environment variables for the current shell session.","title":"Zeus on Kubernetes with MacOS"},{"location":"tutorials/setup/zeus-on-macos/#zeus-on-kubernetes-with-macos","text":"","title":"Zeus on Kubernetes with MacOS"},{"location":"tutorials/setup/zeus-on-macos/#prerequisites","text":"Have a Homebrew installed - https://docs.brew.sh/Installation","title":"Prerequisites"},{"location":"tutorials/setup/zeus-on-macos/#install-kubernetes-command-line-tool","text":"Run the following command: brew install kubectl To verify that the version you\u2019ve installed is up-to-date, run: kubectl version","title":"Install Kubernetes command-line tool"},{"location":"tutorials/setup/zeus-on-macos/#install-minikube","text":"Install Minikube v0.27.0 curl -Lo minikube https://storage.googleapis.com/minikube/releases/v0.27.0/minikube-darwin-amd64 && chmod +x minikube && sudo mv minikube /usr/local/bin/","title":"Install Minikube"},{"location":"tutorials/setup/zeus-on-macos/#additional-steps-with-docker","text":"","title":"Additional Steps with Docker"},{"location":"tutorials/setup/zeus-on-macos/#install-docker","text":"Install it using Hombrew: brew cask install docker Open Docker.app and continue the installation of the network (Ctrl+Space)","title":"Install Docker"},{"location":"tutorials/setup/zeus-on-macos/#build-the-image","text":"Build an image without uploading it: Set the environment variables with eval $(minikube docker-env) Clone the Zeus packaging project: git clone https://github.com/dirigiblelabs/zeus-v3-package.git Build the image with the Docker daemon of Minikube: cd zeus-v3-package/zeus mvn clean install docker build -t zeus . Set the image in the pod spec like the build tag: zeus Set the imagePullPolicy to Never , otherwise Kubernetes will try to download the image Important note: You have to run eval $(minikube docker-env) on each terminal you want to use, since it only sets the environment variables for the current shell session.","title":"Build the image"},{"location":"tutorials/setup/zeus-on-windows/","text":"Zeus on Kubernetes with Windows OS This tutorial was performed on a PC running Windows 10 Enterprise OS. Prerequisites Have VirtualBox 5.2.12 platform packages installed .NET Framework 4+ (the installation will attempt to install .NET 4.0 if you do not have it installed) Enabled VT-x or AMD-v virtualization (use the Performance tab for the CPU in the Task Manager to verify it) Install Kubernetes command-line tool Install Chocolatey Run the following command: @\"%SystemRoot%\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\" -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command \"iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))\" && SET \"PATH=%PATH%;%ALLUSERSPROFILE%\\chocolatey\\bin\" If you don't see any errors, you are ready to use Chocolatey! To ensure that Chocolatey is successfully installed, type choco or choco -? . For more information see https://chocolatey.org/install. Install the Kubernetes command-line tool kubectl with Chocolatey Execute the command: choco install kubernetes-cli To verify that the version you\u2019ve installed is up-to-date, run kubectl version Configure kubectl to use a remote Kubernetes cluster: cd C:\\users\\yourusername (Or wherever your %HOME% directory is) mkdir .kube cd .kube New-Item config -type file Edit the config file with a text editor of your choice. Check that kubectl is properly configured by getting the cluster state: kubectl cluster-info Install Minikube Install Minikube v0.26.1 Download the minikube-installer.exe file, and execute the installer. This will automatically add minikube.exe to your path. Additional Steps Install Docker Run CMD as Administrator Navigate to Chocolatey root folder Execute: choco install docker Confirm with y Build the image Build an image without uploading it: Set the environment variables with @FOR /f \"tokens=*\" %i IN ('minikube docker-env') DO @%i Clone the Zeus packaging project using Git Bash by executing: git clone https://github.com/dirigiblelabs/zeus-v3-package.git Build the image with the Docker daemon of Minikube: cd zeus-v3-package/zeus mvn clean install docker build -t zeus . Set the image in the pod spec like the build tag: zeus Set the imagePullPolicy to Never , otherwise Kubernetes will try to download the image Important note: You have to run eval $(minikube docker-env) on each terminal you want to use, since it only sets the environment variables for the current shell session.","title":"Zeus on Kubernetes with Windows OS"},{"location":"tutorials/setup/zeus-on-windows/#zeus-on-kubernetes-with-windows-os","text":"This tutorial was performed on a PC running Windows 10 Enterprise OS.","title":"Zeus on Kubernetes with Windows OS"},{"location":"tutorials/setup/zeus-on-windows/#prerequisites","text":"Have VirtualBox 5.2.12 platform packages installed .NET Framework 4+ (the installation will attempt to install .NET 4.0 if you do not have it installed) Enabled VT-x or AMD-v virtualization (use the Performance tab for the CPU in the Task Manager to verify it)","title":"Prerequisites"},{"location":"tutorials/setup/zeus-on-windows/#install-kubernetes-command-line-tool","text":"Install Chocolatey Run the following command: @\"%SystemRoot%\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\" -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command \"iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))\" && SET \"PATH=%PATH%;%ALLUSERSPROFILE%\\chocolatey\\bin\" If you don't see any errors, you are ready to use Chocolatey! To ensure that Chocolatey is successfully installed, type choco or choco -? . For more information see https://chocolatey.org/install. Install the Kubernetes command-line tool kubectl with Chocolatey Execute the command: choco install kubernetes-cli To verify that the version you\u2019ve installed is up-to-date, run kubectl version Configure kubectl to use a remote Kubernetes cluster: cd C:\\users\\yourusername (Or wherever your %HOME% directory is) mkdir .kube cd .kube New-Item config -type file Edit the config file with a text editor of your choice. Check that kubectl is properly configured by getting the cluster state: kubectl cluster-info","title":"Install Kubernetes command-line tool"},{"location":"tutorials/setup/zeus-on-windows/#install-minikube","text":"Install Minikube v0.26.1 Download the minikube-installer.exe file, and execute the installer. This will automatically add minikube.exe to your path.","title":"Install Minikube"},{"location":"tutorials/setup/zeus-on-windows/#additional-steps","text":"","title":"Additional Steps"},{"location":"tutorials/setup/zeus-on-windows/#install-docker","text":"Run CMD as Administrator Navigate to Chocolatey root folder Execute: choco install docker Confirm with y","title":"Install Docker"},{"location":"tutorials/setup/zeus-on-windows/#build-the-image","text":"Build an image without uploading it: Set the environment variables with @FOR /f \"tokens=*\" %i IN ('minikube docker-env') DO @%i Clone the Zeus packaging project using Git Bash by executing: git clone https://github.com/dirigiblelabs/zeus-v3-package.git Build the image with the Docker daemon of Minikube: cd zeus-v3-package/zeus mvn clean install docker build -t zeus . Set the image in the pod spec like the build tag: zeus Set the imagePullPolicy to Never , otherwise Kubernetes will try to download the image Important note: You have to run eval $(minikube docker-env) on each terminal you want to use, since it only sets the environment variables for the current shell session.","title":"Build the image"}]}